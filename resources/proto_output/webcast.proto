syntax = "proto3";

import "enums.proto";


message AuthenticationInfo {
    string custom_verify = 1;
    string enterpriseVerifyReason = 2;
    ImageModel authenticationBadge = 3;
    

}

message GalleryData {
    map<int64, TitleData> progress = 1;
    int64 period = 2;
    int64 endTimeInMs = 3;
    
    message TitleData {
    	int64 goalCount = 1;
    	int64 currentSponsorId = 2;
    

	}

}

message RoomStatsModel {
    int64 roomId = 1;
    bool alive = 2;
    FilterInfoData filterInfo = 4;
    

}

message AnchorSubWaveTriggerSettings {
    int64 id = 1;
    string name = 2;
    int64 needSubCounts = 3;
    

}

message TextPieceUser {
    User user = 1;
    bool withColon = 2;
    

}

message TextFormat {
    string color = 1;
    bool bold = 2;
    bool italic = 3;
    int32 weight = 4;
    int32 italicAngle = 5;
    int32 fontSize = 6;
    bool useHeighLightColor = 7;
    bool useRemoteColor = 8;
    

}

message CompetitionSettleEnd {
    int64 plannedFinishTime = 1;
    repeated CompetitionResultsTeamInfo teamInfos = 2;
    CompetitionUserBase leaveUser = 3;
    CompetitionEndReason reason = 4;
    TakeTheStageBiz takeTheStageBiz = 100;
    
    enum CompetitionEndReason {
    	COMPETITION_END_REASON_UNKNOWN = 0;
    	COMPETITION_END_REASON_NORMAL = 1;
    	COMPETITION_END_REASON_CUT_SHORT = 2;
    }
    message TakeTheStageBiz {
    	TakeTheStageStatus takeTheStageStatus = 1;
    
    	enum TakeTheStageStatus {
    		TAKE_THE_STAGE_STATUS_UNKNOWN = 0;
    		TAKE_THE_STAGE_STATUS_NOT_STARTED = 1;
    		TAKE_THE_STAGE_STATUS_CANCELLED = 2;
    		TAKE_THE_STAGE_STATUS_STARTED = 3;
    		TAKE_THE_STAGE_STATUS_FINAL_CALL = 4;
    		TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5;
    		TAKE_THE_STAGE_STATUS_FINISHED = 6;	
    }

	}

}

message MockResponse {
    Data data = 1;
    
    message GuideVideoURL {
    	string matchUrl = 1;
    	string interactUrl = 2;
    	string cohostUrl = 3;
    	string giftUrl = 4;
    	string multiguestUrl = 5;
    

	}
    message Data {
    	Room room = 1;
    	int64 mockRoomId = 2;
    	GuideVideoURL guideVideos = 3;
    

	}

}

message WebcastKaraokeQueueListMessage {
    CommonMessageData baseMessage = 1;
    int32 type = 2;
    int64 totalQueueCount = 3;
    repeated KaraokeSong songList = 4;
    int64 latestUpdateTime = 5;
    int64 operator = 6;
    

}

message IconConfig {
    ImageModel icon = 1;
    CombineBadgeBackground background = 2;
    

}

message PanelRefreshData {
    int64 roomId = 1;
    int64 timestamp = 2;
    repeated GalleryData galleryData = 100;
    UserLevel userLevel = 101;
    EligibleVaultGifts vaultData = 102;
    
    message GalleryData {
    	int64 sponsorId = 1;
    	int64 giftId = 2;
    	int64 ownProgress = 3;
    	int64 leftCountToSponsor = 4;
    	bool canSponsor = 5;
    	bool isGalleryAvailable = 6;
    

	}
    message UserLevel {
    	int64 currentScore = 1;
    	int64 currentLevel = 2;
    	int64 nextLevelScore = 3;
    	bool didUserOptOut = 4;
    

	}
    message EligibleVaultGifts {
    	repeated int64 giftIds = 1;
    

	}

}

message AudienceReserveUserInfo {
    int64 userId = 1;
    int64 reserveId = 2;
    

}

message WebcastGroupLiveMemberNotifyMessage {
    CommonMessageData baseMessage = 1;
    int64 hostUserId = 2;
    repeated MemberInfo memberInfo = 3;
    

}

message TraceInfo {
    int64 operateTime = 1;
    int64 arrivalTime = 2;
    int64 sendTime = 3;
    

}

message BizJoinDirectResponse {
    BizJoinDirectResponseData responseData = 1;
    

}

message MigrateGroupResp {
    LinkMicCommonResp commonResp = 1;
    repeated RTCExtraInfo groupRtcInfo = 2;
    GroupChannelAllUser groupUser = 3;
    BizMigrateGroupResponse cohostRespExtra = 9527;
    

}

message CompetitionTeamMemberInfo {
    CompetitionUserBase user = 1;
    int64 score = 2;
    

}

message CountdownForAllGetContentResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	CountdownForAllContent playContent = 1;
    

	}

}

message BattleTruthOrDareOptOutNotice {
    string closeContentKey = 1;
    

}

message SubGoalData {
    LiveStreamGoalIndicator indicator = 1;
    LiveStreamGoal goal = 2;
    

}

message PollEndContent {
    PollEndType endType = 1;
    repeated PollOptionInfo optionList = 2;
    User operator = 3;
    
    enum PollEndType {
    	POLL_END_TYPE_POLL_END_BY_TIME = 0;
    	POLL_END_TYPE_POLL_END_BY_OWNER = 1;
    	POLL_END_TYPE_POLL_END_BY_OTHER = 2;
    	POLL_END_TYPE_POLL_END_BY_ADMIN = 3;
    }

}

message PrivilegePlaceholder {
    string text = 1;
    string redirectLink = 2;
    

}

message WallpaperImageState {
    string imageUrl = 1;
    

}

message DestroyRequestResponse {
    

}

message PermitResponse {
    RTCExtraInfo rtcInfo = 2;
    string linkMicId = 3;
    MicPositionData position = 4;
    Player applier = 5;
    string applierLinkMicId = 6;
    repeated string linkedUserUiPositions = 7;
    repeated PosIdentity uiPos = 8;
    BizPermitResponse multiGuestRespExtra = 9527;
    

}

message StarCommentConfig {
    bool starCommentSwitch = 1;
    GrantGroup grantGroup = 2;
    int32 grantLevel = 3;
    bool starCommentQualification = 4;
    bool displayLock = 5;
    
    enum GrantGroup {
    	GRANT_GROUP_UNKNOWN = 0;
    	GRANT_GROUP_ALL_USER = 1;
    	GRANT_GROUP_USER_LEVEL = 2;
    	GRANT_GROUP_FANS_LEVEL = 3;
    }

}

message PunishEventInfo {
    string punishType = 1;
    string punishReason = 2;
    string punishId = 3;
    int64 violationUid = 4;
    PunishTypeId punishTypeId = 5;
    int64 duration = 6;
    string punishPerceptionCode = 7;
    string violationUidStr = 9;
    string showReason = 10;
    
    enum PunishTypeId {
    	PUNISH_TYPE_IDUN_KNOWN = 0;
    	PUNISH_TYPE_ID_BAN_LINK_MIC = 9;
    	PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP = 25;
    	PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP = 26;
    	PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC = 55;
    	PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH = 57;
    	PUNISH_TYPE_ID_BAN_VOICE_CHAT = 59;
    	PUNISH_TYPE_ID_BAN_LIVE_GOAL = 64;
    	PUNISH_TYPE_ID_VIEWER_LIMIT = 70;
    }

}

message PopSeries {
    int64 collectionId = 1;
    

}

message FaceRecognitionMeta {
    string version = 1;
    repeated string requirements = 2;
    string modelNames = 3;
    string sdkExtra = 4;
    

}

message WaitUser {
    int64 uid = 1;
    string linkMicId = 2;
    

}

message WebcastGoalUpdateMessage {
    CommonMessageData baseMessage = 1;
    LiveStreamGoalIndicator indicator = 2;
    LiveStreamGoal goal = 3;
    int64 contributorId = 4;
    ImageModel contributorAvatar = 5;
    string contributorDisplayId = 6;
    LiveStreamSubGoal contributeSubgoal = 7;
    int64 contributeCount = 9;
    int64 contributeScore = 10;
    int64 giftRepeatCount = 11;
    string contributorIdStr = 12;
    bool pin = 13;
    bool unpin = 14;
    GoalPinInfo pinInfo = 15;
    GoalMessageSource updateSource = 16;
    string goalExtra = 17;
    
    enum GoalMessageSource {
    	GOAL_MESSAGE_SOURCE_UNKNOWN = 0;
    	GOAL_MESSAGE_SOURCE_COMMIT = 1;
    	GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE = 2;
    	GOAL_MESSAGE_SOURCE_PIN = 3;
    	GOAL_MESSAGE_SOURCE_UNPIN = 4;
    	GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK = 5;
    	GOAL_MESSAGE_SOURCE_SUSPEND = 6;
    	GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT = 7;
    }

}

message GiftSuspension {
    int32 status = 1;
    string toast = 2;
    int64 endTime = 3;
    

}

message OecLiveShoppingMessageV2 {
    map<int64, EcomLiveElementActions> actions = 1;
    CommerceInfo commerceInfo = 2;
    MsgMeta msgMeta = 10;
    

}

message WebcastSubscriptionGuideMessage {
    CommonMessageData baseMessage = 1;
    Text description = 2;
    Text buttonName = 3;
    string buttonUrl = 4;
    string capsuleScene = 5;
    int64 from_user_id = 6;
    

}

message GiftGroupCount {
    int32 groupCount = 1;
    string groupText = 2;
    

}

message GiftIMPriority {
    repeated int64 queueSizes = 1;
    int64 selfQueuePriority = 2;
    int32 priority = 3;
    

}

message WallpaperAiCreateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	int64 keywordsReviewResult = 1;
    	string reviewId = 2;
    

	}

}

message SpriteImageItem {
    string url = 1;
    int64 spriteNum = 2;
    int64 imageXNum = 3;
    int64 imageYNum = 4;
    int64 imageHeight = 5;
    int64 imageWidth = 6;
    int64 fps = 7;
    

}

message WebcastNoticeboardReviewMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    string mediaNodeId = 3;
    int32 postReviewStatus = 4;
    int32 preReviewStatus = 5;
    int64 templateId = 6;
    int32 officialMaterialType = 7;
    

}

message SearchRivalsResponse {
    ResponseData data = 1;
    
    message Cell {
    	int32 cellType = 1;
    	Room room = 2;
    

	}
    message ResponseData {
    	repeated Cell cellList = 1;
    	map<int64, RivalExtraInfo> rivalExtraInfos = 2;
    	int32 nextOffset = 9;
    	bool hasMore = 10;
    	string searchId = 11;
    

	}

}

message LinkerSysKickOutContent {
    int64 userId = 1;
    string linkmicIdStr = 2;
    

}

message FlexImageModel {
    repeated string urlList = 1;
    string uri = 2;
    repeated int64 flexSetting = 3;
    

}

message StarCommentDeleteResponse {
    Data data = 1;
    
    message Data {
    	StarCommentQueue queue = 1;
    	int64 serverCurMsgStartTimeMs = 2;
    

	}

}

message WebcastMemberMessage {
    CommonMessageData baseMessage = 1;
    User user = 2;
    int32 count = 3;
    User operator = 4;
    bool setToAdmin = 5;
    bool isTopUser = 6;
    int32 rankScore = 7;
    int32 topUserNo = 8;
    int32 enterType = 9;
    int32 action = 10;
    string actionDescription = 11;
    int64 userId = 12;
    string popStr = 14;
    EffectConfigBean effectConfig = 15;
    ImageModel background = 17;
    Text anchorDisplayText = 18;
    string clientEnterSource = 19;
    string clientEnterType = 20;
    string clientLiveReason = 21;
    int64 actionDuration = 22;
    string userShareType = 23;
    DisplayStyle displayStyle = 24;
    map<int32, int32> adminPermissions = 25;
    int32 kickSource = 26;
    int64 allowPreviewTime = 27;
    int64 lastSubscriptionAction = 28;
    PublicAreaMessageCommon publicAreaMessageCommon = 29;
    int64 liveSubOnlyTier = 30;
    int64 liveSubOnlyMonth = 31;
    string ecStreamerKey = 32;
    int64 showWave = 33;
    WaveAlgorithmData waveAlgorithmData = 34;
    HitABStatus hitAbStatus = 35;
    
    enum DisplayStyle {
    	DISPLAY_STYLE_NORMAL = 0;
    	DISPLAY_STYLE_STAY = 1;
    	DISPLAY_STYLE_CHAT = 2;
    }
    enum HitABStatus {
    	HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT = 0;
    	HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT = 1;
    	HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT = 2;
    }
    message EffectConfigBean {
    	int32 type = 1;
    	ImageModel icon = 2;
    	Text textKey = 4;
    	ImageModel badge = 8;
    

	}

}

message FlareBoostedUsers {
    int64 cnt = 1;
    int64 endTime = 2;
    

}

message CalmDownInfo {
    int32 mRemainTime = 1;
    int32 mTotalTime = 2;
    int64 mThresholdValue = 3;
    int32 mShowPopup = 4;
    

}

message WebcastBottomMessage {
    CommonMessageData baseMessage = 1;
    string content = 2;
    ShowType showType = 3;
    TextType textType = 4;
    int64 duration = 5;
    BizType bizType = 6;
    int64 violationUserId = 7;
    PunishEventInfo punishInfo = 8;
    int32 style = 9;
    string detailUrl = 10;
    int32 floatStyle = 11;
    PerceptionDialogIconType floatIconType = 12;
    
    enum ShowType {
    	SHOW_TYPE_HOVER = 0;
    	SHOW_TYPE_PLUG = 1;
    }
    enum TextType {
    	TEXT_TYPE_DISPLAY_TEXT = 0;
    	TEXT_TYPE_CONTENT = 1;
    }
    enum BizType {
    	BIZ_TYPE_DEFAULT = 0;
    	BIZ_TYPE_RETHINK_CHAT = 1;
    	BIZ_TYPE_RETHINK_QA = 2;
    	BIZ_TYPE_WARNING_TAG_CURRENT_ROOM = 3;
    	BIZ_TYPE_WARNING_TAG_COHOST_ROOM = 4;
    	BIZ_TYPE_A_GS_AT_RISK_OF_UNABLE_TO_COMMENT = 5;
    	BIZ_TYPE_PERCEPTION_CENTER = 6;
    }
    enum PerceptionDialogIconType {
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18;
    }

}

message RevenueTipsSetting {
    bool enable = 1;
    

}

message ExchangeGiftResultData {
    int32 sourceType = 1;
    int64 balance = 2;
    

}

message GuessWidgetsData {
    GuessWidgets guessWidgets = 1;
    

}

message WebcastCapsuleMessage {
    CommonMessageData baseMessage = 1;
    ImageModel icon = 2;
    Text desc = 3;
    Text buttonText = 4;
    string schema = 5;
    int32 capsuleType = 6;
    Scene scene = 7;
    CapsuleBizParams bizParams = 8;
    

}

message WebcastLinkMicBattle {
    CommonMessageData baseMessage = 1;
    int64 battleId = 2;
    BattleSetting battleSetting = 3;
    BattleAction action = 4;
    map<int64, BattleResult> battleResult = 5;
    BattleDisplayConfig mBattleDisplayConfig = 6;
    GiftPermissionType inviteeGiftPermissionType = 8;
    repeated UserArmiesWrapper armies = 9;
    repeated BattleUserInfoWrapper anchorInfo = 10;
    string bubbleText = 11;
    repeated SupportedActionsWrapper supportedActions = 12;
    map<int64, BattleComboInfo> battleCombos = 13;
    repeated TeamUsersInfo teamUsers = 14;
    repeated BattleInviteeGiftPermission inviteeGiftPermissionTypes = 15;
    int64 actionByUserId = 16;
    repeated BattleTeamResult teamBattleResult = 17;
    repeated BattleTeamUserArmies teamArmies = 18;
    repeated BattleABTestSetting abtestSettings = 19;
    TeamMatchCampaign teamMatchCampaign = 20;
    HighScoreControlCfg fuzzyDisplayConfigV2 = 21;
    
    enum GiftPermissionType {
    	GIFT_PERMISSION_TYPE_UNKNOWN_TYPE = 0;
    	GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION = 1;
    	GIFT_PERMISSION_TYPE_ANCHOR_CLOSE = 2;
    	GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION = 3;
    	GIFT_PERMISSION_TYPE_ANCHOR_BANNED = 4;
    }
    enum BattleAction {
    	BATTLE_ACTION_UNKNOWN = 0;
    	BATTLE_ACTION_INVITE = 1;
    	BATTLE_ACTION_REJECT = 2;
    	BATTLE_ACTION_CANCEL = 3;
    	BATTLE_ACTION_OPEN = 4;
    	BATTLE_ACTION_FINISH = 5;
    	BATTLE_ACTION_CUT_SHORT = 6;
    	BATTLE_ACTION_ACCEPT = 7;
    	BATTLE_ACTION_QUIT_APPLY = 8;
    	BATTLE_ACTION_DECLINE_QUIT = 9;
    	BATTLE_ACTION_DECLINE_OFF_QUIT = 10;
    	BATTLE_ACTION_LEAVE_LINK_MIC = 11;
    }

}

message GameTagDetail {
    int64 gameTagId = 1;
    string gameTagName = 2;
    bool previewGameMomentEnable = 3;
    string starlingKey = 4;
    string displayName = 5;
    

}

message UsePotionCard {
    PotionCardInfo cardInfo = 1;
    int64 anchorId = 2;
    Text displayContent = 3;
    

}

message GiftKeywords {
    int64 giftId = 1;
    repeated string keywords = 2;
    

}

message WebcastQuestionSelectedMessage {
    CommonMessageData baseMessage = 1;
    Question question = 2;
    

}

message CountdownConfig {
    int64 duration = 1;
    bool autoExpand = 2;
    int64 targetScore = 3;
    

}

message RTCVideoParam {
    int32 width = 1;
    int32 height = 2;
    int32 fps = 3;
    int32 bitRate = 4;
    

}

message SubUpsellInfo {
    int32 upsellMethod = 1;
    string schema = 2;
    

}

message SmokeCardInfo {
    string cardNameKey = 1;
    ImageModel cardImage = 2;
    int64 sendTimeSec = 3;
    BattleUserInfo sendUser = 4;
    int64 effectLastDuration = 5;
    string ruleUrl = 6;
    int64 effectTimeSec = 7;
    int64 toAnchorId = 12;
    string toAnchorIdStr = 13;
    

}

message EventStruct {
    string id = 1;
    int64 startTime = 2;
    int64 duration = 3;
    string title = 4;
    string desc = 5;
    int32 status = 6;
    User owner = 7;
    int64 subscriberCount = 8;
    int32 type = 9;
    bool enableUpdate = 10;
    bool hasSubscribed = 11;
    int32 style = 12;
    

}

message ShowAgainGuestResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	ShowContent showContent = 2;
    

	}

}

message WebcastTrayMessage {
    CommonMessageData baseMessage = 1;
    User user = 2;
    Text title = 3;
    Text describe = 4;
    int32 comboCount = 5;
    int32 groupCount = 6;
    ImageModel image = 7;
    

}

message CppAgeVerificationInfo {
    int32 cppAgeVerificationAb = 1;
    int32 ageVerifyStatus = 2;
    int32 ageVerifyProcessStatus = 3;
    int64 ageVerifyTimes = 4;
    int64 ageAppealMethodTime = 5;
    int32 ageAppealMethodTimeUnit = 6;
    int32 ageAppealMethod = 7;
    

}

message GiftReceiveRecordsResponse {
    Data data = 1;
    Extra extra = 2;
    
    message Data {
    	repeated GiftRecord giftRecords = 1;
    	bool hasNext = 2;
    	int64 refTimestamp = 3;
    

	}
    message Extra {
    	string logId = 1;
    

	}

}

message BattleBonusConfig {
    int64 previewStartTime = 1;
    repeated PreviewPeriod previewPeriodConfig = 2;
    TaskPeriodConfig taskPeriodConfig = 3;
    RewardPeriodConfig rewardPeriodConfig = 4;
    map<int64, BattleTaskGiftAmountGuide> taskGiftGuide = 5;
    int64 previewStartTimestamp = 6;
    string previewClickActionSchemaUrl = 7;
    

}

message LevelBadge {
    ImageModel originImg = 3;
    ImageModel previewImg = 4;
    

}

message KickOutAllGuestsResp {
    LinkMicCommonResp commonResp = 1;
    repeated int64 removedUserIds = 2;
    

}

message GuessText {
    string key = 1;
    string desc = 2;
    int64 type = 3;
    

}

message BorderInfo {
    ImageModel icon = 1;
    int64 level = 2;
    string source = 3;
    ImageModel profileDecorationRibbon = 4;
    PrivilegeLogExtra borderLogExtra = 5;
    PrivilegeLogExtra ribbonLogExtra = 6;
    string avatarBackgroundColor = 7;
    string avatarBackgroundBorderColor = 8;
    

}

message RewardPeriodConfig {
    int64 rewardStartTime = 1;
    int64 duration = 2;
    int32 rewardMultiple = 3;
    int64 rewardStartTimestamp = 4;
    BattlePrompt rewardPraparePrompt = 11;
    BattlePrompt rewardingPrompt = 12;
    BattlePrompt clickPrompt = 13;
    

}

message AvatarImageCase {
    ImageModel exampleImages = 1;
    bool isBad = 2;
    

}

message QuickCohostContentInfo {
    repeated QuickCohostContent quickCohostContent = 1;
    

}

message RoomStickerAuditInfo {
    int64 violationId = 1;
    int64 taskType = 2;
    

}

message BizCreateChannelResponse {
    BizCreateChannelResponseData responseData = 1;
    

}

message BizLeaveJoinGroupResponse {
    int64 feedbackShowReason = 1;
    int64 feedbackContentType = 2;
    

}

message GuessOptionStats {
    int64 memberNum = 1;
    int64 pointsNum = 2;
    float bonusOdds = 3;
    

}

message WebcastAssetMessage {
    CommonMessageData baseMessage = 1;
    int64 assetId = 2;
    Text panelDisplayText = 3;
    bool showMessage = 4;
    bool showPanel = 5;
    User fromUser = 6;
    User toUser = 7;
    GiftIMPriority priority = 8;
    string logId = 9;
    AssetsModel assets = 10;
    

}

message QuizNextQuiz {
    int64 time = 1;
    string rewardAmount = 2;
    string quizId = 3;
    string liveEventId = 4;
    int64 endTime = 5;
    

}

message GrowthJourneyBannerInfo {
    GrowthJourneyBannerItem growLevelFirstBanner = 1;
    GrowthJourneyBannerItem growLevelSpecialLevelArrivedBanner = 2;
    GrowthJourneyBannerItem growthInstanceBanner = 3;
    

}

message NoticeboardTemplateCreateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool isSuccess = 1;
    	NoticeboardTemplate template = 2;
    

	}

}

message ResourceAttr {
    ResourceLocation resourceLocation = 1;
    GeckoAttr geckoAttr = 2;
    
    enum ResourceLocation {
    	RESOURCE_LOCATION_UNKNOWN = 0;
    	RESOURCE_LOCATION_GECKO = 1;
    }

}

message WebcastWalletLiveRewardsRatioMessage {
    CommonMessageData baseMessage = 1;
    WalletLiveRewardsRatioImMsg imMsg = 2;
    

}

message WallpaperPicReplyResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool result = 1;
    

	}

}

message WebcastLinkScreenChangeMessage {
    CommonMessageData baseMessage = 1;
    LinkScreenChangeMessageType messageType = 2;
    LinkerGuestCancelEnlargeContent guestCancelEnlarge = 3;
    LinkerEnlargeStatusSynContent enlargeStatusSyn = 4;
    EnlargePositionStatusSynContent enlargePosStatusSyn = 5;
    
    enum LinkScreenChangeMessageType {
    	LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_T_PYE_LINKER_UNKNOWN = 0;
    	LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_TYPE_LINKER_CANCEL_ENLARGE = 1;
    	LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_TYPE_ENLARGE_STATUS_SYN = 2;
    	LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_TYPE_ENLARGE_POSITION_STATUS_SYN = 3;
    }

}

message GroupChatGuestDetailsResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	repeated GroupChatGuestDetail guestDetails = 1;
    	int64 roomCreateGroupId = 2;
    	int64 roomCreateGroupCurrentUserNum = 3;
    	int64 roomCreateGroupCurrentUserNumLimit = 4;
    

	}

}

message WallpaperUserLeaveResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool result = 1;
    

	}

}

message PlaybookTagInfo {
    int32 tagType = 1;
    string tagTranslatedName = 2;
    

}

message WebcastPartnershipPunishMessage {
    CommonMessageData baseMessage = 1;
    PunishEventInfo punishInfo = 2;
    

}

message WebcastGiftPanelUpdateMessage {
    CommonMessageData baseMessage = 1;
    int64 roomId = 2;
    int64 timestamp = 3;
    GalleryData galleryData = 10;
    GoalData goalData = 11;
    RoomBasedGiftData roomBasedGiftData = 12;
    string strategyContext = 100;
    

}

message ProfileCardPanel {
    bool useNewProfileCardStyle = 1;
    BadgeTextPosition badgeTextPosition = 2;
    ProjectionConfig projectionConfig = 3;
    ProfileContent profileContent = 4;
    SeparatorConfig separatorConfig = 5;
    
    enum BadgeTextPosition {
    	BADGE_TEXT_POSITION_UNKNOWN = 0;
    	BADGE_TEXT_POSITION_RIGHT = 1;
    	BADGE_TEXT_POSITION_BELOW = 2;
    }

}

message BattleUserArmies {
    repeated BattleUserArmy userArmies = 1;
    int64 hostScore = 2;
    string anchorIdStr = 3;
    

}

message GuestShowdownCloseParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 playId = 3;
    int32 closeScene = 4;
    

}

message MultiGuestLinkmicInfo {
    repeated ListUser linkedUsers = 1;
    int32 requestUserStatus = 8;
    string fanTicketIconUrl = 9;
    HostDisplayInfo hostDisplayInfo = 14;
    
    message HostDisplayInfo {
    	string hostIconBackgroundUrl = 1;
    	string hostIconUrl = 2;
    	string hostColor = 3;
    	string iconLinkUrl = 4;
    	int64 hostType = 5;
    

	}
    message ListUser {
    	User user = 1;
    	int64 modifyTime = 2;
    	int32 roleType = 4;
    	string linkmicIdStr = 5;
    	int64 fanTicket = 7;
    	int32 fanTicketIconType = 10;
    

	}

}

message TryMode {
    int32 hasCreatedRoom = 1;
    bool enableLiveVideo = 2;
    int32 liveVideoGroup = 3;
    

}

message PlaybookContent {
    int64 playbookContentId = 1;
    int64 originalPlaybookContentId = 2;
    TextType textType = 3;
    string title = 4;
    string coverUrl = 5;
    string description = 6;
    int32 contentStatus = 7;
    int64 minSymphonyEngineAppVersion = 8;
    PlaybookEditorInfo editorInfo = 9;
    string flowStr = 10;
    string coverUri = 11;
    repeated int32 tagTypes = 12;
    

}

message Creator {
    int32 roomContinue = 1;
    bool isAnchorContinueKeepMsg = 2;
    int32 crossDeviceContinueScene = 3;
    int32 continueScene = 4;
    int64 linkMicUserNum = 5;
    

}

message LinkerWaitingListChangeContent {
    

}

message WebcastAnchorTaskReminderMessage {
    CommonMessageData baseMessage = 1;
    string taskRecordId = 2;
    

}

message NoticeboardUpdateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	NoticeboardContent noticeboardContent = 1;
    

	}

}

message WaveAlgorithmData {
    string algorithmVersion = 1;
    bool isAlgHit = 2;
    string predictScore = 3;
    bool isRewatch = 4;
    bool isFollow = 5;
    

}

message WebcastLinkBusinessMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    PopupStateChangeContent popupStateChangeContent = 3;
    

}

message NoticeboardTemplateFetchListResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	repeated NoticeboardTemplate myTemplates = 1;
    	repeated NoticeboardTemplate recommendedTemplates = 2;
    	int64 createNumLimit = 3;
    	bool isOfficialUser = 4;
    

	}

}

message GameEmoteConfig {
    string emotesCanNotBeUsedHint = 1;
    

}

message AddToCartButton {
    int32 status = 1;
    string clickHintStarling = 2;
    

}

message CapsuleBizParamsCohost {
    int64 availableFriendNumber = 1;
    bool isFollowedByRival = 2;
    User rivalUser = 3;
    string type = 4;
    UserModelPredictionData inviteeModelPredictionData = 5;
    int64 inviteeRoomId = 6;
    int64 inviteeInnerChannelId = 7;
    User inviteeUserInfo = 8;
    

}

message CountdownContent {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 countdownId = 3;
    int32 status = 4;
    int64 startTime = 5;
    int64 endTime = 6;
    CountdownConfig countdownConfig = 7;
    CountdownUser countdownUser = 8;
    

}

message ViolationStatusResponse {
    ResponseData data = 1;
    ResponseExtra extra = 2;
    
    message ResponseData {
    	int32 status = 1;
    	PerceptionDialogInfo perceptionDialog = 2;
    	PunishEventInfo punishEvent = 3;
    	Text perceptionToast = 4;
    

	}
    message ResponseExtra {
    	int64 now = 1;
    

	}

}

message OptPairInfo {
    int64 mappingId = 1;
    repeated OptPairUser displayUserList = 2;
    OptPairStatus buttonNoticeType = 3;
    int64 expectedTimeSec = 4;
    int64 optPairType = 5;
    
    enum OptPairStatus {
    	OPT_PAIR_STATUS_UNKNOWN = 0;
    	OPT_PAIR_STATUS_OFFLINE = 1;
    	OPT_PAIR_STATUS_FINISHED = 2;
    }
    message OptPairUser {
    	User user = 1;
    	int64 roomId = 2;
    

	}

}

message BizReplyResponse {
    BizReplyResponseData responseData = 1;
    

}

message DonationSticker {
    int64 id = 1;
    ImageModel image = 2;
    int32 type = 3;
    repeated int64 inputRect = 4;
    int32 textSize = 5;
    string textColor = 6;
    OrganizationModel content = 7;
    int64 maxLength = 8;
    int64 status = 9;
    int32 screenHeight = 10;
    int32 x = 11;
    int32 screenWidth = 12;
    int32 y = 13;
    int64 kind = 14;
    int64 subType = 15;
    

}

message GuestShowdownGetContentParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 playId = 3;
    int32 getType = 4;
    

}

message WebcastLinkLayerMessage {
    CommonMessageData baseMessage = 1;
    LinkLayerMessageType messageType = 2;
    int64 channelId = 3;
    Scene scene = 4;
    string source = 5;
    string centerizedIdc = 6;
    int64 rtcRoomId = 7;
    CreateChannelContent createChannelContent = 100;
    LinkListChangeContent listContent = 102;
    InviteContent inviteContent = 103;
    ApplyContent applyContent = 104;
    PermitApplyContent permitApplyContent = 105;
    ReplyInviteContent replyInviteContent = 106;
    KickOutContent kickOutContent = 107;
    CancelApplyContent cancelApplyContent = 108;
    CancelInviteContent cancelInviteContent = 109;
    LeaveContent leaveContent = 110;
    FinishChannelContent finishContent = 111;
    JoinDirectContent joinDirectContent = 112;
    JoinGroupContent joinGroupContent = 113;
    PermitJoinGroupContent permitGroupContent = 114;
    CancelJoinGroupContent cancelGroupContent = 115;
    LeaveJoinGroupContent leaveGroupContent = 116;
    P2PGroupChangeContent p2pGroupChangeContent = 117;
    GroupChangeContent groupChangeContent = 118;
    BusinessContent bizContent = 200;
    
    enum LinkLayerMessageType {
    	LINK_LAYER_MESSAGE_TYPE_LINKER_UNKNOWN = 0;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_CREATE = 1;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_INVITE = 2;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_APPLY = 3;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_PERMIT = 4;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_REPLY = 5;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_KICK_OUT = 6;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_CANCEL_APPLY = 7;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_CANCEL_INVITE = 8;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_LEAVE = 9;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_FINISH = 10;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_LIST_CHANGE = 11;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_JOIN_DIRECT = 12;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_JOIN_GROUP = 13;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_PERMIT_GROUP = 14;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_CANCEL_GROUP = 15;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_LEAVE_GROUP = 16;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_P_2_P_GROUP_CHANGE = 17;
    	LINK_LAYER_MESSAGE_TYPE_LINKER_GROUP_CHANGE = 18;
    }
    enum Scene {
    	SCENE_UNKNOWN = 0;
    	SCENE_CO_HOST = 2;
    	SCENE_MULTI_LIVE = 4;
    }

}

message ChangeStateResp {
    int32 result = 1;
    

}

message MessageRedEnvelopInfo {
    string envelopeId = 1;
    int32 businessType = 2;
    string envelopeIdc = 3;
    string sendUserName = 4;
    int32 diamondCount = 5;
    int32 peopleCount = 6;
    int32 unpackAt = 7;
    string sendUserId = 8;
    ImageModel sendUserAvatar = 9;
    string createTime = 10;
    int32 followStatusShow = 12;
    int32 skinId = 13;
    

}

message CustomTabs {
    int64 id = 1;
    int64 beginTime = 2;
    int64 endTime = 3;
    int64 anchorId = 4;
    int64 roomId = 5;
    int64 defaultTabIndex = 6;
    repeated CustomTab customTabList = 7;
    

}

message AnchorSettingsUpdateResponse {
    Extra extra = 1;
    
    message Extra {
    	int64 now = 1;
    

	}

}

message TagV2 {
    TagClassification tagClassification = 1;
    int32 tagType = 2;
    string tagValue = 3;
    string starlingKey = 4;
    SecondDegreeRelationContent secondDegreeRelationContent = 10;
    int64 cohostHistoryDay = 11;
    SimilarInterestContent similarInterestContent = 12;
    
    enum TagClassification {
    	TAG_CLASSIFICATION_UNKNOWN = 0;
    	TAG_CLASSIFICATION_COHOST_HISTORY = 1;
    	TAG_CLASSIFICATION_FIRST_DEGREE_RELATION = 2;
    	TAG_CLASSIFICATION_SECOND_DEGREE_RELATION = 3;
    	TAG_CLASSIFICATION_RANK = 4;
    	TAG_CLASSIFICATION_SIMILAR_INTERESTS = 5;
    }
    message UserInfo {
    	int64 userId = 1;
    	string nickName = 2;
    	ImageModel avatarThumb = 3;
    

	}
    message SecondDegreeRelationContent {
    	repeated UserInfo relatedUsers = 1;
    	int64 totalRelatedUserCnt = 2;
    

	}
    message SimilarInterestContent {
    	int64 contentId = 1;
    	string displayText = 2;
    

	}

}

message EcTaskRefreshCouponListEntity {
    string toastMsg = 1;
    

}

message ABInfos {
    string cdid = 1;
    string params = 2;
    

}

message LiveCoreSDKData {
    PullData pullData = 1;
    PushData pushData = 2;
    
    message Quality {
    	string name = 1;
    	string sdkKey = 2;
    	int32 iconType = 6;
    

	}
    message Options {
    	Quality defaultQuality = 1;
    	repeated Quality qualityList = 2;
    	Quality defaultPreviewQuality = 3;
    	bool showQualityButton = 4;
    

	}
    message PullData {
    	string streamData = 1;
    	Options options = 2;
    

	}
    message ResolutionParams {
    	int64 width = 1;
    	int64 height = 2;
    	int64 defaultBitrate = 3;
    	int64 minBitrate = 4;
    	int64 maxBitrate = 5;
    	int64 fps = 6;
    

	}
    message PushData {
    	map<string, ResolutionParams> resolutionParams = 1;
    	int32 pushStreamLevel = 2;
    	string streamData = 3;
    

	}

}

message GuideTarget {
    int64 targetId = 1;
    string targetType = 2;
    int64 periodId = 3;
    

}

message BattleNoticeToast {
    BattleNoticeText content = 1;
    

}

message ChannelMessage {
    int64 channelId = 1;
    int32 reportType = 2;
    string layoutId = 3;
    int32 layout_version = 4;
    

}

message LinkCommon {
    Scene scene = 1;
    string source = 200;
    int64 appId = 201;
    int64 live_id = 202;
    map<string, string> extraMap = 203;
    string centerizedIdc = 300;
    

}

message CapsuleBizParams {
    CapsuleBizParamsCohost cohost = 1;
    CapsuleBizParamsRandomGift randomGift = 3;
    CapsuleBizParamsNewAnchorEffect effectParams = 4;
    CapsuleBizParamsCommentFlaggedPrompt commentFlaggedPrompt = 5;
    CapsuleBizParamsMultiGuestInviteGuide multiGuestInviteGuide = 6;
    CapsuleBizParamsAnchorPinPerk anchorPinPerk = 7;
    CapsuleBizParamsGamingModeratorsCommentGuide gamingModeratorsCommentGuide = 8;
    CapsuleBizParamsCommentMuteRulePrompt commentMuteRulePrompt = 9;
    CapsuleBizParamsCommentFlaggedPromptForNewUser commentFlaggedPromptForNewUser = 10;
    

}

message EndShowParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 showId = 3;
    

}

message WebcastControlMessage {
    CommonMessageData baseMessage = 1;
    int32 action = 2;
    string tips = 3;
    Extra extraInfo = 4;
    PerceptionDialogInfo perceptionDialogInfo = 5;
    Text perceptionAudienceText = 6;
    PunishEventInfo punishInfo = 7;
    Text floatText = 8;
    int32 floatStyle = 9;
    
    message Extra {
    	string banInfoUrl = 1;
    	int64 reasonNo = 2;
    	Text title = 3;
    	Text violationReason = 4;
    	string source = 8;
    

	}

}

message WebcastMarqueeAnnouncementMessage {
    CommonMessageData baseMessage = 1;
    string messageScene = 2;
    repeated MessageEntity messageEntity = 3;
    
    message MessageEntity {
    	WebcastRoomNotifyMessage notifyMessage = 1;
    

	}

}

message GradeIcon {
    ImageModel icon = 1;
    int32 iconDiamond = 2;
    int32 level = 3;
    string levelStr = 4;
    

}

message LeaveJoinGroupContent {
    GroupPlayer operator = 1;
    int64 groupChannelId = 2;
    string leaveSource = 3;
    repeated string linkedUserUiPositions = 4;
    

}

message GiftListExtra {
    string logId = 1;
    

}

message ReportCommitData {
    int64 status = 1;
    string desc = 2;
    int64 reportId = 3;
    int64 recordId = 4;
    

}

message PriceChangeInfo {
    bool isPriceChanged = 1;
    string newPrice = 2;
    string oldPrice = 3;
    int64 nextBillingDate = 4;
    int64 daysLeftToAgreeChange = 6;
    bool isFirstEntrance = 7;
    bool isConsentRequired = 8;
    string contractId = 9;
    string orderId = 10;
    int64 noConfirmCancelContractDate = 11;
    BillingType billingType = 12;
    string changedPrice = 13;
    
    enum BillingType {
    	BILLING_TYPE_UNKNOWN = 0;
    	BILLING_TYPE_GP = 1;
    	BILLING_TYPE_WEB = 2;
    	BILLING_TYPE_APP_B = 3;
    	BILLING_TYPE_GP_COMMON_S_KU = 4;
    }

}

message PreScheduleStream {
    string sdkParams = 1;
    string speedProbeUrl = 2;
    repeated StreamResolution streamResolutionList = 3;
    int32 recommendStreamResolution = 4;
    int64 netMode = 5;
    bool degradationEnabled = 6;
    int32 degradationType = 7;
    map<int64, PushStreamInfo> pushStreamInfo = 8;
    repeated StreamResolution streamResolutionListAll = 9;
    int64 canGolive1080p = 10;
    string streamId = 11;
    repeated string streamPushUrls = 12;
    string streamRtmpPushUrl = 13;
    int64 preStreamGroup = 14;
    int64 rtcRoomId = 15;
    string rtcAppId = 16;
    string streamData = 17;
    
    message Quality {
    	string name = 1;
    	string sdkKey = 2;
    	string desc = 3;
    	int64 width = 4;
    	int64 height = 5;
    	int64 maxBitrate = 6;
    	int64 minBitrate = 7;
    	int64 defaultBitrate = 8;
    	int64 fps = 9;
    

	}
    message PushStreamInfo {
    	Quality defaultQuality = 1;
    	repeated Quality qualities = 2;
    

	}

}

message CountdownEndParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 countdownId = 3;
    int32 endReason = 4;
    

}

message WebcastChatMessage {
    CommonMessageData baseMessage = 1;
    User userInfo = 2;
    string content = 3;
    bool visibleToSender = 4;
    ImageModel background = 5;
    string fullScreenTextColor = 6;
    ImageModel backgroundImageV2 = 7;
    PublicAreaCommon publicAreaCommon = 9;
    ImageModel giftImage = 10;
    int32 inputType = 11;
    User atUser = 12;
    repeated EmoteWithIndex f315emotes = 13;
    string contentLanguage = 14;
    MsgFilter msgFilter = 15;
    int32 quickChatScene = 16;
    int32 communityflaggedStatus = 17;
    UserIdentity userIdentity = 18;
    repeated CommentQualityScore commentQualityScores = 19;
    CommentTag commentTag = 20;
    PublicAreaMessageCommon publicAreaMessageCommon = 21;
    int64 screenTime = 22;
    string signature = 23;
    string signatureVersion = 24;
    string ecStreamerKey = 25;
    
    enum CommentTag {
    	COMMENT_TAG_NORMAL = 0;
    	COMMENT_TAG_CANDIDATE = 1;
    	COMMENT_TAG_OVERAGE = 2;
    }

}

message LiveMessageID {
    string primaryID = 1;
    string messageScene = 2;
    

}

message GiftPanelCardletByCreator {
    Text displayText = 1;
    string schemaUrl = 2;
    int32 cardletPriority = 3;
    int32 cardletType = 4;
    CardletButton cardletButton = 5;
    ImageModel cardletIcon = 6;
    int32 copywritingType = 7;
    
    message CardletButton {
    	ImageModel leftIcon = 1;
    	string text = 2;
    	string schema = 3;
    	int32 buttonType = 4;
    	int32 buttonPriority = 5;
    

	}

}

message GuestShowdownGetContentResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	GuestShowdownContent playContent = 1;
    

	}

}

message WebcastGiftDynamicRestrictionMessage {
    CommonMessageData baseMessage = 1;
    DynamicRestriction dynamicRestriction = 2;
    

}

message GoalData {
    int32 status = 1;
    map<int64, Progress> goalProgress = 2;
    
    message Progress {
    	int64 currentProgress = 1;
    	int64 target = 2;
    	int64 expiredTimestampInMs = 3;
    

	}

}

message RoomCreateInfo {
    ImageModel mCover = 1;
    int64 mCoverAuditStatus = 2;
    string mTitle = 3;
    string mPrompt = 4;
    int32 mAnchorPromptType = 5;
    int32 mIsFirstBroadcastFlag = 7;
    string mAdditionalPrompt = 11;
    int32 donationSticker = 17;
    int64 mLastRoomId = 19;
    BlockStatus blockStatus = 22;
    LiveEventInfo mLiveEventInfo = 23;
    int64 live_house_status = 24;
    Hashtag hashtag = 25;
    bool useAvatarAsCover = 26;
    map<int64, PushStreamInfo> pushStreamInfoMap = 27;
    bool showGameTags = 28;
    int32 guideStatus = 29;
    bool isNewAnchor = 30;
    bool canShowFragment = 31;
    bool hasFragment = 32;
    GameLiveFragment lastFragment = 33;
    int32 screenShotCoverStatus = 34;
    string blockDetailUrl = 36;
    CreateInfoPerceptionMessage perceptionMessage = 37;
    AgeRestrictedConfig ageRestrictedConfig = 38;
    GameLiveInfo gameLiveInfo = 43;
    int32 deviceLevel = 44;
    CreateInfoPunishmentMessage punishmentMessage = 45;
    GameLiveConvertInfo gameLiveConvertInfo = 46;
    int32 roomAuthCustomizablePoll = 47;
    bool enablePinMessage = 48;
    int64 roomGiftCount = 49;
    map<int64, int64> adminEcShowPermission = 50;
    PermissionLevelInfo permissionLevelInfo = 51;
    repeated CreateInfoPerceptionMessage perceptionMessages = 52;
    string coverSource = 53;
    LiveProInfo liveProInfo = 54;
    bool anchorCanOpenCaption = 55;
    string voiceTitle = 56;
    ImageModel voiceCover = 57;
    int32 voiceCoverAuditStatus = 58;
    bool useAvatarAsVoiceCover = 59;
    string voiceCoverSource = 60;
    bool anchorStarCommentPermission = 61;
    int64 pollOptimizeGroup = 63;
    CppBannerInfo cppBannerInfo = 65;
    CppAgeVerificationInfo cppAgeVerificationInfo = 66;
    WebcastLSAccessStatus webcastLSAccessStatus = 67;
    bool foldBottomArea = 69;
    int32 effectActiveLevel = 70;
    bool hasGrowthCenter = 71;
    string growthCenterFirstDisplayText = 73;
    string growthCenterNotFirstDisplayText = 74;
    bool hasRecentStream = 75;
    bool hasGameGuessPermission = 76;
    bool defaultCommentTraySwitch = 77;
    bool showCampaignCenterOpenPage = 78;
    bool showCampaignCenterMorePage = 79;
    bool haveCampaign = 80;
    repeated PopMsgContainer popInfoList = 81;
    map<int64, MsgNotifyQuota> notifyQuotaConfig = 82;
    bool starCommentPermissionSwitch = 83;
    string starCommentPermissionSwitchOffReason = 84;
    CampaignBannerData campaignBannerData = 85;
    int64 pollTemplateOptimizeGroup = 87;
    GoLiveECIconInfo goLiveEcIconInfo = 88;
    ActivitiesIconInfo activitiesIconInfo = 89;
    int32 ttsProbationMode = 90;
    repeated AnchorReminderWordStatus reminderWordStatus = 91;
    MsgNotifyComAvoidConfig avoidConfig = 92;
    LiveStreamGoal ongoingGoal = 94;
    MultiGuestPlayInfo multiGuestPlayInfo = 95;
    NewAnchorIncentiveBannerData newAnchorIncentiveBannerData = 96;
    WalletRewardsContainerInfo walletRewardsContainerInfo = 97;
    UnifiedBannerData unifiedBannerData = 98;
    bool showShoppingManage = 100;
    GuessingGameInfo guessingGameInfo = 102;
    UnifiedBannerData liveJourneyBanner = 120;
    

}

message WebcastSubNotifyMessage {
    CommonMessageData baseMessage = 1;
    User user = 2;
    ExhibitionType exhibitionType = 3;
    int64 subMonth = 4;
    SubscribeType subscribeType = 5;
    OldSubscribeStatus oldSubscribeStatus = 6;
    MessageType subscribeMessageType = 7;
    SubscribingStatus subscribingStatus = 8;
    bool isSend = 9;
    bool isCustom = 10;
    GiftSource giftSource = 11;
    MessageDisplayStyle messageDisplayStyle = 12;
    PublicAreaMessageCommon publicAreaMessageCommon = 13;
    string packageId = 14;
    EventTracking eventTracking = 15;
    
    enum ExhibitionType {
    	EXHIBITION_TYPE_DEFAULT = 0;
    	EXHIBITION_TYPE_FOLD = 1;
    	EXHIBITION_TYPE_PUBLIC_SCREEN = 2;
    }
    enum SubscribeType {
    	SUBSCRIBE_TYPE_ONCE = 0;
    	SUBSCRIBE_TYPE_AUTO = 1;
    	SUBSCRIBE_TYPE_DEFAULT = 100;
    }
    enum OldSubscribeStatus {
    	OLD_SUBSCRIBE_STATUS_FIRST = 0;
    	OLD_SUBSCRIBE_STATUS_RE_SUB = 1;
    	OLD_SUBSCRIBE_STATUS_SUB_IN_GRACE_PERIOD = 2;
    	OLD_SUBSCRIBE_STATUS_SUB_NOT_IN_GRACE_PERIOD = 3;
    	OLD_SUBSCRIBE_STATUS_DEFAULT = 100;
    }
    enum MessageType {
    	MESSAGE_TYPE_SUB_SUCCESS = 0;
    	MESSAGE_TYPE_ANCHOR_REMINDER = 1;
    	MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON = 2;
    	MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR = 3;
    	MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE = 4;
    	MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR = 5;
    	MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE = 6;
    	MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE = 7;
    	MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE = 8;
    	MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE = 9;
    	MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE = 10;
    	MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE = 11;
    	MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE = 12;
    	MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE = 13;
    	MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK = 14;
    }
    enum SubscribingStatus {
    	SUBSCRIBING_STATUS_UNKNOWN = 0;
    	SUBSCRIBING_STATUS_ONCE = 1;
    	SUBSCRIBING_STATUS_CIRCLE = 2;
    	SUBSCRIBING_STATUS_CIRCLE_CANCEL = 3;
    	SUBSCRIBING_STATUS_REFUND = 4;
    	SUBSCRIBING_STATUS_IN_GRACE_PERIOD = 5;
    	SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD = 6;
    }
    enum GiftSource {
    	GIFT_SOURCE_UNKNOWN = 0;
    	GIFT_SOURCE_PLATFORM = 1;
    	GIFT_SOURCE_USER_BUY_RANDOM = 2;
    	GIFT_SOURCE_USER_BUY_SPECIFIC = 3;
    }
    enum MessageDisplayStyle {
    	MESSAGE_DISPLAY_STYLE_DEFAULT = 0;
    	MESSAGE_DISPLAY_STYLE_POPUP = 1;
    }

}

message KaraokeSong {
    int64 id = 1;
    string title = 2;
    string displayArtist = 3;
    string album = 4;
    int32 duration = 5;
    int32 prelude = 6;
    int32 postlude = 7;
    string coverVid = 8;
    repeated string coverUrls = 9;
    AudioStruct audioInfo = 10;
    AccompanimentStruct accompanimentInfo = 11;
    LyricStruct lyricInfo = 12;
    int32 songStatus = 13;
    repeated int64 labelIds = 14;
    bool isFavorite = 15;
    bool isAdded = 16;
    bool isRequest = 17;
    bool isYouSingRequest = 18;
    User singer = 19;
    

}

message CompetitionScoreChange {
    repeated CompetitionResultsTeamInfo teamInfos = 1;
    TriggerReason triggerReason = 2;
    TakeTheStageBiz takeTheStageBiz = 100;
    
    enum TriggerReason {
    	TRIGGER_REASON_UNKNOWN = 0;
    	TRIGGER_REASON_SCORE_UPDATE = 1;
    	TRIGGER_REASON_OPT_OUT_UPDATE = 2;
    }
    message TakeTheStageBiz {
    	TakeTheStageStatus status = 1;
    	int64 performanceStartTime = 2;
    	TakeTheStageOrderInfo orderInfo = 3;
    
    	enum TakeTheStageStatus {
    		TAKE_THE_STAGE_STATUS_UNKNOWN = 0;
    		TAKE_THE_STAGE_STATUS_NOT_STARTED = 1;
    		TAKE_THE_STAGE_STATUS_CANCELLED = 2;
    		TAKE_THE_STAGE_STATUS_STARTED = 3;
    		TAKE_THE_STAGE_STATUS_FINAL_CALL = 4;
    		TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5;
    		TAKE_THE_STAGE_STATUS_FINISHED = 6;	
    }

	}

}

message WebcastCommonPopupMessage {
    CommonMessageData baseMessage = 1;
    string schemaUrl = 2;
    bool anchorPopup = 3;
    

}

message PlayTogetherWidgetsData {
    MessageType messageType = 1;
    PlayTogetherBasicInfo basicInfo = 2;
    

}

message FansEventData {
    NewFansData newFansData = 1;
    TaskCompleteData taskCompleteData = 2;
    GetUnclaimedPoints getUnclaimedPoints = 3;
    TeamRankUpdate teamRankUpdate = 4;
    ExpChangeData expChangeData = 5;
    EntranceGuidanceData entranceGuidanceData = 6;
    FansTaskType triggerTaskTypes = 101;
    
    enum FansTaskType {
    	FANS_TASK_TYPE_UNKNOWN = 0;
    	FANS_TASK_TYPE_FANS_GIFT = 1;
    	FANS_TASK_TYPE_WATCH_LIVE = 2;
    	FANS_TASK_TYPE_SENDING_GIFT = 3;
    	FANS_TASK_TYPE_COMMENT = 4;
    	FANS_TASK_TYPE_MONTH_GIFT = 11;
    	FANS_TASK_TYPE_MONTH_COMMENT = 12;
    	FANS_TASK_TYPE_LONG_ACTIVE = 21;
    	FANS_TASK_TYPE_LIVE_NOTIFY = 22;
    	FANS_TASK_TYPE_LONG_HEART_ME = 23;
    	FANS_TASK_TYPE_LONG_WATCH = 24;
    	FANS_TASK_TYPE_LONG_COMMENT = 25;
    	FANS_TASK_TYPE_WEEKLY_TREASURE_BOX = 31;
    }
    message EntranceGuidanceData {
    	Text text = 1;
    	ImageModel icon = 2;
    	EntranceGuidanceType guidanceType = 5;
    	string freqControlKey = 6;
    	int64 freqControlDuration = 7;
    	int32 freqControlValue = 8;
    
    	enum EntranceGuidanceType {
    		ENTRANCE_GUIDANCE_TYPE_UNKNOWN = 0;
    		ENTRANCE_GUIDANCE_TYPE_ABOUT_TO_UPGRADE = 1;	
    }

	}
    message ExpChangeData {
    	bool claimedAllPoints = 1;
    

	}
    message GetUnclaimedPoints {
    	int64 unclaimedPoints = 1;
    	int64 expireTimestamp = 2;
    

	}
    message NewFansData {
    	int64 fansCount = 1;
    

	}
    message TaskCompleteData {
    	FansTaskType taskType = 1;
    	bool isClearToday = 2;
    
    	enum FansTaskType {
    		FANS_TASK_TYPE_UNKNOWN = 0;
    		FANS_TASK_TYPE_FANS_GIFT = 1;
    		FANS_TASK_TYPE_WATCH_LIVE = 2;
    		FANS_TASK_TYPE_SENDING_GIFT = 3;
    		FANS_TASK_TYPE_COMMENT = 4;
    		FANS_TASK_TYPE_MONTH_GIFT = 11;
    		FANS_TASK_TYPE_MONTH_COMMENT = 12;
    		FANS_TASK_TYPE_LONG_ACTIVE = 21;
    		FANS_TASK_TYPE_LIVE_NOTIFY = 22;
    		FANS_TASK_TYPE_LONG_HEART_ME = 23;
    		FANS_TASK_TYPE_LONG_WATCH = 24;
    		FANS_TASK_TYPE_LONG_COMMENT = 25;
    		FANS_TASK_TYPE_WEEKLY_TREASURE_BOX = 31;	
    }

	}
    message TeamRankUpdate {
    	int64 updatedRank = 1;
    	int64 updatedScore = 2;
    

	}

}

message GuestShowdownUser {
    int64 userId = 1;
    string linkmicId = 2;
    int64 score = 3;
    int32 rank = 4;
    string nickname = 5;
    string displayId = 6;
    ImageModel avatarThumb = 7;
    int32 userTag = 8;
    string iconName = 9;
    

}

message TriggerResumeNoticeResponse {
    ResponseData data = 1;
    
    message ResponseData {
    

	}

}

message EffectCategory {
    string id = 1;
    string key = 2;
    string name = 3;
    UrlDataStruct icon = 4;
    UrlDataStruct iconSelected = 5;
    repeated string effects = 6;
    repeated string tags = 7;
    string tagsUpdatedAt = 8;
    bool isDefault = 9;
    string extra = 10;
    

}

message WebcastEcBarrageMessage {
    CommonMessageData baseMessage = 1;
    ImageModel icon = 2;
    Text content = 3;
    int64 duration = 4;
    string backgroundColor = 5;
    double backgroundOpacity = 6;
    

}

message WebcastPromoteAdStatusMessage {
    CommonMessageData baseMessage = 1;
    int64 adId = 2;
    int32 status = 3;
    

}

message PollUpdateVotesContent {
    repeated PollOptionInfo optionList = 2;
    

}

message GetShowContentResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	ShowContent showContent = 1;
    

	}

}

message GuessingGameInfo {
    bool showGuessingGameEntrance = 1;
    

}

message BizJoinGroupParams {
    int32 sourceType = 1;
    bool checkPerceptionCenter = 2;
    int32 tagType = 3;
    string tagValue = 4;
    bool needWithdraw = 5;
    string algoRequestId = 6;
    CohostStreamConfig streamConfig = 7;
    

}

message ApplyAnimationContent {
    int64 userId = 1;
    bool isDisplay = 2;
    

}

message BattleInfoResponse {
    int64 channelId = 1;
    int64 battleId = 2;
    BattleSetting setting = 3;
    map<int64, BattleUserArmies> armies = 4;
    map<int64, BattleResult> resultMap = 5;
    map<int64, BattleUserInfo> userInfoMap = 6;
    string bubbleText = 7;
    map<int64, bool> supportedActions = 8;
    BattleDisplayConfig mBattleDisplayConfig = 9;
    map<int64, BattleComboInfo> battleCombos = 11;
    BattleTask battleTask = 12;
    map<int64, BattleTeamUserArmies> teamArmies = 13;
    map<int64, BattleTeamResult> teamBattleResult = 14;
    BattleTruthOrDare battleTruthOrDare = 15;
    TeamMatchCampaign teamMatchCampaign = 16;
    map<int64, EffectingCard> battleItemCards = 17;
    map<int64, EffectingCard> teamBattleItemCards = 18;
    string channelIdStr = 19;
    string battleIdStr = 20;
    HighScoreControlCfg fuzzyDisplayConfigV2 = 21;
    

}

message ShowListUser {
    int64 userId = 1;
    int32 status = 2;
    int32 order = 3;
    int64 showStartTime = 4;
    string nickname = 5;
    ImageModel avatarThumb = 6;
    int64 score = 7;
    string linkmicIdStr = 8;
    

}

message CoHost {
    bool multiCoHostPermission = 1;
    repeated LinkmicUser linkedUsers = 2;
    

}

message SubTimerSticker {
    SubTimerStickerChangeType type = 1;
    int64 timerId = 2;
    TimerOpType opType = 3;
    TimerStatus timerStatus = 4;
    string anchorSideTitle = 5;
    string userSideTitle = 6;
    int32 subIncreaseCount = 7;
    int64 timeIncreasePerSub = 8;
    int64 timeIncrease = 9;
    int64 totalTime = 10;
    int64 remainingTime = 11;
    int64 timestamp = 12;
    int64 stickerX = 13;
    int64 stickerY = 14;
    int64 screenW = 15;
    int64 screenH = 16;
    
    enum TimerOpType {
    	TIMER_OP_TYPE_START = 0;
    	TIMER_OP_TYPE_PAUSE = 1;
    	TIMER_OP_TYPE_RESUME = 2;
    	TIMER_OP_TYPE_CANCEL = 3;
    }
    enum TimerStatus {
    	TIMER_STATUS_NOT_STARTED = 0;
    	TIMER_STATUS_RUNNING = 1;
    	TIMER_STATUS_PAUSED = 2;
    	TIMER_STATUS_CANCELLED = 3;
    	TIMER_STATUS_FINISHED = 4;
    }
    enum SubTimerStickerChangeType {
    	SUB_TIMER_STICKER_CHANGE_TYPE_TITLE_CHANGE = 0;
    	SUB_TIMER_STICKER_CHANGE_TYPE_STATUS_CHANGE = 1;
    	SUB_TIMER_STICKER_CHANGE_TYPE_POSITION_CHANGE = 2;
    	SUB_TIMER_STICKER_CHANGE_TYPE_SUB_INCREASE = 3;
    	SUB_TIMER_STICKER_CHANGE_TYPE_ALIGN = 4;
    }

}

message LivePermissionInfo {
    int64 endTime = 1;
    string reason = 2;
    

}

message ByteRTCExtInfo {
    int32 defaultSignaling = 1;
    

}

message WebcastInteractionHubGoalMessage {
    CommonMessageData baseMessage = 1;
    Text interactionGoal = 2;
    Text interactionTips = 3;
    int32 interactionGoalType = 4;
    int32 interactionGoalSource = 5;
    Gift newGiftInfo = 6;
    bool hasNewGift = 7;
    AnchorActivityTaskProgress taskProgress = 8;
    

}

message ReportLinkMessageResp {
    LinkMicCommonResp commonResp = 1;
    int64 interval = 2;
    

}

message NotifyHighlightContent {
    string content = 1;
    bool needHighlight = 2;
    

}

message PrivilegeLogExtra {
    string data_version = 1;
    string privilege_id = 2;
    string privilege_version = 3;
    string privilege_order_id = 4;
    string level = 5;
    

}

message PatternRef {
    string key = 1;
    string defaultPattern = 2;
    

}

message AboutMeTemplate {
    string id = 1;
    string name = 2;
    ImageModel iconImage = 3;
    ImageModel iconImageDark = 4;
    repeated AboutMeInputBox inputBoxList = 5;
    

}

message CapsuleBizParamsCommentMuteRulePrompt {
    string content = 1;
    int64 userCnt = 2;
    

}

message EpiphronDecision {
    int64 ts = 1;
    map<string, string> data = 2;
    map<string, string> dataV2 = 3;
    map<string, string> serverFeatures = 4;
    

}

message Gift {
    ImageModel image = 1;
    string describe = 2;
    int32 duration = 4;
    int64 id = 5;
    bool forLinkMic = 7;
    bool combo = 10;
    int32 type = 11;
    int32 diamondCount = 12;
    bool isDisplayedOnPanel = 13;
    int64 primaryEffectId = 14;
    ImageModel leftLogo = 15;
    string name = 16;
    ImageModel icon = 21;
    string liveUserPngInfo = 24;
    ImageModel previewImage = 47;
    GiftPanelBanner giftPanelBanner = 48;
    bool isBroadcastGift = 49;
    bool isEffectBEFView = 50;
    bool isRandomGift = 51;
    bool isBoxGift = 52;
    bool canPutInGiftBox = 53;
    GiftBoxInfo giftBoxInfo = 54;
    map<string, string> trackerParams = 100;
    GiftLockInfo giftSubInfo = 101;
    repeated GiftColorInfo colorInfos = 102;
    string recommendInfo = 103;
    GiftRandomEffectInfo randomEffectInfo = 104;
    int32 giftSubType = 105;
    repeated int32 giftVerticalScenarios = 106;
    int32 groupInTab = 107;
    bool isGalleryGift = 108;
    GiftSponsorInfo giftSponsorInfo = 109;
    repeated GiftSkin giftSkins = 110;
    int32 giftLabelType = 111;
    repeated GiftText giftTexts = 112;
    repeated GiftSkinToGiftTextsInfo giftSkinToGiftTextsInfos = 113;
    int64 expirationTimestamp = 114;
    BatchGiftInfo batchGiftInfo = 115;
    bool isGlobalGift = 116;
    bool disableGalleryBanner = 117;
    UGGiftStructInfo ugGiftInfo = 118;
    CrossScreenEffectInfo crossScreenEffectInfo = 119;
    GiftPanelBeaconBubble beaconBubble = 120;
    
    message BatchGiftInfo {
    	bool canBatchSend = 1;
    	repeated int64 availableCounts = 2;
    

	}
    message CrossScreenEffectInfo {
    	map<int64, int32> singleActionEffectIds = 1;
    	map<int64, int32> actionEffectIds = 2;
    	map<int64, int32> reactionEffectIds = 3;
    

	}
    message GiftSponsorInfo {
    	int64 sponsorId = 1;
    	int64 sponsorCount = 2;
    	int64 currentCount = 3;
    	int64 leftCountToSponsor = 4;
    	bool canSponsor = 5;
    

	}
    message UGGiftStructInfo {
    	bool isUgGift = 1;
    	int64 ugPointsCost = 2;
    

	}
    message GiftSkin {
    	int64 giftSkinId = 1;
    	string giftSkinName = 2;
    	ImageModel staticImage = 3;
    	ImageModel animatedImage = 4;
    

	}
    message GiftText {
    	int64 giftTextId = 1;
    	string giftTextName = 2;
    

	}
    message GiftSkinToGiftTextsInfo {
    	int64 giftSkinId = 1;
    	repeated int64 giftTextIds = 2;
    

	}

}

message GroupLiveSession {
    bool isGroupLiveSession = 1;
    int64 lastVisitTime = 2;
    repeated GroupLiveMember groupLiveMembers = 3;
    

}

message AnchorActivityTaskProgress {
    string taskIconUrl = 1;
    string taskProgress = 2;
    

}

message WebcastEpiMessage {
    CommonMessageData baseMessage = 1;
    EpiDecision decisions = 2;
    

}

message CommonMessageData {
    string method = 1;
    int64 messageId = 2;
    int64 roomId = 3;
    int64 createTime = 4;
    int32 monitor = 5;
    bool showMsg = 6;
    string describe = 7;
    Text displayText = 8;
    int64 foldType = 9;
    int64 anchorFoldType = 10;
    int64 priorityScore = 11;
    string logId = 12;
    string msgProcessFilterK = 13;
    string msgProcessFilterV = 14;
    string fromIdc = 15;
    string toIdc = 16;
    repeated string filterTags = 17;
    LiveMessageSEI messageSEI = 18;
    LiveMessageID dependRootID = 19;
    LiveMessageID dependID = 20;
    int64 anchorPriorityScore = 21;
    int64 roomMessageHeatLevel = 22;
    int64 foldTypeForWeb = 23;
    int64 anchorFoldTypeForWeb = 24;
    int64 clientSendTime = 25;
    IMDispatchStrategy dispatchStrategy = 26;
    
    enum IMDispatchStrategy {
    	I_M_DISPATCH_STRATEGY_IM_DISPATCH_STRATEGY_DEFAULT = 0;
    	I_M_DISPATCH_STRATEGY_IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE = 1;
    }

}

message WebcastLinkmicAnimationMessage {
    CommonMessageData baseMessage = 1;
    ApplyAnimationContent applyAnimationContent = 2;
    

}

message CreateChannelResponse {
    int64 channelId = 2;
    RTCExtraInfo rtcInfo = 3;
    string selfLinkMicId = 4;
    int32 isResume = 5;
    BizCreateChannelResponse multiGuestRespExtra = 9527;
    

}

message LivePermissionApply {
    bool enableThirdParty = 1;
    bool enableScreenshot = 2;
    bool enableLiveVideo = 3;
    

}

message AgeRestricted {
    bool restricted = 1;
    int32 ageInterval = 2;
    int32 source = 3;
    

}

message GiftSendFansClubInfo {
    string fansGiftToast = 1;
    

}

message GameTag {
    int64 id = 1;
    string showName = 2;
    string shortName = 3;
    string fullName = 4;
    repeated Hashtag hashtagList = 6;
    repeated GameTagCategory gameCategory = 7;
    int32 landscape = 8;
    string packageName = 9;
    string bundleId = 10;
    bool isNewGame = 11;
    

}

message EmoteListResult {
    repeated EmoteModel emoteList = 1;
    bool exist = 2;
    

}

message CountdownForAllStartResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool isExists = 1;
    	CountdownForAllContent playContent = 2;
    

	}

}

message LeaveJoinGroupReq {
    LinkCommon common = 1;
    GroupPlayer myself = 2;
    GroupPlayer leaver = 3;
    int64 groupChannelId = 4;
    int64 curGroupChannelId = 5;
    BizLeaveJoinGroupParams cohostReqExtra = 9527;
    

}

message BizCancelApplyParams {
    int64 anchorId = 1;
    

}

message TruthOrDareTip {
    string tipType = 1;
    string tipContent = 2;
    

}

message WebcastKaraokeYouSingReqMessage {
    CommonMessageData baseMessage = 1;
    repeated ReqSong songList = 2;
    int64 totalReqCount = 3;
    int64 reqTimestampSeconds = 4;
    int32 type = 5;
    

}

message WebcastRealTimePerformancePageMessage {
    CommonMessageData baseMessage = 1;
    int32 type = 2;
    string guideTextStarling = 3;
    

}

message WebcastStreamStatusMessage {
    CommonMessageData baseMessage = 1;
    repeated StreamStatusChangeInfo streams = 2;
    

}

message AudienceRejectContent {
    int64 fromUserId = 1;
    

}

message WebcastGiftCollectionUpdateMessage {
    CommonMessageData baseMessage = 1;
    GiftCollection giftCollection = 2;
    

}

message WebcastCommercialCustomMessage {
    CommonMessageData baseMessage = 1;
    int64 customMessageId = 2;
    ImageModel brandLogo = 3;
    Text brandName = 4;
    string borderColor = 7;
    RightLabel rightLabel = 8;
    int64 duration = 9;
    
    message RightLabel {
    	string backgroundColor = 1;
    	Text content = 2;
    	int64 height = 3;
    

	}

}

message WebcastGuideMessage {
    CommonMessageData baseMessage = 1;
    int64 guideType = 2;
    int64 giftId = 3;
    string description = 4;
    int64 duration = 5;
    int64 displayStyle = 6;
    Scene scene = 7;
    

}

message PartnershipBriefDrops {
    string idStr = 1;
    string name = 2;
    string icon = 3;
    string gameName = 4;
    int64 startTime = 5;
    int64 endTime = 6;
    bool joined = 7;
    string gameIdStr = 8;
    int32 incentivetype = 9;
    int64 gameTagId = 10;
    

}

message MultiMatchPrepareResponse {
    map<int64, int32> anchorsPermission = 1;
    int64 recommendTeamMate = 2;
    map<int64, BattleABTestList> abTestSettings = 3;
    repeated GiftMode giftMode = 4;
    string ruleGuideUrl = 5;
    int64 bestTeammateId = 6;
    Text giftEventDesc = 7;
    int64 punishedAnchor = 8;
    int64 punishEndTimestamp = 9;
    

}

message RepostInfo {
    bool showTag = 1;
    string repostersToken = 2;
    int64 repostersCnt = 3;
    

}

message RechargeCustomError {
    int32 promptType = 1;
    string toastContent = 2;
    string popUpTitle = 3;
    string popUpContent = 4;
    map<string, RechargePopUpContentReplace> contentReplace = 5;
    string popUpDismiss = 6;
    int32 popUpDismissAction = 7;
    string popUpPrimaryCta = 8;
    string popUpPrimaryCtaSchema = 9;
    string extra = 10;
    int32 popUpStyle = 11;
    string linkToJump = 12;
    int32 popUpPrimaryAction = 13;
    string penaltyWarningSkip = 14;
    int32 errCode = 15;
    string popUpDismissCtaSchema = 16;
    string questionMarkCtaSchema = 17;
    

}

message BlockStatus {
    bool isBlock = 1;
    int64 entTime = 2;
    

}

message WebcastDonationMessage {
    CommonMessageData baseMessage = 1;
    int64 total = 2;
    string currency = 3;
    repeated User sponsor = 4;
    repeated User user = 5;
    

}

message CohostListResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	int64 totalPositionCount = 1;
    	int64 groupChannelId = 2;
    	repeated CohostListUser users = 3;
    

	}

}

message AckStateResp {
    int32 result = 1;
    

}

message ReplyContent {
    User replier = 1;
    int64 replierRoomId = 2;
    ReplyStatus replyStatus = 3;
    

}

message JoinGroupMessageExtra {
    int64 sourceType = 1;
    RivalExtra extra = 2;
    repeated RivalExtra otherUsers = 3;
    
    message AuthenticationInfo {
    	string customVerify = 1;
    	string enterpriseVerifyReason = 2;
    	ImageModel authenticationBadge = 3;
    

	}
    message RivalExtra {
    	int64 userCount = 4;
    	ImageModel avatarThumb = 5;
    	string displayId = 6;
    	AuthenticationInfo authenticationInfo = 7;
    	string nickname = 8;
    	int64 followStatus = 9;
    	Hashtag hashtag = 10;
    	TopHostInfo topHostInfo = 11;
    	int64 userId = 12;
    	bool isBestTeammate = 13;
    	OptPairInfo optPairInfo = 14;
    	int64 eoyLevel = 15;
    	CohostNudgeInfo nudgeInfo = 16;
    	int64 reservationId = 17;
    	int64 followerCount = 18;
    	RivalsGameTag gameTag = 19;
    
    	enum CohostNudgeInfo {
    		COHOST_NUDGE_INFO_NONE = 0;
    		COHOST_NUDGE_INFO_YOUR_NUDGE = 1;
    		COHOST_NUDGE_INFO_NUDGED_YOU = 2;	
    }

	}

}

message BizMigrateGroupResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	map<int64, CohostUserInfo> userInfos = 1;
    

	}

}

message WebcastLiveGameIntroMessage {
    CommonMessageData baseMessage = 1;
    Text content = 2;
    bool hasRankInfo = 3;
    

}

message LivePodcastResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool canBeLivePodcast = 1;
    	bool canBeSocialLive = 2;
    	LiveScenario liveScenario = 3;
    	LivePermissionApply livePermissionApply = 4;
    	bool showLiveStudio = 5;
    	AnchorLevelPermission anchorLevelPermission = 6;
    	bool canBePicoLivePodcast = 7;
    	TryMode tryMode = 8;
    	LiveStudioPermissionStatus liveStudioPermissionStatus = 9;
    	Stream stream = 10;
    	int64 canCache = 11;
    	bool showMockLiveTab = 12;
    	EntranceConditionsPopup conditionsPopup = 13;
    

	}

}

message SubPinCard {
    int64 timeToLive = 1;
    Text title = 2;
    Text desc = 3;
    ImageModel image = 4;
    int64 id = 6;
    int64 templateId = 7;
    SubGoalPinCard goalPinCard = 8;
    string actionSchema = 9;
    int64 lastPinTimestamp = 10;
    
    enum PinCardType {
    	PIN_CARD_TYPE_UNKNOWN_PIN_CARD_TYPE = 0;
    	PIN_CARD_TYPE_CUSTOMIZED_BENEFIT_E_NUM = 1;
    	PIN_CARD_TYPE_SUB_GOAL_E_NUM = 2;
    	PIN_CARD_TYPE_UP_SELL_DM = 3;
    	PIN_CARD_TYPE_UP_SELL_LEAD_SGEN = 4;
    }
    message Text {
    	TextType type = 1;
    	string content = 2;
    
    	enum TextType {
    		TEXT_TYPE_UNKNOWN_TEXT_TYPE = 0;
    		TEXT_TYPE_ORIGINAL_TEXT = 1;
    		TEXT_TYPE_STARLING_KEY = 2;	
    }

	}

}

message CompetitionInitiateInfo {
    CompetitionUserBase initiator = 1;
    CompetitionInitiateType initiateType = 2;
    repeated CompetitionTeamBase teams = 3;
    map<int64, CompetitionABInfo> abInfos = 4;
    TakeTheStageBiz takeTheStageBiz = 100;
    
    enum CompetitionInitiateType {
    	COMPETITION_INITIATE_TYPE_NORMAL = 0;
    	COMPETITION_INITIATE_TYPE_REMATCH = 1;
    }
    message AnchorInfo {
    	int64 userId = 1;
    

	}
    message TakeTheStageBiz {
    	repeated AnchorInfo anchors = 1;
    

	}

}

message ReplyBizContent {
    int32 linkType = 1;
    int32 isTurnOffInvitation = 2;
    User replyUserInfo = 3;
    

}

message RealtimeLiveCenterTips {
    bool showTips = 1;
    string tipText = 2;
    int64 tipType = 3;
    string randomTipKey = 4;
    string tipsSchema = 5;
    

}

message LiveLimitedTimeDiscountGiftInfo {
    int64 giftId = 1;
    int64 originalPrice = 2;
    int64 expireTime = 3;
    int32 remainTimes = 4;
    int32 discountPercentage = 5;
    

}

message GetShowRankParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 showId = 3;
    

}

message BackGroundImageState {
    string stickerId = 1;
    

}

message ResumeResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	string rtcExtInfo = 1;
    	bool isResume = 2;
    	repeated CohostListUser users = 3;
    	int64 totalPositionCount = 4;
    	int64 channelId = 5;
    

	}

}

message CountdownForAllContent {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 playId = 3;
    int32 playStatus = 4;
    int64 version = 5;
    int64 startTime = 6;
    int64 endTime = 7;
    CountdownForAllConfig playConfig = 8;
    repeated CountdownForAllUser playUsers = 9;
    

}

message BenefitsInfo {
    repeated string customizedBenefits = 1;
    bool isSubscribe = 2;
    bool isDefaultBenefits = 3;
    

}

message GroupChatGuestDetail {
    User userInfo = 1;
    int64 linkedSeconds = 2;
    

}

message ForceInsertMetricsItem {
    int32 forceInsertType = 1;
    int32 forceIndexConfig = 2;
    

}

message LinkerMediaChangeOperator {
    int64 userId = 1;
    LinkMicUserAdminType operatorType = 2;
    string nickName = 3;
    string displayId = 4;
    
    enum LinkMicUserAdminType {
    	LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0;
    	LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1;
    	LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2;
    }

}

message GoalStats {
    int64 totalCoins = 1;
    int64 totalContributor = 2;
    GoalComparison comparison = 3;
    int64 totalNewFans = 4;
    

}

message TextEffect {
    Detail portraitDetail = 1;
    Detail landscapeDetail = 2;
    
    message Detail {
    	Text text = 1;
    	int32 textFontSize = 2;
    	ImageModel background = 3;
    	int64 start = 4;
    	int64 duration = 5;
    	int32 x = 6;
    	int32 y = 7;
    	int32 width = 8;
    	int32 height = 9;
    	int32 shadowDx = 10;
    	int32 shadowDy = 11;
    	int32 shadowRadius = 12;
    	string shadowColor = 13;
    	string strokeColor = 14;
    	int32 strokeWidth = 15;
    

	}

}

message ECShortItemRefreshMessage {
    ShortItemRefreshEntity entity = 2;
    

}

message EcommerceRoomTag {
    string tagName = 1;
    int32 tagType = 2;
    int64 tagShowTime = 3;
    string daInfo = 4;
    

}

message CompetitionReplyResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	CompetitionCommon bizCommon = 1;
    	map<int64, CompetitionABInfo> abInfos = 2;
    

	}

}

message AuditInfo {
    int64 violationId = 1;
    AuditTaskType taskType = 2;
    
    enum AuditTaskType {
    	AUDIT_TASK_TYPE_DEFAULT = 0;
    	AUDIT_TASK_TYPE_APPEAL = 1;
    }

}

message UserArmiesWrapper {
    int64 userId = 1;
    BattleUserArmies userArmies = 2;
    

}

message WebcastPartnershipDropsCardChangeMessage {
    CommonMessageData baseMessage = 1;
    int32 changeMode = 2;
    string dropsId = 3;
    int64 cardShowDuration = 4;
    string gameId = 5;
    string gameName = 6;
    

}

message WebcastGameGuessWidgetsMessage {
    CommonMessageData baseMessage = 1;
    GuessWidgets guessWidgets = 2;
    

}

message PreviewGameMomentData {
    PreviewGameInfoType previewGameInfoType = 1;
    GameMomentMessageType gameMomentMessageType = 2;
    int64 eventTime = 3;
    int64 maxTime = 4;
    string momentUniqueId = 5;
    Text content = 6;
    Text gameTagName = 7;
    int64 gameTagId = 8;
    
    enum GameMomentMessageType {
    	GAME_MOMENT_MESSAGE_TYPE_UNKNOWN = 0;
    	GAME_MOMENT_MESSAGE_TYPE_VICTORY = 1;
    	GAME_MOMENT_MESSAGE_TYPE_HIGHLIGHT = 2;
    	GAME_MOMENT_MESSAGE_TYPE_DEFEAT = 3;
    	GAME_MOMENT_MESSAGE_TYPE_KILL_NUM = 4;
    	GAME_MOMENT_MESSAGE_TYPE_REMAIN_NUM = 5;
    }
    enum PreviewGameInfoType {
    	PREVIEW_GAME_INFO_TYPE_UNKNOWN = 0;
    	PREVIEW_GAME_INFO_TYPE_REALTIME = 1;
    	PREVIEW_GAME_INFO_TYPE_MOMENT_ACCUMULATE_INFO = 2;
    }

}

message StarlingTranslateInfo {
    string starlingKey = 1;
    repeated LangTranslate langTranslate = 2;
    

}

message GameServerFeatureSetting {
    bool gblServerFeaturesEnable = 1;
    string gblServerFeaturesList = 2;
    

}

message GoodyBagUserInfo {
    string userId = 1;
    string nickname = 2;
    string displayId = 3;
    ImageModel avatar = 4;
    

}

message WebcastMiddleTouchMessage {
    CommonMessageData baseMessage = 1;
    UnifyBaseActionData actionData = 2;
    MiddleTouchExtra extra = 3;
    

}

message PollVoteLimit {
    PollVoteLimitType limitType = 1;
    int64 voteCountLimit = 2;
    
    enum PollVoteLimitType {
    	POLL_VOTE_LIMIT_TYPE_SINGLE = 0;
    	POLL_VOTE_LIMIT_TYPE_MULTIPLE = 1;
    }

}

message BattleTaskStart {
    BattleBonusConfig battleBonusConfig = 1;
    

}

message CheckUpdateResponse {
    Data data = 1;
    
    message Data {
    	bool updated = 1;
    

	}

}

message LokiExtraContent {
    string giftType = 1;
    int64 giftDuration = 2;
    bool needScreenShot = 3;
    bool ismultiFrame = 4;
    string viewOverlay = 5;
    BEFViewRenderSize befViewRenderSize = 6;
    int32 befViewRenderFPS = 7;
    int32 befViewFitMode = 8;
    string modelNames = 9;
    repeated string requirements = 10;
    

}

message ImageBadge {
    BadgeDisplayType badgeDisplayType = 1;
    ImageModel imageModel = 2;
    
    enum BadgeDisplayType {
    	BADGE_DISPLAY_TYPE_UNKNOWN = 0;
    	BADGE_DISPLAY_TYPE_IMAGE = 1;
    	BADGE_DISPLAY_TYPE_TEXT = 2;
    	BADGE_DISPLAY_TYPE_STRING = 3;
    	BADGE_DISPLAY_TYPE_COMBINE = 4;
    }

}

message BattleTeamResult {
    int64 teamId = 1;
    repeated BattleTeamUser teamUsers = 2;
    int32 result = 3;
    int64 totalScore = 4;
    

}

message PictionaryInfo {
    int64 id = 1;
    string word = 2;
    int32 status = 3;
    int64 startTime = 4;
    int64 endTime = 5;
    int64 sessionId = 6;
    ImageModel drawUrl = 7;
    int32 pictionaryType = 8;
    

}

message GuessWidgets {
    repeated GuessRankUserInfo userRank = 2;
    

}

message GoalComparison {
    int64 coinsIncr = 1;
    int64 contributorIncr = 2;
    

}

message WebcastUserStatsMessage {
    CommonMessageData baseMessage = 1;
    string mContent = 2;
    int64 mUserId = 3;
    int64 mActionType = 4;
    

}

message ReplyResponse {
    RTCExtraInfo rtcInfo = 2;
    string inviteeLinkMicId = 3;
    MicPositionData position = 4;
    repeated string linkedUserUiPositions = 5;
    repeated PosIdentity uiPos = 6;
    BizReplyResponse multiGuestRespExtra = 9527;
    

}

message BattleResult {
    int64 userId = 1;
    Result result = 2;
    int64 score = 3;
    
    enum Result {
    	RESULT_WIN = 0;
    	RESULT_LOSE = 1;
    	RESULT_DRAW = 2;
    }

}

message PerceptionFeedbackOption {
    int64 id = 1;
    string contentKey = 2;
    

}

message WebcastWallpaperReviewMessage {
    CommonMessageData baseMessage = 1;
    string aiPicUrl = 2;
    int64 reviewResult = 3;
    string contextKeywords = 4;
    string keywords = 5;
    int64 roomId = 6;
    int64 channelId = 7;
    int64 wallpaperId = 8;
    

}

message BattleRecentContribResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	repeated string giftLogIds = 1;
    	map<int64, bool> supportedActions = 2;
    	map<int64, BattleResult> battleScore = 3;
    	map<int64, BattleTeamResult> teamBattleScore = 4;
    

	}

}

message VideoMetaInfo {
    string url = 1;
    int64 height = 2;
    int64 width = 3;
    int64 size = 4;
    float duration = 5;
    

}

message WebcastLinkMicAdMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    repeated LinkMicAdContent linkAdContents = 3;
    

}

message CompetitionInitiateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	CompetitionCommon bizCommon = 1;
    	int32 inviterGiftPermissionType = 2;
    	repeated CompetitionTeamBase teams = 3;
    	int64 endTimestampSec = 4;
    	int64 actualEndTimestampSec = 5;
    

	}

}

message BattleUserInfoWrapper {
    int64 userId = 1;
    BattleUserInfo userInfo = 2;
    

}

message WebcastLSAccessStatus {
    bool userAccessStatus = 1;
    bool isUpgradeRestricted = 2;
    string punishDetailUrl = 3;
    string upgradeRestrictionEndDay = 4;
    

}

message StarCommentGetQueueResponse {
    Data data = 1;
    
    message Data {
    	StarCommentQueue queue = 1;
    	int64 serverCurMsgStartTimeMs = 2;
    	string clientReserve = 3;
    	int64 pollingIntervalMs = 4;
    	int64 normalIntervalBetweenMsgMs = 5;
    	int64 advancedIntervalBetweenMsgMs = 6;
    	int64 laggingIntervalBetweenMsgMs = 7;
    

	}

}

message AgeRestrictionSettings {
    int32 ageRestricted = 1;
    

}

message WebcastSubTimerStickerMessage {
    CommonMessageData baseMessage = 1;
    SubTimerSticker sticker = 2;
    

}

message AnchorInfo {
    int64 level = 1;
    

}

message StreamUrlExtra {
    int32 height = 1;
    int32 width = 2;
    int32 fps = 3;
    int32 maxBitrate = 4;
    int32 minBitrate = 5;
    int32 defaultBitrate = 6;
    int32 bitrateAdaptStrategy = 7;
    int32 anchorInteractProfile = 8;
    int32 audienceInteractProfile = 9;
    bool hardwareEncode = 10;
    int32 profile = 12;
    SrConfig srConfig = 14;
    float gopSec = 16;
    bool enableBFrame = 17;
    bool isRoi = 18;
    bool isSwRoi = 19;
    bool enableByteVC1 = 20;
    
    message SrConfig {
    	bool enabled = 1;
    	int32 strength = 2;
    	bool antiAlias = 3;
    

	}

}

message ReportLinkMessageReq {
    LinkCommon common = 1;
    Player mySelf = 2;
    ChannelMessage channelMessage = 3;
    AnchorClientList anchorClientList = 4;
    GuestClientList guestClientList = 5;
    

}

message GetFirstRechargeInfoV2Resp {
    Data data = 1;
    
    message RewardProcess {
    	int64 rewardId = 1;
    	int32 rewardOrder = 2;
    	int32 rewardScene = 3;
    	int64 rewardAmount = 4;
    	int64 rewardExpire = 5;
    	ImageModel rewardIcon = 6;
    

	}
    message CampaignProcess {
    	int64 taskId = 1;
    	int32 taskOrder = 2;
    	int32 taskScene = 3;
    	int32 taskStatus = 4;
    	int64 taskTargetAmount = 5;
    	int64 taskFinishedAmount = 6;
    	int64 taskExpireTime = 7;
    	repeated RewardProcess rewards = 8;
    

	}
    message CommonCampaignInfo {
    	string campaignName = 1;
    	int64 expireTime = 3;
    	int32 campaignStatus = 4;
    	repeated CampaignProcess campaignProcess = 5;
    

	}
    message FirstChargeGuideEffectRule {
    	bool enableFirstRechargeGuideEffect = 1;
    	repeated int32 enterRoomShowTime = 2;
    	int32 watchPkShowTime = 3;
    

	}
    message FirstRechargeCampaignV1 {
    	bool isFirstCharge = 1;
    	FirstChargeGuideEffectRule guideEffectRule = 2;
    	Diamond defaultDiamond = 3;
    	int32 firstChargeGiftStyle = 4;
    	ImageModel packageEntranceImage = 5;
    

	}
    message FirstRechargeCampaignV2 {
    	bool isCashFirstCharge = 1;
    	int64 giftId = 2;
    	bool isShowCountdown = 3;
    	int64 expireTime = 4;
    	int32 totalFrozenCoins = 5;
    	int32 remainingFrozenCoins = 6;
    	int32 minimumNumberOfCoinsToUnlockFrozenCoins = 7;
    	int32 frozenCoinsForLargePackages = 8;
    	int32 frozenCoinsForSmallPackages = 9;
    	int32 rechargeCoinsForLargePackages = 10;
    	int32 rechargeCoinsForSmallPackages = 11;
    	bool isFirstActiveConsumption = 12;
    	int64 firstCashRechargeTs = 13;
    

	}
    message Data {
    	int32 campaignType = 1;
    	FirstRechargeCampaignV1 firstRechargeCampaignV1 = 2;
    	FirstRechargeCampaignV2 firstRechargeCampaignV2 = 3;
    	string campaignSchemaUrl = 4;
    	CommonCampaignInfo commonCampaignInfo = 5;
    	int64 serverUnixTime = 6;
    	string campaignFaqUrl = 7;
    

	}

}

message FanTicketRanklistParams {
    int64 roomId = 1;
    int64 guestUserId = 2;
    int64 anchorId = 3;
    int64 channelId = 4;
    string linkmicId = 5;
    int64 showId = 6;
    int64 playId = 7;
    int32 playScene = 8;
    

}

message NoticeboardTemplateUpdateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool isSuccess = 1;
    	NoticeboardTemplate template = 2;
    

	}

}

message StarCommentMessage {
    string starCommentId = 1;
    User user = 2;
    string content = 3;
    int64 duration = 4;
    int64 startTimeMs = 5;
    StarCommentOption commentOption = 6;
    string contentLanguage = 7;
    
    enum StarCommentOption {
    	STAR_COMMENT_OPTION_UNKNOWN = 0;
    	STAR_COMMENT_OPTION_V_1_BASIC = 10;
    	STAR_COMMENT_OPTION_V_1_ELEVATED = 20;
    }

}

message ListUser {
    User user = 1;
    int64 linkmicId = 2;
    LinkmicAudienceType linkmicIdStr = 3;
    LinkmicRoleType linkStatus = 4;
    LinkType linkType = 5;
    int32 userPosition = 6;
    LinkSilenceStatus silenceStatus = 7;
    int64 modifyTime = 8;
    LinkUserType channelId = 9;
    LinkRoleType roleType = 10;
    
    enum LinkType {
    	LINK_TYPE_TYPE_UNKNOWN = 0;
    	LINK_TYPE_TYPE_VIDEO = 1;
    	LINK_TYPE_TYPE_AUDIO = 2;
    	LINK_TYPE_TYPE_VIRTUAL = 3;
    }
    enum LinkListStatus {
    	LINK_LIST_STATUS_STATUS_UN_KOWN = 0;
    	LINK_LIST_STATUS_STATUS_WAITING = 1;
    	LINK_LIST_STATUS_STATUS_LINKED = 2;
    	LINK_LIST_STATUS_STATUS_FINISHED = 3;
    	LINK_LIST_STATUS_STATUS_WAITING_OR_LINKED = 4;
    }
    enum LinkSilenceStatus {
    	LINK_SILENCE_STATUS_STATUS_UN_SILENCE = 0;
    	LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF = 1;
    	LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER = 2;
    }
    enum LinkRoleType {
    	LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UN_KOWN = 0;
    	LINK_ROLE_TYPE_TYPE_LEADER = 1;
    	LINK_ROLE_TYPE_TYPE_PLAYER = 2;
    	LINK_ROLE_TYPE_TYPE_INVITEE = 3;
    	LINK_ROLE_TYPE_TYPE_APP_LIER = 4;
    }
    enum LinkmicAudienceType {
    	LINKMIC_AUDIENCE_TYPE_AUDIENCE_TYPE_UNKNOWN = 0;
    	LINKMIC_AUDIENCE_TYPE_VIDEO = 1;
    	LINKMIC_AUDIENCE_TYPE_AUDIO = 2;
    }
    enum LinkmicRoleType {
    	LINKMIC_ROLE_TYPE_ROLE_TYPE_UN_KOWN = 0;
    	LINKMIC_ROLE_TYPE_LEADER = 1;
    	LINKMIC_ROLE_TYPE_PLAYER = 2;
    	LINKMIC_ROLE_TYPE_INVITEE = 3;
    }
    enum LinkUserType {
    	LINK_USER_TYPE_DEFAULT = 0;
    	LINK_USER_TYPE_KARAOKE = 1;
    }

}

message NoticeboardCreateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool isExists = 1;
    	NoticeboardContent noticeboardContent = 2;
    

	}

}

message LinkerMediaChangeContent {
    GuestMicCameraManageOp op = 1;
    int64 toUserId = 2;
    int64 anchorId = 3;
    int64 roomId = 4;
    GuestMicCameraChangeScene changeScene = 5;
    LinkerMediaChangeOperator operatorInfo = 7;
    
    enum GuestMicCameraManageOp {
    	GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC = 0;
    	GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA = 1;
    	GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC = 2;
    	GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA = 3;
    	GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH = 4;
    }
    enum GuestMicCameraChangeScene {
    	GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN = 0;
    	GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO = 1;
    	GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL = 2;
    	GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END = 3;
    }

}

message LinkerSetting {
    int64 maxMemberLimit = 1;
    int64 linkType = 2;
    Scene scene = 3;
    int64 ownerUid = 4;
    int64 ownerRoomId = 5;
    int32 vendor = 6;
    

}

message PublicAreaCommon {
    ImageModel userLabel = 1;
    int64 userConsumeInRoom = 2;
    

}

message GiftPanelBeaconBubble {
    string lynxUrl = 1;
    string lynxExtra = 2;
    GiftPanelBeaconBubbleType type = 3;
    
    enum GiftPanelBeaconBubbleType {
    	GIFT_PANEL_BEACON_BUBBLE_TYPE_UNKNOWN = 0;
    	GIFT_PANEL_BEACON_BUBBLE_TYPE_DEFAULT = 1;
    	GIFT_PANEL_BEACON_BUBBLE_TYPE_LYNX_DEFAULT = 2;
    	GIFT_PANEL_BEACON_BUBBLE_TYPE_LIVE_GOAL = 3;
    	GIFT_PANEL_BEACON_BUBBLE_TYPE_GIFT_GALLERY = 4;
    	GIFT_PANEL_BEACON_BUBBLE_TYPE_UG_HIGH_PRIORITY = 5;
    	GIFT_PANEL_BEACON_BUBBLE_TYPE_UG_LOW_PRIORITY = 6;
    	GIFT_PANEL_BEACON_BUBBLE_TYPE_VIEWER_PICKS = 7;
    }

}

message QuizStatistics {
    repeated OptionCountItem optionCount = 1;
    
    message OptionCountItem {
    	string optionId = 1;
    	int32 count = 2;
    

	}

}

message GameTaskInfo {
    string taskId = 1;
    int32 status = 2;
    int32 currentValue = 3;
    int32 targetValue = 4;
    GameTaskRewardInfo rewardInfo = 5;
    int32 taskType = 6;
    

}

message RTCExtraInfo {
    RTCEngineConfig config = 1;
    repeated RTCLiveVideoParam rtcVideoParam = 2;
    RTCBitRateMap rtcBitRateMap = 3;
    int32 rtcFps = 4;
    RTCMixBase rtcMixBase = 5;
    ByteRTCExtInfo byteRtcExtInfo = 6;
    RTCInfoExtra rtcInfoExtra = 7;
    string rtcBusinessId = 8;
    RTCOther rtcOther = 9;
    int32 interactClientType = 10;
    

}

message WebcastGiftGalleryMessage {
    CommonMessageData baseMessage = 1;
    GiftInfo giftInfo = 2;
    User user = 3;
    User toUser = 4;
    GiftGalleryMsgType msgType = 5;
    bool allSponsored = 21;
    GiftIMPriority priority = 51;
    string logId = 52;
    
    enum GiftGalleryMsgType {
    	GIFT_GALLERY_MSG_TYPE_UNUSED = 0;
    	GIFT_GALLERY_MSG_TYPE_LIGHT_UP = 1;
    	GIFT_GALLERY_MSG_TYPE_ALL_SPONSORED = 2;
    	GIFT_GALLERY_MSG_TYPE_SPONSOR_CHANGE = 3;
    	GIFT_GALLERY_MSG_TYPE_LONG_TERM_RECALL = 4;
    }
    message GiftInfo {
    	int64 lightedUpGiftId = 1;
    	bool highValue = 2;
    	Gift gift = 3;
    	string unlightedGiftIcon = 4;
    

	}

}

message MultiLangContent {
    string language = 1;
    string content = 2;
    

}

message GuestClientList {
    int64 uid = 1;
    string linkMicId = 2;
    int32 status = 3;
    int32 source = 4;
    int32 rtcStatus = 5;
    

}

message WebcastGiftUpdateMessage {
    CommonMessageData baseMessage = 1;
    int32 updateType = 2;
    

}

message LinkListChangeContent {
    int32 listChangeType = 1;
    AllListUser userList = 2;
    repeated string linkedUserUiPositions = 3;
    repeated ContentPosition contentPos = 4;
    

}

message MigrateGroupReq {
    LinkCommon common = 1;
    GroupPlayer myself = 2;
    int64 sourceGroupChannelId = 3;
    int64 targetGroupChannelId = 4;
    

}

message WebcastNoticeboardMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    NoticeboardContent noticeboardContent = 3;
    LinkerMediaChangeOperator operatorUserInfo = 4;
    

}

message LeaveContent {
    Player leftUser = 1;
    int64 leaveReason = 2;
    repeated string linkedUserUiPositions = 3;
    repeated PosIdentity uiPos = 4;
    

}

message WebcastRoomEventMessage {
    CommonMessageData baseMessage = 1;
    int64 eventId = 2;
    string title = 3;
    int64 startTime = 4;
    string posX = 5;
    string posY = 6;
    int64 subscribedCount = 7;
    int32 configOpt = 8;
    repeated EventUserInfo eventUserInfo = 9;
    

}

message GiveawayInfo {
    User winner = 1;
    Product product = 2;
    

}

message WebcastUpgradeMessage {
    CommonMessageData baseMessage = 1;
    Text text = 2;
    

}

message WalletLiveRewardsRatioImMsg {
    int32 msgType = 1;
    WalletLiveRewardsRatioImMsgNotification notificationData = 2;
    

}

message WebcastBackpackMessage {
    CommonMessageData baseMessage = 1;
    int32 changeType = 2;
    int32 action = 3;
    int32 itemType = 4;
    int64 itemId = 5;
    

}

message BarrageTypeFansLevelParam {
    int32 currentGrade = 1;
    int32 displayConfig = 2;
    User user = 4;
    

}

message WebcastAvatarStyleResultMessage {
    CommonMessageData baseMessage = 1;
    int32 status = 2;
    string statusMessage = 3;
    ImageModel image = 4;
    int64 styleId = 5;
    string originImageUri = 6;
    int64 taskId = 7;
    

}

message UpdateRoomLayoutSettings {
    string rtcExtInfo = 1;
    

}

message GameGuessRecommendCreateSwitch {
    bool enable = 1;
    

}

message KickOutAllGuestsParam {
    LinkCommon common = 1;
    Player myself = 2;
    int64 channelId = 3;
    int64 reason = 4;
    

}

message GiftConfigs {
    repeated GiftConfigInfo configInfos = 1;
    

}

message WebcastGameSettingChangeMessage {
    CommonMessageData baseMessage = 1;
    map<int64, UserSetting> currentUserSetting = 2;
    

}

message WebcastPartnershipDropsUpdateMessage {
    CommonMessageData baseMessage = 1;
    ChangeMode changeMode = 2;
    string dropsId = 3;
    string taskId = 4;
    string eventId = 5;
    int64 anchorUid = 6;
    
    enum ChangeMode {
    	CHANGE_MODE_SHOW = 0;
    	CHANGE_MODE_UPDATE = 1;
    	CHANGE_MODE_CLOSE = 2;
    }

}

message BattleNoticeAnchorGuide {
    BattleNoticeText content = 1;
    BattleNoticeText buttonContent = 2;
    

}

message RTCEngineConfig {
    string rtcAppId = 1;
    string rtcUserId = 2;
    string rtcToken = 3;
    int64 rtcChannelId = 4;
    

}

message PermitBizContent {
    MultiLiveAnchorPanelSettings multiLiveAnchorPanelSettings = 1;
    int64 expireTime = 2;
    User operatorUserInfo = 3;
    LinkMicUserAdminType operatorLinkAdminType = 4;
    LinkUserType linkUserType = 5;
    
    enum LinkMicUserAdminType {
    	LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0;
    	LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1;
    	LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2;
    }
    enum LinkUserType {
    	LINK_USER_TYPE_DEFAULT = 0;
    	LINK_USER_TYPE_KARAOKE = 1;
    }

}

message AnchorGrowLevelTriggerInfo {
    bool isGrowLevelAnchor = 1;
    GrowthJourneyBannerInfo growthJourneyBannerInfo = 2;
    int64 growthStage = 3;
    string growthInstanceStrategy = 4;
    

}

message GetStateResp {
    int64 version = 1;
    int64 channelId = 2;
    LayoutState layout = 3;
    repeated LinkUserState states = 4;
    BackGroundImageState backGroundImage = 5;
    WallpaperImageState wallpaperImage = 6;
    repeated PosIdentity uiPos = 7;
    

}

message PreviewCommentItem {
    int64 id = 1;
    string content = 2;
    int32 itemType = 3;
    

}

message CompetitionInfoResponse {
    CompetitionInfo data = 1;
    

}

message SubGoalContribution {
    string id = 1;
    int64 contributionCount = 2;
    

}

message WebcastQuestionSwitchMessage {
    CommonMessageData baseMessage = 1;
    bool on = 2;
    

}

message BattleNoticeRuleGuide {
    BattleNoticeText content = 1;
    BattleNoticeText buttonContent = 2;
    string ruleUrl = 3;
    bool exceptAnchor = 4;
    Text contentText = 5;
    Text buttonContentText = 6;
    

}

message WebcastLiveInfoAuditNoticeMessage {
    CommonMessageData baseMessage = 1;
    LiveInfoAuditContentType auditContentType = 2;
    LiveInfoAuditStatus auditStatus = 3;
    string textStarlingKey = 4;
    
    enum LiveInfoAuditContentType {
    	LIVE_INFO_AUDIT_CONTENT_TYPE_TITLE = 0;
    	LIVE_INFO_AUDIT_CONTENT_TYPE_COVER = 1;
    	LIVE_INFO_AUDIT_CONTENT_TYPE_ABOUT_ME = 2;
    }
    enum LiveInfoAuditStatus {
    	LIVE_INFO_AUDIT_STATUS_ONGOING = 0;
    	LIVE_INFO_AUDIT_STATUS_PASS = 1;
    	LIVE_INFO_AUDIT_STATUS_UNKNOWN = 2;
    	LIVE_INFO_AUDIT_STATUS_REJECT = 3;
    }

}

message BcToggleInfo {
    int32 status = 1;
    string toggleText = 2;
    int32 showInterval = 3;
    

}

message GiftTrayInfo {
    ImageModel mDynamicImg = 1;
    bool canMirror = 2;
    ImageModel trayNormalBgImg = 3;
    repeated string trayNormalBgColor = 4;
    ImageModel traySmallBgImg = 5;
    repeated string traySmallBgColor = 6;
    Text rightTagText = 7;
    ImageModel rightTagBgImg = 8;
    repeated string rightTagBgColor = 9;
    string trayNameTextColor = 10;
    string trayDescTextColor = 11;
    string rightTagJumpSchema = 12;
    

}

message LinkmicUserToastContent {
    int64 userId = 1;
    int64 roomId = 2;
    Text displayText = 3;
    int64 leavedUserId = 4;
    

}

message FollowInfo {
    int64 followingCount = 1;
    int64 followerCount = 2;
    int64 followStatus = 3;
    int64 pushStatus = 4;
    

}

message ToolBarManagement {
    repeated int32 mergingmorepriority = 1;
    

}

message BattleNoticeBubbleGuide {
    BattleNoticeText content = 1;
    

}

message JoinDirectResp {
    RTCExtraInfo rtcInfo = 2;
    string selfLinkMicId = 3;
    MicPositionData position = 4;
    AllListUser allUsers = 5;
    BizJoinDirectResponse multiGuestRespExtra = 9527;
    

}

message GetUserPlaySettingsResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	map<string, int64> settingsMap = 1;
    

	}

}

message LinkerEnlargeStatusSynContent {
    int32 isEnlarge = 1;
    string enlargeLinkmicId = 2;
    EnlargeScreenScene scene = 3;
    string targetLinkmicId = 4;
    LinkerMediaChangeOperator operatorInfo = 5;
    string layoutId = 6;
    repeated string linkedUserUiPositions = 7;
    
    enum EnlargeScreenScene {
    	ENLARGE_SCREEN_SCENE_ENLARGE_UNKNOWN = 0;
    	ENLARGE_SCREEN_SCENE_ENLARGE_HOST_SCREEN = 1;
    	ENLARGE_SCREEN_SCENE_INVITE_ENLARGE_GUEST_SCREEN = 2;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_HOST = 3;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_GUEST = 4;
    	ENLARGE_SCREEN_SCENE_HOST_RECEIVE_CANCEL_ENLARGE = 5;
    	ENLARGE_SCREEN_SCENE_GET_ENLARGE_STATUS = 6;
    	ENLARGE_SCREEN_SCENE_ENLARGE_POSITION = 7;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_POSITION = 8;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_ALL = 9;
    	ENLARGE_SCREEN_SCENE_CHANGE_ENLARGE_RECORD = 10;
    }

}

message WebcastLinkMicBattleVictoryLap {
    CommonMessageData baseMessage = 1;
    int32 playType = 2;
    BattleTruthOrDareTriggerGuide battleTruthOrDareTriggerGuide = 3;
    BattleTruthOrDareTips playTips = 4;
    BattleTruthOrDareOptOutNotice truthOrDareCloseNotice = 5;
    BattleTruthOrDareTriggerGuideV2 triggerGuideV2 = 6;
    string anchorRegion = 10;
    int64 battleId = 11;
    

}

message JoinChannelResp {
    LinkLayerListUser linkLayerListUser = 2;
    BizJoinChannelResponse multiGuestRespExtra = 9527;
    

}

message RoomAuthMessage {
    RoomAuthMessageGoldenEnvelope goldenEnvelope = 1;
    PromoteOtherMessage promoteOtherMessage = 2;
    

}

message RoomBasedGiftData {
    map<int64, RoomBasedGifts> roomBasedGifts = 2;
    
    message GiftInfo {
    	int64 id = 1;
    	int64 price = 2;
    

	}
    message RoomBasedGifts {
    	repeated GiftInfo giftInfo = 1;
    

	}

}

message LinkerCreateContent {
    int64 ownerId = 1;
    int64 ownerRoomId = 2;
    int64 linkType = 3;
    

}

message PaidEvent {
    int64 eventId = 1;
    PaidType paidType = 2;
    
    enum PaidType {
    	PAID_TYPE_FREE = 0;
    	PAID_TYPE_PAID = 1;
    }

}

message BattleDisplayConfig {
    int32 threshold = 1;
    string text = 2;
    int32 diffThreshold = 3;
    string diffText = 4;
    ExemptStrategy exemptStrategy = 5;
    

}

message QuizQuestionInfo {
    MessageType messageType = 1;
    string quizId = 2;
    int32 quizType = 3;
    string extra = 4;
    int32 participantsCount = 5;
    string questionId = 6;
    int32 questionNo = 7;
    int32 questionCount = 8;
    int32 questionType = 9;
    string title = 10;
    repeated QuizImage image = 11;
    repeated QuizQuestionOption options = 12;
    string rewardAmount = 15;
    int32 questionDurationMs = 16;
    repeated QuizNextQuiz nextQuiz = 17;
    string sponsorCode = 18;
    int32 displayDurationMs = 19;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;
    

}

message QuizCallUpWebview {
    MessageType messageType = 1;
    string quizId = 2;
    int32 quizType = 3;
    string extra = 4;
    int32 userDataVersion = 5;
    string sponsorCode = 6;
    int32 displayDurationMs = 7;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;
    

}

message GiftActivityCreator {
    string areaSchema = 1;
    int64 startTime = 2;
    int64 endTime = 3;
    string title = 4;
    string subTitle = 5;
    string backgroundColor = 6;
    ImageModel background = 7;
    repeated int64 giftIds = 8;
    string targetSchema = 9;
    int64 eventId = 10;
    string eventName = 11;
    string entranceName = 12;
    int64 height = 13;
    ImageModel backgroundRtl = 14;
    map<int64, GiftPanelCardletByCreator> overrideGiftCardlets = 16;
    int32 bannerType = 17;
    string extra = 18;
    

}

message AgeRestrictedConfig {
    bool show = 1;
    bool disabled = 2;
    string disabledReason = 3;
    bool open = 4;
    

}

message MemberInfo {
    int64 userId = 1;
    bool isStaged = 2;
    string nickname = 3;
    ImageModel avatar = 4;
    

}

message HighlightFragmentInfo {
    repeated LiveFragmentDetail fragmentList = 1;
    

}

message GiftInfoInBox {
    int64 giftId = 1;
    int64 effectId = 2;
    int64 colorId = 3;
    int32 remainTimes = 4;
    AssetsModel asset = 5;
    

}

message PollConf {
    PollCountLimit giftPollLimit = 1;
    bool useNewGiftPoll = 2;
    int64 pollTemplateOptimizeGroup = 3;
    

}

message RTCLiveVideoParam {
    int32 strategyId = 1;
    RTCVideoParam serverDefineParam = 2;
    

}

message HeatUpdateContent {
    int64 channelId = 1;
    int64 fromUserId = 2;
    int64 updatedHeat = 3;
    int32 updateSource = 4;
    

}

message MGetABInfosReq {
    repeated string cdidList = 1;
    int64 linkmicScene = 2;
    

}

message CohostABTest {
    CohostABTestType abTestType = 1;
    int64 group = 2;
    
    enum CohostABTestType {
    	COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN = 0;
    	COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY = 1;
    	COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION = 2;
    	COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH = 3;
    	COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT = 4;
    }

}

message RealtimeLiveCenterShopData {
    bool showShopData = 1;
    string revenueAmount = 2;
    int64 unitSales = 3;
    int64 buyers = 6;
    

}

message CountdownStartResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool countdownExists = 1;
    	CountdownContent countdownContent = 2;
    

	}

}

message IntroConflictInfo {
    string content = 1;
    

}

message WebcastCommonToastMessage {
    CommonMessageData baseMessage = 1;
    bool discardable = 2;
    bool immediate = 3;
    int32 duration = 4;
    string textColor = 5;
    string backgroundColorStart = 6;
    string backgroundColorEnd = 7;
    int32 position = 8;
    ImageModel topImage = 9;
    int32 imageWidth = 10;
    int32 imageHeight = 11;
    bool showMongoliaLayer = 12;
    

}

message GiftMonitorInfo {
    int64 anchor_id = 1;
    int64 profit_api_message_dur = 2;
    int64 send_gift_profit_api_start_ms = 3;
    int64 send_gift_profit_core_start_ms = 4;
    int64 send_gift_req_start_ms = 5;
    int64 send_gift_send_message_success_ms = 6;
    int64 send_profit_api_dur = 7;
    int64 to_user_id = 8;
    int64 sendGiftStartClientLocalMs = 9;
    string fromPlatform = 10;
    string fromVersion = 11;
    

}

message PlayTogetherMember {
    string userId = 1;
    string avatar = 2;
    string nickName = 3;
    string applyMessage = 4;
    int64 applyTime = 5;
    int64 acceptTime = 6;
    string relationTag = 7;
    PlayTogetherRelationTag relationTagEnum = 8;
    
    enum PlayTogetherRelationTag {
    	PLAY_TOGETHER_RELATION_TAG_UNKNOWN = 0;
    	PLAY_TOGETHER_RELATION_TAG_FRIEND = 1;
    	PLAY_TOGETHER_RELATION_TAG_SUBSCRIBER = 2;
    	PLAY_TOGETHER_RELATION_TAG_TEAM_MEMBER = 3;
    }

}

message LinkUserState {
    Player user = 1;
    string linkmicId = 2;
    MicPositionData pos = 3;
    int64 linkedTimeNano = 4;
    OnlineUserState onlineUserState = 5;
    MediaState audioMuted = 6;
    MediaState videoMuted = 7;
    RtcConnectionState rtcConnection = 8;
    NetworkState networkState = 9;
    AvatarState avatar = 10;
    
    enum OnlineUserState {
    	ONLINE_USER_STATE_STATE_UNDEFINED = 0;
    	ONLINE_USER_STATE_STATE_NORMAL = 1;
    	ONLINE_USER_STATE_STATE_PAUSED = 2;
    }
    enum RtcConnectionState {
    	RTC_CONNECTION_STATE_STATE_RT_C_UNDEFINED = 0;
    	RTC_CONNECTION_STATE_STATE_RT_C_NORMAL = 1;
    	RTC_CONNECTION_STATE_STATE_RT_C_DISCONNECT = 2;
    }
    enum MediaState {
    	MEDIA_STATE_MEDIA_UNDEFINED = 0;
    	MEDIA_STATE_MEDIA_NORMAL = 1;
    	MEDIA_STATE_MEDIA_MUTED = 2;
    	MEDIA_STATE_MEDIA_UN_MUTE_OCCUPIED = 3;
    	MEDIA_STATE_MEDIA_MUTED_OCCUPIED = 4;
    }
    enum NetworkState {
    	NETWORK_STATE_STATE_NETWORK_UNDEFINED = 0;
    	NETWORK_STATE_STATE_NETWORK_EXCELLENT = 1;
    	NETWORK_STATE_STATE_NETWORK_GOOD = 2;
    	NETWORK_STATE_STATE_NETWORK_POOR = 3;
    	NETWORK_STATE_STATE_NETWORK_BAD = 4;
    	NETWORK_STATE_STATE_NETWORK_V_BAD = 5;
    	NETWORK_STATE_STATE_NETWORK_DOWN = 6;
    }

}

message PermitJoinGroupResp {
    LinkMicCommonResp commonResp = 1;
    repeated RTCExtraInfo groupRtcInfo = 2;
    GroupChannelAllUser groupUser = 3;
    repeated string linkedUserUiPositions = 4;
    BizPermitJoinGroupResponse cohostRespExtra = 9527;
    

}

message ApplyBizContent {
    User user = 1;
    

}

message InviteContent {
    Player inviter = 1;
    RTCExtraInfo inviteeRTCInfo = 2;
    string inviterLinkMicId = 3;
    string inviteeLinkMicId = 4;
    bool isOwner = 5;
    MicPositionData positionData = 6;
    DSLConfig dsl = 7;
    Player invitee = 8;
    Player operator = 9;
    

}

message GoLiveECIconInfo {
    bool hasEcLivePermission = 1;
    bool isOldRedDotLogic = 2;
    bool displayEcIcon = 3;
    bool displayRedDot = 4;
    bool independentDisplayEcIcon = 5;
    string bubbleText = 6;
    BubbleMetadata bubbleMetadata = 7;
    

}

message GeckoAttr {
    string geckoChannel = 1;
    string fileName = 2;
    

}

message WebcastToastMessage {
    CommonMessageData baseMessage = 1;
    int64 displayDuration = 2;
    int64 delayDuration = 3;
    Scene scene = 4;
    

}

message PopupStateChangeContent {
    repeated JoinGroupMessageExtra.RivalExtra otherUsers = 2;
    

}

message WebcastDonationStickerModifyMethod {
    CommonMessageData baseMessage = 1;
    repeated DonationSticker decorationList = 2;
    

}

message LinkerCancelContent {
    int64 inviterUid = 1;
    int64 inviteeUid = 2;
    int32 cancelType = 3;
    

}

message GameLiveConvertInfo {
    int32 convertType = 1;
    int32 acuType = 2;
    string title = 3;
    string text = 4;
    

}

message WebcastRoomMessage {
    CommonMessageData baseMessage = 1;
    string content = 2;
    bool supprotLandscape = 3;
    int32 source = 4;
    ImageModel icon = 5;
    Scene scene = 6;
    bool isWelcome = 7;
    PublicAreaMessageCommon publicAreaCommon = 8;
    int64 showDurationMs = 9;
    string subScene = 10;
    

}

message PrivilegePrompt {
    string text = 1;
    map<string, PrivilegePlaceholder> placeholderMap = 2;
    

}

message KickOutContent {
    Player leftUser = 1;
    KickoutReason kickOutReason = 2;
    repeated string linkedUserUiPositions = 3;
    repeated PosIdentity uiPos = 4;
    
    enum KickoutReason {
    	KICKOUT_REASON_KICK_OUT_REASON_UNKNOWN = 0;
    	KICKOUT_REASON_KICK_OUT_REASON_FIRST_FRAME_TIME_OUT = 1;
    	KICKOUT_REASON_KICK_OUT_REASON_BY_HOST = 2;
    	KICKOUT_REASON_KICK_OUT_REASON_RT_C_LOST_CONNECTION = 3;
    	KICKOUT_REASON_KICK_OUT_REASON_BY_PUNISH = 4;
    	KICKOUT_REASON_KICK_OUT_REASON_BY_ADMIN = 5;
    	KICKOUT_REASON_KICK_OUT_REASON_HOST_REMOVE_ALL_GUESTS = 6;
    }

}

message WebcastPollMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    int64 pollId = 3;
    PollStartContent startContent = 4;
    PollEndContent endContent = 5;
    PollUpdateVotesContent updateContent = 6;
    PollKind pollKind = 7;
    PollBasicInfo pollBasicInfo = 8;
    TemplateContent templateContent = 9;
    
    enum PollKind {
    	POLL_KIND_NORMAL = 0;
    	POLL_KIND_GIFT = 1;
    	POLL_KIND_CUSTOMIZABLE = 2;
    	POLL_KIND_CUSTOMIZABLE_GIFT = 3;
    	POLL_KIND_QUICK_GIFT = 4;
    	POLL_KIND_EMOTE = 5;
    }

}

message WebcastHighlightFragementReady {
    CommonMessageData baseMessage = 1;
    GameLiveFragment gameLiveFragment = 2;
    

}

message GuestShowdownFinishToPunishmentParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 playId = 3;
    

}

message GetShowContentParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 showId = 3;
    

}

message GuessRound {
    GuessText title = 1;
    string roundIdStr = 2;
    repeated GuessOptions guessOptions = 3;
    string winOption = 4;
    int64 startTime = 5;
    int64 endTime = 6;
    GuessStatus guessStatus = 7;
    string roomIdStr = 8;
    int64 liveId = 9;
    GuessRoundStats guessRoundStats = 10;
    string correctedOption = 11;
    string anchorId = 12;
    string creatorId = 13;
    string operatorId = 14;
    string operatorName = 15;
    int64 settleFinishTime = 16;
    bool isAutoPin = 17;
    int64 serverTime = 100;
    
    enum GuessStatus {
    	GUESS_STATUS_BETTING = 0;
    	GUESS_STATUS_STOP_BETTING = 1;
    	GUESS_STATUS_SETTLING = 2;
    	GUESS_STATUS_SETTLED = 3;
    	GUESS_STATUS_INVALID = 20;
    }

}

message CountdownGetContentParams {
    int64 roomId = 1;
    int64 channelId = 2;
    repeated int64 countdownIds = 3;
    

}

message FollowGuideResponse {
    ResponseData data = 1;
    Extra extra = 2;
    
    message ResponseData {
    	bool isDisplay = 1;
    	repeated int64 displayList = 2;
    

	}
    message Extra {
    	int64 now = 1;
    

	}

}

message AnchorSettingsResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	RoomBasicSettings settings = 1;
    	UserStats userStats = 3;
    

	}

}

message BadgeText {
    string key = 1;
    string defaultPattern = 2;
    repeated string pieces = 3;
    

}

message CommercialContentToggle {
    bool openCommercialContentToggle = 1;
    bool promoteMyself = 2;
    bool promoteThirdParty = 3;
    

}

message RegionalRestricted {
    repeated string blockList = 1;
    

}

message QueueInfo {
    string queueId = 1;
    int32 status = 2;
    string queueTitle = 3;
    int64 memberCount = 4;
    string currentUserId = 5;
    int32 joinStatus = 6;
    

}

message GuestShowdownCloseResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	GuestShowdownContent playContent = 2;
    

	}

}

message WebcastGiftPromptMessage {
    CommonMessageData baseMessage = 1;
    string title = 2;
    string body = 3;
    int32 blockNumDays = 4;
    string orderId = 5;
    int64 orderTimestamp = 6;
    

}

message TopicSetContent {
    int32 action = 1;
    int64 channelId = 2;
    int64 setUserId = 3;
    int64 setSuccTime = 4;
    int32 enterScene = 5;
    

}

message ApplyRequestResponse {
    RTCExtraInfo rtcInfo = 2;
    string applicantLinkMicId = 3;
    BizApplyResponse multiGuestRespExtra = 9527;
    

}

message AssetsModel {
    string name = 1;
    string resourceUri = 2;
    ResourceModel resourceModel = 4;
    string describe = 5;
    int64 id = 6;
    int32 resourceType = 7;
    string md5 = 8;
    int64 size = 9;
    LokiExtraContent lokiExtraContent = 10;
    int32 downloadType = 26;
    ResourceModel resourceByteVC1Model = 28;
    string bytevc1Md5 = 29;
    repeated VideoResource videoResourceList = 30;
    FaceRecognitionMeta faceRecognitionArchiveMeta = 31;
    string lynxUrlSettingsKey = 32;
    int32 downgradeResourceType = 33;
    AssetExtra assetExtra = 34;
    int32 stickerAssetVariant = 35;
    bool immediateDownload = 36;
    int32 stickerAssetVariantReason = 37;
    

}

message LinkerKickOutContent {
    int64 fromUid = 1;
    KickoutReason kickOutReason = 2;
    
    enum KickoutReason {
    	KICKOUT_REASON_KICK_OUT_REASON_UNKNOWN = 0;
    	KICKOUT_REASON_KICK_OUT_REASON_FIRST_FRAME_TIME_OUT = 1;
    	KICKOUT_REASON_KICK_OUT_REASON_BY_HOST = 2;
    	KICKOUT_REASON_KICK_OUT_REASON_RT_C_LOST_CONNECTION = 3;
    	KICKOUT_REASON_KICK_OUT_REASON_BY_PUNISH = 4;
    	KICKOUT_REASON_KICK_OUT_REASON_BY_ADMIN = 5;
    	KICKOUT_REASON_KICK_OUT_REASON_HOST_REMOVE_ALL_GUESTS = 6;
    }

}

message UserPlayInfo {
    int64 playId = 1;
    PlayScene playScene = 2;
    int64 score = 3;
    int32 rank = 4;
    int64 targetScore = 5;
    PlayUserTag userTag = 6;
    
    enum PlayScene {
    	PLAY_SCENE_UNKNOWN = 0;
    	PLAY_SCENE_COUNTDOWN_FOR_ALL = 1;
    	PLAY_SCENE_COUNTDOWN_FOR_SINGLE = 2;
    	PLAY_SCENE_LIVE_SHOW = 3;
    	PLAY_SCENE_AIG_C = 4;
    	PLAY_SCENE_KARAOKE = 5;
    	PLAY_SCENE_DRAW_GUESS = 6;
    	PLAY_SCENE_ENLARGE_GRID = 7;
    	PLAY_SCENE_GIFT_PRIORITY_LINK = 8;
    	PLAY_SCENE_GIFT_THRESHOLD_LINK = 9;
    	PLAY_SCENE_NOTICE_BOARD = 10;
    	PLAY_SCENE_PLAY_BOOK = 11;
    	PLAY_SCENE_GUEST_SHOWDOWN = 12;
    }
    enum PlayUserTag {
    	PLAY_USER_TAG_UNKNOWN = 0;
    	PLAY_USER_TAG_GUEST_SHOWDOWN_NORMAL = 1;
    	PLAY_USER_TAG_GUEST_SHOWDOWN_WINNER = 2;
    	PLAY_USER_TAG_GUEST_SHOWDOWN_LOSER = 3;
    }

}

message ToplivePageItem {
    string itemId = 1;
    string itemName = 2;
    repeated ToplivePageItem subItems = 3;
    Room room = 10;
    string enterMethod = 11;
    int32 relatedLiveNumber = 12;
    string defaultBgUrl = 13;
    string lightBgUrl = 14;
    string darkBgUrl = 15;
    string defaultBgColor = 16;
    string cardTitle = 17;
    string cardType = 18;
    int32 matchDegree = 19;
    string lightBgColor = 20;
    string darkBgColor = 21;
    

}

message GraceInfo {
    bool isInGracePeriod = 1;
    int64 graceEndTime = 2;
    bool isPackageDeleted = 3;
    

}

message PopProduct {
    string title = 1;
    string price = 2;
    string imageUrl = 3;
    string openUrl = 4;
    string productType = 5;
    int64 productId = 6;
    string source = 7;
    int32 sourceFrom = 8;
    string schema = 9;
    int32 platform = 10;
    int32 productStatus = 11;
    

}

message GetShowSettingsResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	ShowConfig showSettings = 1;
    

	}

}

message CompetitionContributorListResponse {
    ResponseData data = 1;
    
    message AnchorInfo {
    	int64 userId = 1;
    	int64 score = 2;
    	string formattedScore = 3;
    

	}
    message UserInfo {
    	User user = 1;
    	int64 score = 2;
    	string formattedScore = 3;
    

	}
    message ResponseData {
    	repeated UserInfo users = 1;
    	AnchorInfo anchorInfo = 2;
    

	}

}

message TaxonomyTagInfo {
    repeated string level1Tag = 1;
    string level2Tag = 2;
    

}

message VoteUser {
    int64 userId = 1;
    string nickName = 2;
    ImageModel avatarThumb = 3;
    int64 voteCount = 4;
    

}

message BarrageTypeUserGradeParam {
    int32 currentGrade = 1;
    int32 displayConfig = 2;
    string userId = 3;
    User user = 4;
    

}

message UnifyBaseActionData {
    int32 unifyBaseId = 1;
    string name = 2;
    string businessId = 3;
    int32 action = 4;
    

}

message LiveGiftBoostCardRoomStatus {
    bool mIsBoosting = 1;
    int64 mExpiredTime = 2;
    int64 mCardId = 3;
    string mCardIdStr = 4;
    string mTaskId = 5;
    int64 mTaskSource = 6;
    string mImagePath = 7;
    

}

message AnchorPair {
    int64 sourceAnchorId = 1;
    int64 targetAnchorId = 2;
    

}

message BattleOptPair {
    OptPairInfo optPairInfo = 1;
    repeated Room selfTeamRoomList = 2;
    repeated Room rivalTeamRoomList = 3;
    int32 playType = 4;
    int32 inviteBlockReason = 5;
    map<int64, bool> isInLinkmic = 6;
    repeated int64 requestRoomList = 7;
    

}

message LinkmicAudienceInviteGroupChatMemberGuide {
    repeated int64 groupMemberUserIds = 3;
    

}

message TeamUser {
    int64 teamId = 1;
    repeated int64 userIds = 2;
    

}

message MultiLiveContent {
    ApplyBizContent applyIMContent = 1;
    InviteBizContent inviteIMContent = 2;
    ReplyBizContent replyIMContent = 3;
    PermitBizContent permitIMContent = 4;
    JoinDirectBizContent joinDirectIMContent = 5;
    KickOutBizContent kickOutBizContent = 6;
    

}

message ContentDisclosureSettings {
    int32 openCommercialContentToggle = 1;
    int32 promoteMyself = 2;
    int32 promoteThirdParty = 3;
    

}

message WebcastForceFetchRecommendationsMessage {
    CommonMessageData baseMessage = 1;
    repeated int64 reasons = 10;
    int64 fetchWithinMs = 11;
    string strategyContext = 100;
    

}

message AboutMe {
    string id = 1;
    AuditStatus auditStatus = 2;
    bool switchStatus = 3;
    User user = 4;
    ImageModel image = 5;
    repeated AboutMeTemplate templateList = 6;
    string currentTemplateId = 7;
    AuditInfo auditInfo = 8;
    
    message AuditInfo {
    	int64 violationId = 1;
    	int64 taskType = 2;
    

	}

}

message FeedItem {
    int32 type = 1;
    string resId = 2;
    FeedBannerContainer bannerContainer = 6;
    bool isRecommendCard = 9;
    string liveReason = 13;
    string debugInfo = 16;
    FlareInfo flareInfo = 17;
    int32 anchorRelationType = 18;
    bool isFresh = 19;
    string drawerGameTag = 20;
    EventStruct liveEvent = 21;
    string unfollowWatchTypeName = 22;
    SortStatsTags sortStatsTags = 23;
    string roomEventTracking = 24;
    string enterMethod = 25;
    

}

message WebcastGameGuessPinCardMessage {
    CommonMessageData baseMessage = 1;
    PinCardView view = 2;
    

}

message DynamicRestriction {
    SceneRestriction scenes = 1;
    repeated ReceiverRestriction receivers = 2;
    

}

message PlaybookEditorInfo {
    string editorType = 1;
    int64 version = 2;
    

}

message BizApplyResponseData {
    int64 linkTypePermission = 1;
    WebcastPerceptionMessage perceptionInfo = 2;
    WebcastPerceptionMessage hostPerceptionInfo = 3;
    

}

message BattleTriggerGuideResponse {
    ResponseData data = 1;
    
    message ResponseData {
    

	}

}

message WebcastLinkLayoutMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    int64 roomId = 3;
    int64 channelId = 4;
    string layoutId = 5;
    int32 maxPosition = 6;
    LinkerMediaChangeOperator operatorUserInfo = 7;
    

}

message LinkerAcceptNoticeContent {
    int64 fromUserId = 1;
    int64 fromRoomId = 2;
    int64 toUserId = 3;
    

}

message WebcastGameOCRPingMessage {
    CommonMessageData baseMessage = 1;
    int64 pingValue = 2;
    bool isGame = 3;
    string gameFusionLabel = 4;
    int64 pingTimestamp = 5;
    double confidence = 6;
    

}

message SpecialEffectCardInfo {
    string cardNameKey = 1;
    ImageModel cardImage = 2;
    int64 sendTimeSec = 3;
    BattleUserInfo sendUser = 4;
    int64 effectLastDuration = 5;
    string ruleUrl = 6;
    int64 effectTimeSec = 7;
    int64 toAnchorId = 8;
    string toAnchorIdStr = 9;
    

}

message MsgNotifyComponentAvoidRuleV2 {
    int32 componentType = 1;
    int32 subComponentType = 2;
    bool canBeInterrupt = 3;
    MsgNotifyComponentRecoverInfo firstRecoverInfo = 4;
    MsgNotifyComponentRecoverInfo interruptRecoverInfo = 5;
    int32 maxActiveCount = 6;
    int64 priority = 7;
    repeated string avoidScene = 8;
    int64 recoverThresholdMs = 9;
    int64 maxRecoverRemainMs = 10;
    

}

message WallpaperContent {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 wallpaperId = 3;
    int32 status = 4;
    int64 sendTimestamp = 5;
    int64 playUserId = 6;
    string wallpaperUrl = 7;
    repeated WallpaperContext finishedUserList = 8;
    repeated WallpaperContext playUserList = 9;
    

}

message WebcastAnchorGrowLevelMessage {
    CommonMessageData baseMessage = 1;
    AnchorGrowLevelImMsg anchorGrowLevelImMsg = 2;
    AnchorGrowLevelImMsgV2 anchorGrowLevelImMsgV2 = 3;
    

}

message RefreshLiveBagInfo {
    repeated int32 refreshLiveBagTypes = 1;
    

}

message FirstChargeGuideEffectRule {
    bool guideEffectRule = 1;
    repeated int32 enterRoomShowTime = 2;
    int32 pkRoomShowTime = 3;
    

}

message RoomBasicSettings {
    CommentSwitchSettings commentSwitchSettings = 1;
    ContentDisclosureSettings contentDisclosureSettings = 2;
    AgeRestrictionSettings ageRestrictionSettings = 3;
    

}

message BattleBaseUserInfo {
    int64 userId = 1;
    string nickName = 2;
    ImageModel avatarThumb = 3;
    string displayId = 4;
    

}

message LinkerReplyContent {
    int64 inviterUid = 1;
    int64 inviterRoomId = 2;
    LinkmicInfo inviterLinkmicInfo = 3;
    int64 inviteeUid = 4;
    LinkmicInfo inviteeLinkmicInfo = 5;
    int64 linkType = 6;
    ReplyStatus replyStatus = 7;
    LinkerSetting linkerSetting = 8;
    User inviterUser = 9;
    User inviteeUser = 10;
    map<int64, string> rtcExtInfoMap = 11;
    LinkerMicIdxUpdateInfo inviteeMicIdxUpdateInfo = 12;
    map<int64, int64> applierMicIdxInfoMap = 13;
    LinkmicMultiLiveEnum multiLiveLayoutEnable = 14;
    MultiLiveAnchorPanelSettings multiLiveSetting = 15;
    int64 actionId = 16;
    repeated LinkmicUserInfo linkedUsers = 17;
    int64 sourceType = 18;
    
    enum LinkmicMultiLiveEnum {
    	LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0;
    	LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1;
    }

}

message CountdownForAllUser {
    int64 userId = 1;
    string linkmicId = 2;
    int64 score = 3;
    int32 rank = 4;
    User user = 5;
    string nickname = 6;
    string displayId = 7;
    ImageModel avatarThumb = 8;
    

}

message SubOperation {
    SubOperationType operationType = 1;
    int64 operationTime = 2;
    
    enum SubOperationType {
    	SUB_OPERATION_TYPE_OPERATION_TYPE_UNKNOWN = 0;
    	SUB_OPERATION_TYPE_OPERATION_TYPE_NEW_SUBSCRIPTION = 1;
    	SUB_OPERATION_TYPE_OPERATION_TYPE_SINGLE_RENEWAL = 2;
    	SUB_OPERATION_TYPE_OPERATION_TYPE_AUTO_RENEWAL = 3;
    	SUB_OPERATION_TYPE_OPERATION_TYPE_UPGRADE = 4;
    	SUB_OPERATION_TYPE_OPERATION_TYPE_CANCELLATION = 5;
    }

}

message BarrageTypeSubscribeGiftParam {
    int64 giftSubCount = 1;
    bool showGiftSubCount = 2;
    GiftSource giftSource = 3;
    
    enum GiftSource {
    	GIFT_SOURCE_UNKNOWN = 0;
    	GIFT_SOURCE_PLATFORM = 1;
    	GIFT_SOURCE_USER_BUY_RANDOM = 2;
    	GIFT_SOURCE_USER_BUY_SPECIFIC = 3;
    }

}

message CountdownForAllConfig {
    int64 duration = 1;
    int64 targetScore = 2;
    

}

message CompetitionFinish {
    int64 competitionFinishTime = 1;
    CompetitionEndReason reason = 2;
    CompetitionUserBase leaveUser = 3;
    
    enum CompetitionEndReason {
    	COMPETITION_END_REASON_UNKNOWN = 0;
    	COMPETITION_END_REASON_NORMAL = 1;
    	COMPETITION_END_REASON_CUT_SHORT = 2;
    }

}

message AnchorInfoResponse {
    ResponseData data = 1;
    
    message CameraPartnershipInfo {
    	bool permission = 1;
    	bool taskPermission = 2;
    	bool publishPermission = 3;
    

	}
    message DropsBrief {
    	string dropsId = 1;
    	string icon = 2;
    	int64 beginTimestamp = 3;
    

	}
    message DropsEntrance {
    	bool permission = 1;
    	bool hasSign = 2;
    	bool rewarded = 3;
    	string icon = 4;
    	int64 dropsCount = 5;
    	repeated DropsBrief recentDropsBriefs = 6;
    

	}
    message LabelFilterInfo {
    	bool gpppaAccount = 1;
    	string gpppaBanText = 2;
    	string gpppaBanToast = 3;
    

	}
    message PartnershipInfo {
    	bool permission = 1;
    	bool hasSign = 2;
    	bool taskPermission = 3;
    	bool publishPermission = 4;
    	int64 partnershipInfoUpdateTimestamp = 5;
    

	}
    message TaskPriceUpdate {
    	string taskId = 1;
    	int64 priceUpdateTimestamp = 2;
    

	}
    message PunishInfo {
    	string punishText = 1;
    	PunishEventInfo punishEventInfo = 2;
    

	}
    message ToggleInfo {
    	int64 gameTagId = 1;
    	int32 toggleStatus = 2;
    

	}
    message ResponseData {
    	repeated PunishInfo punishInfo = 1;
    	repeated TaskPriceUpdate priceUpdateList = 2;
    	LabelFilterInfo labelFilterInfo = 3;
    	bool taxpayoutconfirm = 4;
    	repeated PartnershipGameEvent enableEventList = 5;
    	repeated PartnershipBriefDrops enableDropsList = 6;
    	int32 toggleStatus = 7;
    	bool shootPermission = 8;
    	bool businessPartnership = 9;
    	DropsEntrance dropsEntrance = 10;
    	PartnershipInfo partnershipInfo = 11;
    	ToggleInfo toggleInfo = 12;
    	bool liveTakeDecouple = 13;
    	CameraPartnershipInfo cameraPartnershipInfo = 14;
    

	}

}

message TimerDetail {
    int64 timerId = 1;
    int64 anchorId = 2;
    int64 startTimestampS = 3;
    int64 startCountdownTimeS = 4;
    string anchorSideTitle = 5;
    string userSideTitle = 6;
    int64 timeIncreasePerSubS = 7;
    int64 timeIncreaseCapS = 8;
    int32 subCount = 9;
    bool timeIncreaseReachCap = 10;
    int64 totalPauseTimeS = 11;
    int64 lastPauseTimestampS = 12;
    int64 totalTimeS = 13;
    int64 remainingTimeS = 14;
    int64 timestampS = 15;
    int64 stickerX = 16;
    int64 stickerY = 17;
    int64 screenW = 18;
    int64 screenH = 19;
    TimerStatus timerStatus = 20;
    AntidirtStatus antidirtStatus = 21;
    AuditStatus auditStatus = 22;
    AuditInfo auditInfo = 23;
    
    enum AntidirtStatus {
    	ANTIDIRT_STATUS_PASS = 0;
    	ANTIDIRT_STATUS_FAILED = 1;
    }
    enum AuditStatus {
    	AUDIT_STATUS_UNKNOWN = 0;
    	AUDIT_STATUS_PASS = 1;
    	AUDIT_STATUS_FAILED = 2;
    	AUDIT_STATUS_REVIEWING = 3;
    	AUDIT_STATUS_FORBIDDEN = 4;
    }
    enum TimerStatus {
    	TIMER_STATUS_NOT_STARTED = 0;
    	TIMER_STATUS_RUNNING = 1;
    	TIMER_STATUS_PAUSED = 2;
    	TIMER_STATUS_CANCELLED = 3;
    	TIMER_STATUS_FINISHED = 4;
    }
    message AuditInfo {
    	int64 violationId = 1;
    	AuditTaskType taskType = 2;
    
    	enum AuditTaskType {
    		AUDIT_TASK_TYPE_DEFAULT = 0;
    		AUDIT_TASK_TYPE_APPEAL = 1;	
    }

	}

}

message SpecifiedDisplayText {
    int64 uid = 1;
    Text displayText = 2;
    

}

message CompetitionSettlementStartResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	CompetitionCommon bizCommon = 1;
    	CompetitionSettleStart settleStart = 2;
    

	}

}

message CommonCardInfo {
    string cardNameKey = 1;
    ImageModel cardImage = 2;
    int64 sendTimeSec = 3;
    BattleUserInfo sendUser = 4;
    int64 effectLastDuration = 5;
    string ruleUrl = 6;
    int64 effectTimeSec = 7;
    int64 toAnchorId = 8;
    string toAnchorIdStr = 9;
    

}

message GameGiftGuideKeywordsConfig {
    repeated GameGiftGuideKeyword gameGiftGuideKeywordConfig = 1;
    

}

message CountdownGetUserHistoryParams {
    int64 roomId = 1;
    int64 userId = 2;
    

}

message ExemptStrategy {
    bool exemptBothHost = 1;
    int32 exemptAudienceTop = 2;
    

}

message AggregationData {
    User audience = 1;
    repeated int32 successlist = 2;
    

}

message Panel {
    string text = 1;
    UrlDataStruct icon = 2;
    repeated string tags = 3;
    string tagsUpdatedAt = 4;
    string extra = 5;
    

}

message CurrencyPriceItem {
    string currency = 1;
    string priceShowForm = 2;
    int64 price = 3;
    int32 originalPrice = 4;
    int32 priceDot = 5;
    int32 keepDot = 6;
    

}

message QuizFinalResult {
    MessageType messageType = 1;
    string quizId = 2;
    int32 quizType = 3;
    string extra = 4;
    repeated QuizRewardRule settledReward = 5;
    repeated QuizNextQuiz nextQuiz = 6;
    string rewardAmount = 7;
    int32 questionCount = 8;
    repeated QuizAnchorInfo anchorList = 9;
    string sponsorCode = 10;
    int32 displayDurationMs = 11;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;
    

}

message ChangeStateReq {
    StateReqCommon common = 1;
    int32 stateType = 2;
    int64 clientTime = 3;
    LayoutState layoutState = 4;
    int32 onlineUserState = 5;
    int32 audioMuted = 6;
    int32 videoMuted = 7;
    int32 networkState = 8;
    string backgroundStickerId = 9;
    int64 avatarId = 10;
    

}

message WebcastCaptionMessage {
    CommonMessageData baseMessage = 1;
    int64 timestampMs = 2;
    int64 durationMs = 3;
    repeated CaptionContent content = 4;
    int64 sentenceId = 5;
    int64 sequenceId = 6;
    bool definite = 7;
    

}

message AssetExtra {
    string effectStarlingKey = 1;
    

}

message CampaignBannerDisplay {
    string imageUrl = 1;
    bool campaignBannerIsDisplay = 2;
    int32 sourceFrom = 3;
    

}

message GetMultiGuestRecommendRoomsResponse {
    ResponseData data = 1;
    Extra extra = 2;
    
    message ResponseData {
    	repeated MultiGuestRecommendRoomInfo recoRooms = 1;
    	bool isRateLimited = 2;
    

	}
    message Extra {
    	int64 now = 1;
    

	}

}

message GiftPollOption {
    int64 giftId = 1;
    ImageModel resultImage = 2;
    

}

message LinkInviteResult {
    int64 channelId = 1;
    int32 vendor = 2;
    string channelIdStr = 3;
    Scene scene = 4;
    bool rtcJoinChannel = 5;
    string rtcExtInfo = 6;
    string linkMicIdStr = 7;
    bool rtcPushStream = 8;
    int64 actionId = 9;
    string rivalsLinkMicIdStr = 10;
    int32 perceptionStatus = 11;
    WebcastPerceptionMessage perceptionMessage = 12;
    InviteExtra extra = 13;
    

}

message LyricStruct {
    int64 id = 1;
    int32 lyricType = 2;
    string vid = 3;
    repeated string klyricUrls = 4;
    int32 lyricStatus = 5;
    

}

message WebcastLinkMicSignalingMethod {
    CommonMessageData baseMessage = 1;
    string signal = 2;
    

}

message PanelRefresh {
    int64 price = 2;
    int64 toUserId = 3;
    int64 roomId = 4;
    int64 timestamp = 5;
    Gallery galleryData = 100;
    UserLevel userLevel = 101;
    FanClub fanClub = 102;
    repeated Gallery allGalleryData = 103;
    
    message FanClub {
    	int64 timeToSleep = 1;
    

	}
    message Gallery {
    	int64 sponsorId = 1;
    	bool lightGiftUp = 2;
    	int64 leftCountToSponsor = 3;
    	bool canSponsor = 4;
    	int64 goalCount = 5;
    	bool isGalleryAvailable = 6;
    	int64 giftId = 7;
    

	}
    message UserLevel {
    	int64 currentScore = 1;
    	int64 currentLevel = 2;
    	int64 scoreLeftToLevel = 3;
    	bool isUpgrade = 4;
    	bool didUserOptOut = 5;
    

	}

}

message BizCreateChannelResponseData {
    MultiLiveAnchorPanelSettings multiLiveAnchorPanelSettings = 1;
    repeated LastLayoutSetting lastLayoutSettings = 5;
    string backgroundStickerId = 6;
    int32 shareRevenueSetting = 7;
    int32 displayEmptySeat = 8;
    

}

message LinkedUserInfo {
    string layoutId = 1;
    int64 userId = 2;
    int64 channelId = 3;
    

}

message SkinHostAccount {
    ImageModel bgImage = 2;
    

}

message WebcastEnvelopePortalMessage {
    CommonMessageData baseMessage = 1;
    PortalInfo portalInfo = 2;
    PortalTransTarget portalTransTarget = 3;
    int32 portalView = 4;
    int32 portalDisplay = 5;
    
    message PortalInfo {
    	string id = 1;
    	string idc = 2;
    	int32 sendAtSecond = 3;
    	int32 ddlSecond = 4;
    	int32 envelopeDiamonds = 5;
    	int32 portalDiamonds = 6;
    	string senderDisplayId = 7;
    	string senderId = 8;
    	ImageModel senderAvatar = 9;
    	int32 transCount = 10;
    	int32 touchCount = 11;
    

	}
    message PortalTransTarget {
    	string roomId = 1;
    	ImageModel sendRoomCover = 2;
    	string anchorDisplayId = 3;
    	string anchorId = 4;
    	ImageModel anchorAvatar = 5;
    	int32 envelopeDiamonds = 6;
    

	}

}

message WebcastCohostReserveMessage {
    CommonMessageData baseMessage = 1;
    int32 reserveType = 2;
    int64 reservationId = 3;
    ReserveContent reserveContent = 4;
    ReplyContent replyContent = 5;
    

}

message MsgMeta {
    int64 sourceOperateMs = 1;
    int64 serverSendMs = 2;
    repeated string reasons = 3;
    

}

message SubscriptionInfo {
    AuditStatus user = 1;
    int32 totalSubscribers = 2;
    int32 subMonths = 3;
    int32 subscriptionType = 4;
    
    enum AuditStatus {
    	AUDIT_STATUS_UNKNOWN = 0;
    	AUDIT_STATUS_PASS = 1;
    	AUDIT_STATUS_FAILED = 2;
    	AUDIT_STATUS_REVIEWING = 3;
    	AUDIT_STATUS_FORBIDDEN = 4;
    }

}

message CommerceStruct {
    int32 commercePermission = 1;
    string oecInitDataString = 2;
    bool asyncLoad = 3;
    int64 productNum = 4;
    int32 useNewPromotion = 5;
    

}

message WebcastBALeadGenMessage {
    CommonMessageData baseMessage = 1;
    int32 op = 2;
    int64 pageId = 3;
    int64 opTime = 4;
    string ctaText = 5;
    string schema = 6;
    int32 pinPeriod = 7;
    string cardIntro = 8;
    string cardButtonText = 9;
    string cardTitle = 10;
    

}

message AnchorLiveReplayFrameResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	string reqId = 1;
    	repeated FrameInfo frameList = 2;
    

	}

}

message BattlePrompt {
    string promptKey = 1;
    repeated BattlePromptElem promptElements = 2;
    

}

message GroupPlayer {
    int64 channelId = 1;
    Player user = 2;
    

}

message WebcastLinkMicArmies {
    CommonMessageData baseMessage = 1;
    int64 battleId = 2;
    map<int64, BattleUserArmies> armies = 3;
    int64 channelId = 4;
    int64 giftSentTime = 5;
    int64 scoreUpdateTime = 6;
    TriggerReason triggerReason = 7;
    int64 fromUserId = 8;
    int64 giftId = 9;
    int32 giftCount = 10;
    ImageModel gifIconImage = 11;
    int32 totalDiamondCount = 12;
    int32 repeatCount = 13;
    repeated BattleTeamUserArmies teamArmies = 14;
    bool triggerCriticalStrike = 15;
    bool hasTeamMatchMvpSfx = 16;
    string logId = 17;
    BattleSetting battleSettings = 18;
    HighScoreControlCfg fuzzyDisplayConfigV2 = 19;
    
    enum TriggerReason {
    	TRIGGER_REASON_UNKNOWN = 0;
    	TRIGGER_REASON_SCORE_UPDATE = 1;
    	TRIGGER_REASON_BATTLE_END = 2;
    	TRIGGER_REASON_OPT_OUT_UPDATE = 3;
    	TRIGGER_REASON_KEEP_ALIVE = 4;
    }

}

message MultiGuestPushResp {
    

}

message SimpleUser {
    int64 userId = 1;
    string nickname = 2;
    string displayId = 3;
    ImageModel avatarThumb = 4;
    

}

message WallpaperReplyResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool result = 1;
    	WallpaperContent wallpaperContent = 2;
    

	}

}

message StreamStatusChangeInfo {
    int64 streamId = 1;
    int32 preStatus = 2;
    int32 curStatus = 3;
    int64 changeTimestamp = 4;
    

}

message WebcastPictionaryEndMessage {
    CommonMessageData baseMessage = 1;
    int64 roundId = 2;
    string word = 3;
    int32 endType = 4;
    int32 pictionaryType = 5;
    

}

message BEFViewRenderSize {
    int32 with = 1;
    int32 height = 2;
    

}

message StreamGoalData {
    LiveStreamGoalIndicator indicator = 1;
    LiveStreamGoal goal = 2;
    int32 updateSource = 3;
    string goalExtra = 4;
    

}

message EnlargePositionStatusSynContent {
    int32 isEnlarge = 1;
    string targetPosition = 2;
    EnlargeScreenScene scene = 3;
    LinkerMediaChangeOperator operatorInfo = 4;
    string layoutId = 5;
    repeated string linkedUserUiPositions = 6;
    repeated PosIdentity enlargedPositions = 7;
    
    enum EnlargeScreenScene {
    	ENLARGE_SCREEN_SCENE_ENLARGE_UNKNOWN = 0;
    	ENLARGE_SCREEN_SCENE_ENLARGE_HOST_SCREEN = 1;
    	ENLARGE_SCREEN_SCENE_INVITE_ENLARGE_GUEST_SCREEN = 2;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_HOST = 3;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_GUEST = 4;
    	ENLARGE_SCREEN_SCENE_HOST_RECEIVE_CANCEL_ENLARGE = 5;
    	ENLARGE_SCREEN_SCENE_GET_ENLARGE_STATUS = 6;
    	ENLARGE_SCREEN_SCENE_ENLARGE_POSITION = 7;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_POSITION = 8;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_ALL = 9;
    	ENLARGE_SCREEN_SCENE_CHANGE_ENLARGE_RECORD = 10;
    }

}

message WebcastRoomNotifyMessage {
    CommonMessageData baseMessage = 1;
    string schema = 2;
    int64 notifyType = 3;
    string content = 4;
    User user = 5;
    RoomNotifyMessageExtra extra = 6;
    int32 notifyClass = 7;
    repeated int64 flexSetting = 8;
    string source = 9;
    int64 from_user_id = 10;
    PrivilegeLogExtra logExtra = 11;
    int64 to_anchor_id = 12;
    EventTracking eventTracking = 13;
    

}

message GroupChangeContent {
    GroupChannelAllUser groupUser = 1;
    repeated string linkedUserUiPositions = 2;
    

}

message ShowAgainGuestParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 showId = 3;
    int64 targetUserId = 4;
    

}

message GameEmotesTab {
    bool canUseGuessingEmotes = 1;
    GameEmoteConfig gameEmoteConfig = 2;
    EmoteListResult usableGuessingEmotes = 3;
    EmoteListResult unusableGuessingEmotes = 4;
    

}

message ActivitiesIconInfo {
    string activityId = 1;
    ImageModel iconImage = 2;
    int64 abGroup = 3;
    string currenPhase = 4;
    

}

message BusinessContent {
    int64 overLength = 1;
    MultiLiveContent multiLiveContent = 100;
    CohostContent cohostContent = 200;
    

}

message RandomGiftPanelBanner {
    ImageModel shadingImage = 2;
    int64 targetNum = 3;
    int64 collectNum = 4;
    string displayText = 5;
    ImageModel leftIcon = 6;
    string schemaUrl = 7;
    repeated string bgColors = 8;
    int64 round = 9;
    int32 bannerPriority = 10;
    

}

message CohostStreamConfig {
    string screenShareStreamId = 1;
    

}

message AnchorGrowLevelImMsgNotification {
    int64 level = 1;
    bool isFinalLevel = 2;
    bool isCompleteLevel = 3;
    int64 taskId = 4;
    string content = 5;
    string starlingKey = 6;
    

}

message CheckPermissionResponse {
    bool multiHostPermission = 4;
    bool anchorOnboardPermit = 5;
    bool anchorPunished = 6;
    

}

message MultiGuestPlayInfo {
    bool packSuccFlag = 1;
    map<int32, MultiGuestPlayConfig> playSceneToConfigMap = 2;
    
    message MultiGuestPlayConfig {
    	int32 playScene = 1;
    	map<int32, int32> featureConfigMap = 2;
    

	}

}

message WebcastFansEventMessage {
    CommonMessageData baseMessage = 1;
    User user = 2;
    FansEventType eventType = 11;
    FansLevelInfo fansLevelInfo = 12;
    FansLevelUpgradeInfo fansLevelUpgradeInfo = 13;
    FansEventData data = 21;
    
    enum FansEventType {
    	FANS_EVENT_TYPE_UNKNOWN = 0;
    	FANS_EVENT_TYPE_NEW_FANS = 1;
    	FANS_EVENT_TYPE_EXP_CHANGE = 2;
    	FANS_EVENT_TYPE_TASK_COMPLETE = 3;
    	FANS_EVENT_TYPE_LEVEL_UPGRADE = 4;
    	FANS_EVENT_TYPE_GET_UNCLAIMED_POINTS = 5;
    	FANS_EVENT_TYPE_TEAM_RANK_UPDATE = 6;
    	FANS_EVENT_TYPE_ENTRANCE_GUIDANCE = 7;
    	FANS_EVENT_TYPE_FANS_LEVEL_UPGRADE = 8;
    	FANS_EVENT_TYPE_REFRESH_TASK_PAGE = 1001;
    }

}

message CompetitionContributorInfo {
    CompetitionUserBase user = 1;
    int64 score = 2;
    ImageModel avatar = 3;
    

}

message LeaveRequestResponse {
    

}

message WarningTag {
    Text text = 1;
    int64 duration = 2;
    int32 tagSource = 3;
    PunishEventInfo punishInfo = 4;
    int32 style = 5;
    string detailUrl = 6;
    int32 iconType = 7;
    

}

message BattleNoticeExtremeHighScoreNotice {
    int64 battleId = 1;
    Text displayTextOriginViewers = 2;
    Text displayTextUnrelatedViewers = 3;
    int64 extremeHighScoreThreshold = 4;
    

}

message HotTag {
    string productId = 1;
    int64 hotCount = 2;
    

}

message BattleInviteeGiftPermission {
    int64 userId = 1;
    int32 giftPermissionType = 2;
    

}

message PreviewProductCardInfo {
    string recommendInfo = 1;
    

}

message PlayTogetherListChangeContent {
    repeated PlayTogetherMember applyListMembers = 1;
    repeated PlayTogetherMember historyListMembers = 2;
    

}

message AnchorMessage {
    int64 uid = 1;
    string linkMicId = 2;
    int32 rtcStatus = 3;
    int32 status = 4;
    int32 source = 5;
    

}

message ContentPosition {
    string contentID = 1;
    ContentPositionType contentType = 2;
    MicPositionData pos = 3;
    string contentLinkmicID = 4;
    int64 startTimeNano = 5;
    
    enum ContentPositionType {
    	CONTENT_POSITION_TYPE_UNKNOWN = 0;
    	CONTENT_POSITION_TYPE_STREAM = 1;
    	CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT = 2;
    	CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE = 3;
    }

}

message LiveFragmentDetail {
    VideoMetaInfo mp4VideoMetaInfo = 34;
    

}

message FlyingMicResources {
    ImageModel pathImage = 1;
    ImageModel micImage = 2;
    repeated TransitionConfig transitionConfigs = 3;
    

}

message AnchorGrowPerLiveTriggerResponse {
    Data data = 1;
    
    message Data {
    	AnchorGrowLevelTriggerInfo anchorGrowLevelInfo = 1;
    

	}

}

message PushStreamInfo {
    Quality defaultQuality = 1;
    repeated Quality qualityList = 2;
    
    message Quality {
    	string name = 1;
    	string sdkKey = 2;
    	string desc = 3;
    	int64 width = 4;
    	int64 height = 5;
    	int64 max_bitrate = 6;
    	int64 min_bitrate = 7;
    	int64 default_bitrate = 8;
    	int64 fps = 9;
    

	}

}

message CountdownStartParams {
    int64 roomId = 1;
    int64 channelId = 2;
    CountdownConfig countdownConfig = 3;
    int64 userId = 4;
    string linkmicId = 5;
    

}

message PollCountLimit {
    int64 maxPollCount = 1;
    int64 currentPollCount = 2;
    bool unlimited = 3;
    

}

message TextBadge {
    BadgeDisplayType badgeDisplayType = 1;
    string key = 2;
    string defaultPattern = 3;
    repeated string pieces = 4;
    
    enum BadgeDisplayType {
    	BADGE_DISPLAY_TYPE_UNKNOWN = 0;
    	BADGE_DISPLAY_TYPE_IMAGE = 1;
    	BADGE_DISPLAY_TYPE_TEXT = 2;
    	BADGE_DISPLAY_TYPE_STRING = 3;
    	BADGE_DISPLAY_TYPE_COMBINE = 4;
    }

}

message ReserveInfo {
    int64 reservationId = 1;
    bool isReservationSender = 2;
    int64 acceptAppointmentCnts = 3;
    int64 reservationAnchorCnts = 4;
    repeated ReserveUser displayUserList = 6;
    
    message ReserveUser {
    	User user = 1;
    	int64 roomId = 2;
    

	}

}

message BattleTaskGiftAmountGuide {
    BattlePrompt guidePrompt = 1;
    int32 promptType = 2;
    int32 disappearDuration = 3;
    ImageModel iconImage = 11;
    ImageModel giftImage = 12;
    int64 recommendGiftId = 21;
    int32 recommendGiftCount = 22;
    Text guideContent = 23;
    

}

message ReqItem {
    Scene scene = 1;
    DispersionParam dispersionParam = 2;
    

}

message WebcastKaraokeQueueMessage {
    CommonMessageData baseMessage = 1;
    int32 type = 2;
    KaraokeSong song = 3;
    

}

message BattleTaskUpdate {
    int64 taskProgress = 1;
    int64 fromUserUid = 2;
    string promptKey = 3;
    string logId = 21;
    

}

message LikeEffect {
    int64 version = 1;
    int64 effectCnt = 2;
    int64 effectIntervalMs = 3;
    int64 level = 4;
    

}

message AnchorToolModification {
    int64 roomId = 1;
    int64 userId = 2;
    int64 effectId = 3;
    string name = 4;
    string resourceId = 5;
    int32 modificationType = 6;
    int64 role = 7;
    int32 msgType = 8;
    int64 subType = 9;
    int64 startTime = 10;
    int64 endTime = 11;
    int64 duration = 12;
    string tab = 21;
    int64 mode = 22;
    int64 from = 23;
    double value = 24;
    string url = 25;
    Scene scene = 26;
    int64 status = 27;
    string content = 28;
    

}

message RoomAuthStatus {
    bool enableChat = 1;
    bool enableDanmaku = 2;
    bool enableGift = 3;
    bool enableLuckMoney = 4;
    bool enableDigg = 5;
    bool enableRoomContributor = 7;
    bool enableProps = 8;
    bool usercard = 9;
    bool deprecated1 = 10;
    int64 deprecated2 = 11;
    int32 bannerState = 12;
    int64 deprecated3 = 13;
    int64 deprecated4 = 14;
    int32 landscape = 15;
    int64 landscapechat = 16;
    MessageType messageType = 17;
    int32 anchorGiftType = 18;
    int64 deprecated5 = 19;
    int32 donationSticker = 20;
    int64 deprecated6 = 21;
    int64 deprecated7 = 22;
    int64 deprecated8 = 23;
    int64 deprecated9 = 24;
    bool enableQuestion = 25;
    bool enableChatL2 = 26;
    bool enableViewers = 27;
    bool enableShare = 28;
    int32 giftRankSwitchStatus = 29;
    bool enablePromote = 30;
    int32 userCountDisplayState = 31;
    int32 rankState = 32;
    int64 broadcastmessage = 33;
    bool chatSubOnly = 34;
    int32 anchorRedEnvelopeType = 35;
    int32 quickCommentState = 36;
    int32 enablePoll = 37;
    int32 enableGiftPoll = 38;
    int64 enableDrawGuess = 40;
    int32 enableActivityTreasureBox = 41;
    int64 customizablepoll = 42;
    RoomAuthOffReasons roomAuthOffReasons = 100;
    bool useUserPV = 101;
    int32 promoteOther = 102;
    int32 ecRankSwitchStatus = 103;
    int32 eventpromotion = 105;
    bool commentFlaggedSwitch = 106;
    bool commentFlaggedReviewSwitch = 107;
    bool exploreEnabled = 108;
    int64 pictionarypermission = 109;
    int64 pictionarybubble = 110;
    AnchorLevelPermission anchorLevelPermission = 111;
    int32 gamerankingswitch = 112;
    ToolBarManagement toolbarmanagement = 113;
    bool multienablereserve = 114;
    bool enablefanslevel = 115;
    int64 secretroom = 116;
    bool spamcomments = 117;
    RechargeCustomError customErrorForGiftSetting = 120;
    bool guessEntranceForHost = 121;
    bool creditEntranceForAudience = 122;
    bool gameGuessPermission = 123;
    int64 customizablegiftpoll = 124;
    int64 commentTrayStatus = 125;
    int32 rankingchangealterswitch = 126;
    bool showCreditWidget = 127;
    StarCommentPermissionSwitch starCommentPermissionSwitch = 128;
    int64 emotepoll = 129;
    bool enableshowuseruv = 130;
    
    message StarCommentPermissionSwitch {
    	int32 status = 1;
    	string offreason = 2;
    

	}

}

message SpecialEffectNotice {
    int64 score = 1;
    int64 fromUserId = 2;
    int64 toAnchorId = 3;
    repeated AnchorPair affectedAnchorPairs = 4;
    

}

message TranscodeInfo {
    int32 transcodeStatus = 1;
    int64 estimatedSize = 2;
    string failReason = 3;
    VideoMetaInfo videoMeta = 4;
    

}

message MultiGuestReserveResponse {
    ResponseData data = 1;
    Extra extra = 2;
    
    message ResponseData {
    	WebcastPerceptionMessage perceptionInfo = 1;
    	AudienceReserveUserInfo reserveUserInfo = 2;
    

	}
    message Extra {
    	int64 now = 1;
    

	}

}

message HistoryCommentResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	repeated ProtoMessageFetchResult.BaseProtoMessage messages = 1;
    	bool hasMore = 2;
    	string cursor = 3;
    

	}

}

message BannerInRoom {
    int64 id = 1;
    string title = 2;
    ImageModel image = 3;
    int32 height = 4;
    int32 width = 5;
    string schemaUrl = 6;
    int32 actionType = 7;
    int64 bannerType = 8;
    int32 priority = 9;
    string text = 10;
    int64 frameType = 11;
    string extra = 12;
    int64 status = 13;
    int64 uid = 14;
    int64 roomid = 15;
    int64 appointmentStartTimestamp = 16;
    int64 appointmentEndTimestamp = 17;
    int64 appointmentId = 18;
    int64 businessType = 19;
    BannerContentDynamic dynamicBanner = 20;
    int32 bannerLocation = 21;
    bool openWithNavigationTag = 22;
    string businessSource = 23;
    string activityId = 24;
    
    message BannerContentDynamic {
    	string jsonResource = 1;
    

	}

}

message ReserveResponse {
    ResponseData data = 1;
    ReserveExtra extra = 2;
    
    message ResponseData {
    	int64 reservationId = 1;
    	int64 createdTimestamp = 2;
    

	}
    message LogPb {
    	string imprId = 1;
    

	}
    message ReserveExtra {
    	LogPb logPb = 1;
    

	}

}

message TeamRankProgress {
    int32 currentNumber = 1;
    int32 targetNumber = 2;
    repeated int64 giftIds = 3;
    int64 timestamp = 4;
    int32 addScore = 5;
    int32 contributedScore = 6;
    

}

message BattleTeamUserArmies {
    int64 teamId = 1;
    repeated BattleTeamUser teamUsers = 2;
    int64 teamTotalScore = 3;
    BattleUserArmies userArmies = 4;
    int64 hostRank = 5;
    

}

message LevelUpGiftInfo {
    int64 giftId = 1;
    int64 leftCountToLevelUp = 2;
    int64 levelUpCount = 3;
    int64 currentCount = 4;
    int64 numOfUpgradeGiftsLeft = 5;
    string showId = 6;
    

}

message Player {
    int64 roomId = 1;
    int64 uid = 2;
    

}

message LinkerLeaveContent {
    int64 userId = 1;
    string linkmic_id_str = 2;
    int64 sendLeaveUid = 3;
    int64 leaveReason = 4;
    

}

message BagIndex {
    int32 value = 1;
    

}

message SendGiftResult {
    Text displayText = 1;
    int32 fanTicketCount = 2;
    string describe = 3;
    int64 mGiftId = 4;
    int32 groupCount = 5;
    int64 mLeftDiamonds = 6;
    int32 repeatCount = 7;
    int32 comboCount = 8;
    int64 propId = 9;
    int32 propType = 10;
    repeated Prop props = 11;
    int64 msgId = 12;
    repeated GiftResultData gifts = 15;
    int64 roomFanTicketCount = 16;
    int64 groupId = 17;
    string orderId = 18;
    CalmDownInfo mCalmDownInfo = 19;
    repeated ExchangeGiftResultData balanceResult = 20;
    string monitorExtra = 21;
    bool isFirstSend = 22;
    int32 freqLimitRemaintimes = 23;
    PayGradeInfo payGradeInfo = 24;
    repeated LynxGiftExtra lynxExtra = 25;
    MatchInfo matchInfo = 26;
    int32 linkmicGiftExpressionStrategy = 27;
    FansLevelInfo fansLevelInfo = 28;
    int64 anchorFansCount = 29;
    FlyingMicResources flyingMicResources = 30;
    TeamRankProgress teamRankProgress = 31;
    int32 version = 32;
    repeated SponsorshipInfo sponsorshipInfo = 33;
    bool giftGalleryComboSponsor = 34;
    FlyingMicResources flyingMicResourcesV2 = 35;
    GiftChallengeProgress giftChallengeProgress = 36;
    BackpackInfo backpackInfo = 37;
    GiftSendFansClubInfo fansClubInfo = 38;
    bool multiGenerateMessage = 39;
    int64 toMemberId = 40;
    string toMemberNickname = 41;
    LevelUpGiftInfo levelUpGiftInfo = 42;
    PanelRefresh panelRefreshData = 100;
    

}

message FanTicketRoomNoticeContent {
    repeated UserFanTicket userFanTicket = 1;
    int64 totalLinkmicFanTicket = 2;
    int64 matchId = 3;
    int64 eventTime = 4;
    string fanTicketIconUrl = 5;
    int64 playId = 6;
    PlayScene playScene = 7;
    
    enum PlayScene {
    	PLAY_SCENE_UNKNOWN = 0;
    	PLAY_SCENE_COUNTDOWN_FOR_ALL = 1;
    	PLAY_SCENE_COUNTDOWN_FOR_SINGLE = 2;
    	PLAY_SCENE_LIVE_SHOW = 3;
    	PLAY_SCENE_AIG_C = 4;
    	PLAY_SCENE_KARAOKE = 5;
    	PLAY_SCENE_DRAW_GUESS = 6;
    	PLAY_SCENE_ENLARGE_GRID = 7;
    	PLAY_SCENE_GIFT_PRIORITY_LINK = 8;
    	PLAY_SCENE_GIFT_THRESHOLD_LINK = 9;
    	PLAY_SCENE_NOTICE_BOARD = 10;
    	PLAY_SCENE_PLAY_BOOK = 11;
    	PLAY_SCENE_GUEST_SHOWDOWN = 12;
    }

}

message UserHonor {
    int64 totalDiamond = 1;
    ImageModel diamondIcon = 2;
    string currentHonorName = 3;
    ImageModel currentHonorIcon = 4;
    string nextHonorName = 5;
    int32 level = 6;
    ImageModel nextHonorIcon = 7;
    int64 currentDiamond = 9;
    int64 thisGradeMinDiamond = 10;
    int64 thisGradeMaxDiamond = 11;
    string gradeDescribe = 13;
    repeated GradeIcon gradeIconList = 14;
    int64 screenChatType = 15;
    ImageModel imIcon = 16;
    ImageModel imIconWithLevel = 17;
    ImageModel liveIcon = 18;
    ImageModel newImIconWithLevel = 19;
    ImageModel newLiveIcon = 20;
    int64 upgradeNeedConsume = 21;
    string nextPrivileges = 22;
    ImageModel profileDialogBg = 23;
    ImageModel profileDialogBackBg = 24;
    int64 score = 25;
    string gradeBanner = 1001;
    

}

message BackpackInfo {
    int32 itemType = 1;
    int64 itemId = 2;
    int64 count = 3;
    int64 minExpireAt = 4;
    bool available = 5;
    BagItemPreUpdateInfo preUpdateInfo = 6;
    int64 battleId = 7;
    

}

message UserVoteInfo {
    bool hasVoted = 1;
    int32 voteOptionIndex = 2;
    repeated UserVoteOptionInfo voteOptionList = 3;
    

}

message ParallelPullStreamInfo {
    bool enable = 1;
    string featureDetail = 2;
    

}

message LiveProInfo {
    bool isLivePro = 1;
    bool showBanner = 2;
    ImageModel banner = 3;
    string bannerStarlingKey = 4;
    ImageModel label = 5;
    int32 liveProType = 6;
    ImageModel gamerLabel = 7;
    string gamerBannerStarlingKey = 8;
    

}

message AccompanimentStruct {
    string vid = 1;
    repeated string accompanimentUrls = 2;
    int64 id = 3;
    double volumeLoudnessLufs = 4;
    double volumeAmplitudePeak = 5;
    

}

message WebcastFollowCardMessage {
    CommonMessageData baseMessage = 1;
    int64 followCardId = 2;
    int64 maxRandom = 3;
    

}

message UserGrade {
    string nickName = 1;
    BadgeStruct defaultGradeBadge = 2;
    BadgeStruct opacityBadge = 3;
    int64 currentScore = 4;
    int32 currentGrade = 5;
    int32 gradeMode = 6;
    int32 timeToSleep = 7;
    GradeScoreRule gradeScoreRule = 8;
    int64 version = 9;
    

}

message PotionCardInfo {
    string cardNameKey = 1;
    ImageModel cardImage = 2;
    int64 sendTimeSec = 3;
    BattleUserInfo sendUser = 4;
    int64 effectLastDuration = 5;
    string ruleUrl = 6;
    int64 effectTimeSec = 7;
    int64 toAnchorId = 8;
    

}

message WebcastActivityQuizUserIdentityMessage {
    CommonMessageData baseMessage = 1;
    string primaryId = 2;
    int64 version = 3;
    string retainDeviceId = 4;
    int64 timestamp = 5;
    QuizUserIdentityInfo body = 6;
    

}

message LastLayoutSetting {
    Scene scene = 1;
    string layoutId = 2;
    

}

message PerceptionSheetInfo {
    PerceptionDialogIconType iconType = 1;
    Text title = 2;
    Text subTitle = 3;
    Text reasonTitle = 4;
    Text reasonInfo = 5;
    Text notAllowedTitle = 6;
    Text notAllowedText = 7;
    Text defaultActionText = 8;
    Scene scene = 9;
    int64 targetUserId = 10;
    int64 targetRoomId = 11;
    int64 countDownTime = 12;
    
    enum PerceptionDialogIconType {
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18;
    }

}

message FollowGuideParams {
    int64 roomId = 1;
    int32 triggerType = 2;
    repeated FollowGuideInfo followGuideInfoList = 3;
    int64 channelId = 4;
    string triggerParamsJsonStr = 5;
    
    message FollowGuideInfo {
    	int64 guideUserId = 1;
    	int32 guideUserIdentity = 2;
    	int32 guideFollowStatus = 3;
    

	}

}

message MultiInviteResponse {
    int64 battleId = 1;
    int32 meanwhileInviteScene = 2;
    repeated TeamUser battleTeamUser = 3;
    GiftModeMeta giftModeMeta = 4;
    

}

message WebcastLiveJourneyMessage {
    CommonMessageData baseMessage = 1;
    LiveJourneyImMessage liveJourneyImMsg = 2;
    

}

message AnimationData {
    string geckoChannelName = 1;
    string fileName = 2;
    int64 height = 3;
    int64 width = 4;
    int64 rightOffset = 5;
    

}

message PermitJoinGroupBizContent {
    ReplyStatus replyStatus = 1;
    SourceType sourceType = 2;
    
    enum ReplyStatus {
    	REPLY_STATUS_UNKNOWN = 0;
    	REPLY_STATUS_AGREE = 1;
    	REPLY_STATUS_REFUSE_PERSONALLY = 2;
    	REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT = 3;
    	REPLY_STATUS_REFUSE_PROCESSING_INVITATION = 4;
    	REPLY_STATUS_REFUSE_BY_TIME_OUT = 5;
    	REPLY_STATUS_REFUSE_EXCEPTION = 6;
    	REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED = 7;
    	REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE = 8;
    	REPLY_STATUS_REFUSE_IN_MIC_ROOM = 9;
    	REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN = 10;
    	REPLY_STATUS_REFUSE_IN_MULTI_GUEST = 11;
    	REPLY_STATUS_REFUSE_PAUSE_LIVE = 12;
    	REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING = 13;
    	REPLY_STATUS_REFUSE_DRAW_GUESSING = 14;
    	REPLY_STATUS_REFUSE_RANDOM_MATCHING = 15;
    	REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING = 16;
    	REPLY_STATUS_REFUSE_IN_MIC_ROOM_FOR_MULTI_COHOST = 17;
    	REPLY_STATUS_REFUSE_COHOST_FINISHED = 18;
    	REPLY_STATUS_REFUSE_NOT_CONNECTED = 19;
    	REPLY_STATUS_REFUSE_LINK_MIC_FULL = 20;
    	REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE = 21;
    	REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE = 22;
    	REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY = 23;
    	REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST = 24;
    	REPLY_STATUS_REFUSE_TOPIC_PAIRING = 25;
    	REPLY_STATUS_REFUSE_POSITION_CONFLICT = 26;
    	REPLY_STATUS_REFUSE_CONFLICT_QUICK_COHOST = 27;
    	REPLY_STATUS_REFUSE_IN_TAKE_STAGE_PROCESSING = 28;
    }
    enum SourceType {
    	SOURCE_TYPE_UNKNOWN = 0;
    	SOURCE_TYPE_FRIEND_LIST = 1;
    	SOURCE_TYPE_RECOMMEND_LIST = 2;
    	SOURCE_TYPE_RECENT = 3;
    	SOURCE_TYPE_OTHER_FOLLOW = 4;
    	SOURCE_TYPE_QUICK_PAIR = 5;
    	SOURCE_TYPE_ACTIVITY = 6;
    	SOURCE_TYPE_QUICK_RECOMMEND = 7;
    	SOURCE_TYPE_OFFICIAL_CHANNEL = 8;
    	SOURCE_TYPE_BEST_TEAMMATE = 9;
    	SOURCE_TYPE_RESERVATION = 10;
    	SOURCE_TYPE_PAIRING = 11;
    	SOURCE_TYPE_PAIRING_ON_RESERVATION = 12;
    	SOURCE_TYPE_TOPIC_QUICK_PAIR = 13;
    	SOURCE_TYPE_TOPIC_QUICK_RECOMMEND = 14;
    	SOURCE_TYPE_ONLINE_FRIEND_CAPSULE = 15;
    	SOURCE_TYPE_WEEKLY_RANK = 20;
    	SOURCE_TYPE_HOURLY_RANK = 21;
    	SOURCE_TYPE_WEEKLY_RISING = 23;
    	SOURCE_TYPE_WEEKLY_ROOKIE = 24;
    	SOURCE_TYPE_CONNECTION_LIST = 25;
    	SOURCE_TYPE_DAILY_RANK = 26;
    	SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME = 27;
    	SOURCE_TYPE_RESERVATION_BUBBLE = 28;
    	SOURCE_TYPE_PAIRING_BUBBLE = 29;
    	SOURCE_TYPE_LEAGUE_PHASE_ONE = 30;
    	SOURCE_TYPE_LEAGUE_PHASE_TWO = 31;
    	SOURCE_TYPE_LEAGUE_PHASE_THREE = 32;
    	SOURCE_TYPE_DAILY_ROOKIE = 33;
    	SOURCE_TYPE_MAY_KNOW_LIST = 34;
    	SOURCE_TYPE_BANNER = 35;
    	SOURCE_TYPE_FANS_TEAM_RANK = 36;
    	SOURCE_TYPE_SEARCH = 37;
    	SOURCE_TYPE_E_OY_RANK_LIST = 38;
    	SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK = 39;
    	SOURCE_TYPE_CREATOR_CLASS_RANK = 40;
    	SOURCE_TYPE_HISTORY = 41;
    	SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST = 43;
    }

}

message BizRechargeResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	map<int64, CohostUserInfo> userInfos = 1;
    	repeated VirtualWaitingUser virtualWaitingUsers = 2;
    

	}

}

message EventUserInfo {
    int64 userId = 1;
    string avatarUri = 2;
    

}

message CountdownGetContentResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	repeated CountdownContent countdownContents = 1;
    

	}

}

message WalletLiveRewardsRatioImMsgNotification {
    string displayText = 1;
    

}

message LinkerInviteMessageExtra {
    int32 matchType = 1;
    int32 inviteType = 2;
    int32 subType = 3;
    string theme = 4;
    int32 duration = 5;
    int32 layout = 6;
    string tips = 7;
    InviterRivalExtra inviterRivalExtra = 8;
    repeated InviterRivalExtra otherRivalExtra = 9;
    CohostTopic topicInfo = 10;
    string algoRequestId = 11;
    

}

message RechargePopUpContentReplace {
    string replaceValue = 1;
    string valueSchema = 2;
    int32 replaceType = 3;
    

}

message RankUser {
    int64 id = 1;
    string nickname = 3;
    ImageModel avatarThumb = 9;
    int32 secret = 18;
    FollowInfo followInfo = 22;
    Border border = 25;
    string displayId = 38;
    repeated BadgeStruct badgeList = 64;
    string idStr = 1028;
    
    message Border {
    	ImageModel icon = 1;
    	int64 level = 2;
    	string source = 3;
    	ImageModel profileDecorationRibbon = 4;
    	PrivilegeLogExtra borderPrivilegeLogExtra = 5;
    	PrivilegeLogExtra profilePrivilegeLogExtra = 6;
    

	}
    message FollowInfo {
    	int64 followingCount = 1;
    	int64 followerCount = 2;
    	int64 followStatus = 3;
    	int64 pushStatus = 4;
    

	}

}

message WebcastCommentsMessage {
    CommonMessageData baseMessage = 1;
    User user = 2;
    string content = 3;
    string color = 4;
    ImageModel background = 5;
    int64 actionType = 6;
    string actionContent = 7;
    

}

message CountdownGetUserHistoryResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	repeated UserCountdownRecord records = 1;
    

	}

}

message WebcastWeeklyRankRewardMessage {
    int64 userId = 1;
    BorderInfo borderInfo = 2;
    CommonMessageData baseMessage = 3;
    WebcastRoomNotifyMessage notifyMessage = 4;
    

}

message GetStarlingTranslationResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	string brandName = 1;
    	string content = 2;
    

	}

}

message LiveFragmentShowInfo {
    string icon = 1;
    string desc = 2;
    

}

message UserAttr {
    bool isMuted = 1;
    bool isAdmin = 2;
    bool isSuperAdmin = 3;
    int64 muteDuration = 4;
    map<int32, int32> adminPermissions = 5;
    bool hasVotingFunction = 6;
    bool isChannelAdmin = 7;
    

}

message WebcastLinkStateMessage {
    CommonMessageData baseMessage = 1;
    int64 channelId = 2;
    Scene scene = 3;
    int64 version = 4;
    int32 needAck = 5;
    LayoutState layout = 6;
    repeated LinkUserState userStates = 7;
    int64 clientSendTime = 8;
    StateType stateType = 9;
    BackGroundImageState background = 10;
    string wallpaperUrl = 12;
    repeated PosIdentity uiPos = 13;
    
    enum Scene {
    	SCENE_UNKNOWN = 0;
    	SCENE_CO_HOST = 2;
    	SCENE_MULTI_LIVE = 4;
    }
    enum StateType {
    	STATE_TYPE_STATE_INVALID = 0;
    	STATE_TYPE_STATE_LAYOUT = 1;
    	STATE_TYPE_STATE_ONLINE_USER_STATE = 2;
    	STATE_TYPE_STATE_AUDIO_MUTE = 3;
    	STATE_TYPE_STATE_VIDEO_MUTE = 4;
    	STATE_TYPE_STATE_RT_C_CONNECTION = 5;
    	STATE_TYPE_STATE_NETWORK = 6;
    	STATE_TYPE_STATE_BACKGROUND_IMAGE = 7;
    	STATE_TYPE_STATE_SCREEN_ORIENTATION = 8;
    	STATE_TYPE_STATE_AVATAR_ID = 9;
    }

}

message WebcastAccessRecallMessage {
    CommonMessageData baseMessage = 1;
    int32 status = 2;
    int64 duration = 3;
    int64 endTime = 4;
    Scene scene = 5;
    Text notice = 6;
    Text content = 7;
    PunishEventInfo punishInfo = 8;
    

}

message DoodleTemplate {
    int64 id = 1;
    ImageModel image = 2;
    

}

message QuickGift {
    int64 id = 1;
    string name = 2;
    ImageModel image = 3;
    int64 type = 4;
    bool isBoxGift = 5;
    int64 diamondCount = 6;
    bool isBroadcastGift = 7;
    bool isEffectBefview = 8;
    int64 primaryEffectId = 9;
    

}

message ColdStartStatData {
    int32 viewerCount = 1;
    int32 status = 2;
    repeated ColdStartStat stats = 3;
    

}

message FreqLimitGiftOption {
    int64 giftId = 1;
    int64 refreshTimeStamp = 2;
    bool closeGiftPanel = 3;
    bool workSingleAnchor = 4;
    int32 frequencyLimit = 5;
    

}

message WebcastAISummaryMessage {
    CommonMessageData baseMessage = 1;
    Scene scene = 2;
    bool showAtFirst = 3;
    ImageModel icon = 4;
    Text title = 5;
    repeated MultiLangContent multiLangSummaryList = 6;
    string clickTitleSchemeLink = 7;
    string clickContentSchemeLink = 8;
    string longPressAreaSchemeLink = 9;
    PublicAreaMessageCommon publicAreaMessageCommon = 10;
    bool requireStay = 11;
    int64 stayDurationMs = 12;
    

}

message AnchorClientList {
    repeated WaitUser rtcUsers = 1;
    repeated WaitUser applyUsers = 2;
    repeated WaitUser inviteUsers = 3;
    repeated WaitUser readyUsers = 4;
    repeated LinkedUser linkUsers = 5;
    AnchorMessage anchorMessage = 6;
    

}

message NewAnchorGuideConfig {
    int64 anchorId = 1;
    ImageModel icon = 2;
    int32 iconStyle = 3;
    Text title = 4;
    Text button = 5;
    Text text = 6;
    int32 displayDuration = 7;
    NewAnchorEffectParams effectParams = 8;
    int32 displayType = 9;
    

}

message LinkedListChangeContent {
    repeated ListUser listUsers = 1;
    

}

message MsgNotifyComAvoidConfig {
    repeated MsgNotifyComponentAvoidRuleV2 componentRuleListV2 = 1;
    

}

message NewAnchorGuideMsgInfo {
    string messageKey = 1;
    NewAnchorGuideConfig guideConfig = 2;
    

}

message WebcastPerceptionMessage {
    CommonMessageData baseMessage = 1;
    PerceptionDialogInfo dialog = 2;
    PunishEventInfo publicEventInfo = 3;
    int32 endTime = 4;
    bool showViolation = 5;
    Text toast = 6;
    int32 floatStyle = 7;
    Text floatText = 8;
    PerceptionSheetInfo sheet = 9;
    PerceptionDialogIconType floatIconType = 10;
    
    enum PerceptionDialogIconType {
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18;
    }

}

message SubscribeBadge {
    ImageModel originImage = 3;
    ImageModel previewImage = 4;
    bool isCustomized = 5;
    

}

message LinkerInviteContent {
    int64 fromUserId = 1;
    int64 fromRoomId = 2;
    string toRtcExtInfo = 3;
    bool rtcJoinChannel = 4;
    int32 vendor = 5;
    string secFromUserId = 6;
    string toLinkmicIdStr = 7;
    User user = 8;
    int64 requiredMicIdx = 9;
    map<int64, string> rtcExtInfoMap = 10;
    LinkmicMultiLiveEnum multiLiveLayoutEnable = 11;
    MultiLiveAnchorPanelSettings multiLiveSetting = 12;
    string fromLinkmicIdStr = 13;
    InviteTopHostInfo fromTopHostInfo = 16;
    int64 actionId = 17;
    repeated LinkmicUserInfo linkedUsers = 18;
    PerceptionDialogInfo dialogInfo = 19;
    PunishEventInfo punishEventInfo = 20;
    int32 fromRoomAgeRestricted = 21;
    repeated CohostABTestSetting abTestSetting = 23;
    LinkerInviteMessageExtra linkerInviteMsgExtra = 101;
    
    enum LinkmicMultiLiveEnum {
    	LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0;
    	LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1;
    }

}

message UseWaveCard {
    WaveCardInfo cardInfo = 1;
    int64 anchorId = 2;
    Text displayContent = 3;
    

}

message UserInfo {
    int64 user_id = 1;
    string nick_name = 2;
    ImageModel anchorAvatar = 3;
    

}

message GiftPollInfo {
    repeated GiftPollOption giftPollOptions = 1;
    

}

message VideoInfo {
    string resolution = 1;
    

}

message PinCardView {
    int64 duration = 1;
    string endTimestampStr = 2;
    int64 minDurationTime = 3;
    string versionCodeStr = 4;
    GuessText guessTitle = 5;
    string roundIdStr = 6;
    GuessPinType pinCardType = 7;
    bool isAutoPin = 8;
    
    enum GuessPinType {
    	GUESS_PIN_TYPE_PIN = 0;
    	GUESS_PIN_TYPE_UNPIN = 1;
    	GUESS_PIN_TYPE_FROZEN = 2;
    }

}

message QuizImage {
    string url = 1;
    

}

message QuizRewardRule {
    string settlerCode = 1;
    int32 sendAmount = 2;
    repeated RewardItem rewardList = 3;
    
    message RewardItem {
    	string rewardName = 1;
    	string rewardAmount = 2;
    

	}

}

message WebcastRoomVerifyMessage {
    CommonMessageData baseMessage = 1;
    int32 verifyAction = 2;
    string content = 3;
    int64 noticeType = 4;
    bool closeRoom = 5;
    

}

message GuestShowdownUpdateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	GuestShowdownContent playContent = 2;
    

	}

}

message GoodyBagBaseInfo {
    string goodyBagId = 1;
    GoodyBagBiz biz = 2;
    string roomId = 3;
    GoodyBagCommonDetail commonDetail = 4;
    GoodyBagCoinDetail coinDetail = 5;
    
    enum GoodyBagBiz {
    	GOODY_BAG_BIZ_UNKNOWN = 0;
    	GOODY_BAG_BIZ_NORMAL_COIN = 1;
    	GOODY_BAG_BIZ_FANS_CLUB = 2;
    	GOODY_BAG_BIZ_PLATFORM_NORMAL = 100;
    	GOODY_BAG_BIZ_PLATFORM_FANS_CLUB = 101;
    	GOODY_BAG_BIZ_LEVEL_UP_PARTY_REWARD_NORMAL = 110;
    	GOODY_BAG_BIZ_LEVEL_UP_PARTY_REWARD_FANS_CLUB = 111;
    }

}

message FreqLimitGiftInfo {
    repeated FreqLimitGiftOption freqLimitGiftOptions = 1;
    

}

message CustomTabInfo {
    CustomTabs customTabs = 1;
    

}

message ManageViewerSingResp {
    LinkMicCommonResp commonResp = 1;
    RTCExtraInfo permiterExtInfo = 2;
    string permiterLinkMicId = 3;
    MicPositionData applierPos = 4;
    Player applier = 5;
    string applierLinkMicId = 6;
    bool isInvokeLinkmic = 7;
    repeated string linkedUserUiPositions = 8;
    repeated PosIdentity uiPos = 9;
    

}

message GameLiveFragment {
    int64 fragmentId = 1;
    string fragmentIdStr = 2;
    int64 roomId = 3;
    int32 fragmentType = 4;
    string vid = 5;
    string downloadUrl = 6;
    string coverUrl = 7;
    int64 ownerUserId = 8;
    int64 startTime = 9;
    int64 endTime = 10;
    string extra = 11;
    int64 createTime = 12;
    int64 updateTime = 13;
    string title = 14;
    int32 status = 15;
    int64 markTime = 16;
    int64 opTime = 17;
    string streamUrl = 18;
    string previewPicUrl = 19;
    string roomIdStr = 20;
    string ownerUserIdStr = 21;
    int64 replayCreateTime = 22;
    int32 isEdit = 23;
    repeated Sprite spriteList = 24;
    VideoMetaInfo mp4VideoMetaInfo = 25;
    int32 encodeStatus = 26;
    bool isMuted = 27;
    LiveFragmentShowInfo showInfo = 28;
    int64 replayRelativeTime = 29;
    

}

message WebcastGuideTaskMessage {
    CommonMessageData baseMessage = 1;
    string bizName = 2;
    repeated int32 operationTypes = 3;
    Text remindAreaText = 5;
    string remindType = 6;
    int64 displaySecond = 7;
    int32 taskType = 8;
    

}

message InviterRivalExtra {
    TextType textType = 1;
    string text = 2;
    string label = 3;
    int32 userCount = 4;
    ImageModel avatarThumb = 5;
    string displayId = 6;
    AuthenticationInfo authenticationInfo = 7;
    string nickname = 8;
    int64 followStatus = 9;
    Hashtag mHashtag = 10;
    int64 userId = 12;
    bool isBestTeammate = 13;
    OptPairInfo optPairInfo = 14;
    int64 followerCount = 15;
    

}

message EcommerceEntrance {
    EntranceType entranceType = 1;
    CreatorType creatorType = 2;
    string schema = 3;
    ShopEntranceInfo shopEntranceInfo = 4;
    ShowcaseEntranceInfo showcaseEntranceInfo = 5;
    ViewVersion viewVersion = 6;
    
    enum EntranceType {
    	ENTRANCE_TYPE_PROFILE = 0;
    	ENTRANCE_TYPE_SHOWCASE = 1;
    	ENTRANCE_TYPE_SHOP = 2;
    }
    enum CreatorType {
    	CREATOR_TYPE_UNDEFINED = 0;
    	CREATOR_TYPE_OFFICIAL = 1;
    	CREATOR_TYPE_MARKET = 2;
    	CREATOR_TYPE_NORMAL = 3;
    }
    enum ViewVersion {
    	VIEW_VERSION_UNKNOWN = 0;
    	VIEW_VERSION_STAR_SHOP = 1;
    }
    message SellingPoint {
    	string showText = 1;
    	LiveSellingPointType sellingPointType = 2;
    
    	enum LiveSellingPointType {
    		LIVE_SELLING_POINT_TYPE_UNDEFINED = 0;
    		LIVE_SELLING_POINT_TYPE_QUALITY = 1;
    		LIVE_SELLING_POINT_TYPE_SOLD = 2;
    		LIVE_SELLING_POINT_TYPE_TRUST_BETTER_THAN_OTHER_SHOP = 3;
    		LIVE_SELLING_POINT_TYPE_TRUST_REPLY_IN_TIME = 4;
    		LIVE_SELLING_POINT_TYPE_TRUST_CREATE_SHIP_IN_TIME = 5;
    		LIVE_SELLING_POINT_TYPE_TRUST_POSITIVE_REVIEW_RATE = 6;	
    }

	}
    message ShopLabelImage {
    	int32 height = 1;
    	int32 width = 2;
    	string minetype = 3;
    	string thumbUri = 4;
    	repeated string thumbUriList = 5;
    	string uri = 6;
    	repeated string urlList = 7;
    	string color = 8;
    

	}
    message StoreOfficialLabel {
    	ShopLabelImage labelImageLight = 1;
    	ShopLabelImage labelImageDark = 2;
    	StoreBrandLabelType labelType = 3;
    	string labelTypeStr = 4;
    
    	enum StoreBrandLabelType {
    		STORE_BRAND_LABEL_TYPE_BLUE_V = 3;
    		STORE_BRAND_LABEL_TYPE_TOP_CHOICE = 4;
    		STORE_BRAND_LABEL_TYPE_MALL = 5;
    		STORE_BRAND_LABEL_TYPE_NONE = 0;
    		STORE_BRAND_LABEL_TYPE_OFFICIAL = 1;
    		STORE_BRAND_LABEL_TYPE_AUTHORIZED = 2;	
    }

	}
    message StoreLabel {
    	StoreOfficialLabel officialLabel = 1;
    	bool isBytemall = 2;
    

	}
    message ShopEntranceInfo {
    	string shopId = 1;
    	string shopName = 2;
    	string shopRating = 3;
    	StoreLabel storeLabel = 4;
    	string formatSoldCount = 5;
    	int64 soldCount = 6;
    	int32 expRatePercentile = 7;
    	string expRateTopDisplay = 8;
    	int32 rateDisplayStyle = 9;
    	bool showRateNotApplicable = 10;
    	repeated SellingPoint sellingPoint = 11;
    

	}
    message ShowcaseEntranceInfo {
    	string formatSoldCount = 1;
    	int64 soldCount = 2;
    	string showcaseName = 3;
    	repeated SellingPoint sellingPoint = 11;
    

	}

}

message MultiLiveUpdateUserSettingContent {
    MultiLiveAnchorPanelSettings multiLiveAnchorPanelSettings = 1;
    

}

message KeywordsLibrary {
    string locale = 1;
    repeated GiftKeywords giftKeywords = 2;
    bool hasSpace = 3;
    

}

message ParticipateThresholdSelected {
    ParticipateThresholdType type = 1;
    int64 value = 2;
    
    enum ParticipateThresholdType {
    	PARTICIPATE_THRESHOLD_TYPE_PARTICIPATE_THRESHOLD_UNKNOWN = 0;
    	PARTICIPATE_THRESHOLD_TYPE_PARTICIPATE_THRESHOLD_ALL_VIEWER = 1;
    	PARTICIPATE_THRESHOLD_TYPE_PARTICIPATE_THRESHOLD_FANS_CLUB = 2;
    }

}

message PopCardInfo {
    int64 popProductId = 1;
    int32 popCardType = 2;
    

}

message CommentQualityScore {
    string version = 1;
    int64 score = 2;
    

}

message MGetABInfosResp {
    repeated ABInfos infos = 1;
    LinkMicCommonResp commonResp = 2;
    

}

message WebcastEmoteChatMessage {
    CommonMessageData baseMessage = 1;
    User user = 2;
    repeated EmoteModel emoteList = 3;
    MsgFilter msgFilter = 4;
    UserIdentity userIdentity = 5;
    

}

message StarCommentItem {
    StarCommentMessage starComment = 1;
    string coins = 2;
    string roomUserCount = 3;
    bool forceInsert = 4;
    int32 startCommentStatus = 5;
    int64 serverToShowTimestampMs = 6;
    

}

message StarCommentPurchasePageResponse {
    Data data = 1;
    
    message Data {
    	int32 purchasePageStatus = 1;
    	string notAllowReason = 2;
    	StarCommentQueue queue = 3;
    	int32 wordLimit = 4;
    	int64 errorCode = 5;
    	StarCommentQueue originalQueue = 6;
    	int64 baselinePrice = 7;
    	PrivilegePrompt descInfo = 8;
    

	}

}

message PlayTogetherPermitNoticeContent {
    PlayTogetherPermitType permitType = 1;
    
    enum PlayTogetherPermitType {
    	PLAY_TOGETHER_PERMIT_TYPE_UNKNOWN = 0;
    	PLAY_TOGETHER_PERMIT_TYPE_ACCEPT = 1;
    	PLAY_TOGETHER_PERMIT_TYPE_REJECT = 2;
    }

}

message RoomSticker {
    string name = 2;
    ImageModel image = 7;
    ImageModel ninePatchImage = 8;
    int32 topLeftHeight = 13;
    int32 topLeftWidth = 14;
    int32 bottomRightHeight = 15;
    int32 bottomRightWidth = 16;
    int32 reviewStatus = 17;
    bool edited = 18;
    RoomStickerAuditInfo auditInfo = 19;
    string starlingKey = 20;
    string extra = 21;
    

}

message GroupLiveMember {
    int64 userId = 1;
    string nickname = 3;
    ImageModel avatar = 4;
    

}

message AskDemoInfo {
    User user = 1;
    Product product = 2;
    int32 askDemoCount = 3;
    int32 productIndex = 4;
    

}

message WebcastVideoLiveCouponRcmdMessage {
    CommonMessageData baseMessage = 1;
    int64 rcmdCouponId = 2;
    

}

message WebcastVideoLiveGoodsRcmdMessage {
    CommonMessageData baseMessage = 1;
    int64 rcmdGoodsId = 2;
    

}

message EventCard {
    LiveEventInfo event = 1;
    int64 cardStartTime = 2;
    string cardIconUrl = 3;
    

}

message TakeTheStageOrderInfo {
    repeated AnchorInfo anchors = 1;
    CompetitionUserBase initiator = 2;
    SwitchTurnReason switchTurnReason = 3;
    
    enum SwitchTurnReason {
    	SWITCH_TURN_REASON_UNKNOWN = 0;
    	SWITCH_TURN_REASON_USER_CLICK = 1;
    	SWITCH_TURN_REASON_USER_LEFT = 2;
    }
    message AnchorInfo {
    	int64 userId = 1;
    

	}

}

message WebcastKaraokeSwitchMessage {
    CommonMessageData baseMessage = 1;
    int32 type = 2;
    int32 status = 3;
    

}

message Question {
    int64 questionId = 1;
    string content = 2;
    int32 answerStatus = 3;
    int64 createTime = 4;
    User user = 5;
    int32 createFrom = 20;
    int32 answerFrom = 21;
    

}

message UnifiedBannerData {
    string title = 1;
    string subTitle = 3;
    ImageModel image = 4;
    string schema = 5;
    map<string, string> metrics = 6;
    string frequencyKey = 7;
    

}

message BattleABTestSetting {
    int64 uid = 1;
    BattleABTestList abTestList = 2;
    

}

message CreateInfoPunishmentMessage {
    int64 banTime = 1;
    int64 banDuration = 2;
    string detailUrl = 3;
    int32 source = 4;
    

}

message GiftPanelBanner {
    Text displayText = 1;
    ImageModel leftIcon = 2;
    string schemaUrl = 3;
    repeated string bgColors = 5;
    string bannerLynxUrl = 6;
    int32 bannerPriority = 7;
    string bannerLynxExtra = 8;
    ImageModel bgImage = 9;
    

}

message GameBannerContainer {
    repeated GameBanner bannerList = 1;
    

}

message HotRoomData {
    string business = 1;
    int64 roomId = 2;
    bool isHot = 3;
    int32 action = 4;
    int64 timestamp = 6;
    repeated HotRoomState hotRoomState = 7;
    
    message HotRoomState {
    	int32 reason = 1;
    	int64 enterTs = 2;
    

	}

}

message ConvertNoticeboardMaterialInfo {
    string backgroundImageUrl = 1;
    string coverImageUrl = 2;
    string configJsonUrl = 3;
    string title = 4;
    int64 textCharCount = 5;
    int64 textBoxCount = 6;
    map<string, string> starlingMap = 7;
    string thumbCoverImageUrl = 8;
    

}

message BaLeadsGenInfo {
    bool leadsGenPermission = 1;
    string leadsGenModel = 2;
    

}

message BattlePromptElem {
    string promptFieldKey = 1;
    string promptFieldValue = 2;
    

}

message BizPermitParams {
    int64 effectiveSeconds = 1;
    bool noticeConfirmed = 2;
    

}

message SceneRestriction {
    repeated int64 normalHiddenGids = 1;
    repeated int64 matchHiddenGids = 2;
    repeated int64 cohostHiddenGids = 3;
    repeated int64 multiguestHiddenGids = 4;
    

}

message SponsorshipInfo {
    int64 giftId = 1;
    int64 sponsorId = 2;
    bool becomeSponsor = 3;
    bool lightGiftUp = 4;
    string unlightedGiftIcon = 5;
    int64 sponsorCount = 6;
    int64 currentCount = 7;
    int64 leftCountToSponsor = 8;
    bool canSponsor = 9;
    bool giftGalleryClickSponsor = 10;
    int64 goalCount = 11;
    int64 galleryGiftsCollectedCount = 12;
    string firstTitlePageSchemeUrl = 13;
    int64 galleryGiftsCount = 14;
    bool swapped = 15;
    bool becomeAllSponsored = 21;
    

}

message UpdateGuestSettingParams {
    int32 flowDistribute = 1;
    int32 rankListShowAction = 2;
    int32 guestCameraStatus = 3;
    int32 distributionStatus = 4;
    int32 guestCameraMirrorStatus = 5;
    int32 guestHearYourVoiceStatus = 6;
    int64 channelId = 1001;
    int64 roomId = 1002;
    int64 liveId = 1003;
    int64 anchorId = 1004;
    

}

message WallpaperEndResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	WallpaperContent wallpaperContent = 2;
    

	}

}

message AutoMatchBanner {
    Text mainGuideText = 1;
    Text subGuideText = 2;
    Text buttonText = 3;
    

}

message NoticeboardReviewInfo {
    string mediaNodeId = 1;
    int32 reviewStatus = 2;
    

}

message RemuxInfo {
    int32 remuxStatus = 1;
    int64 estimatedSize = 2;
    string failReason = 3;
    VideoMetaInfo videoMeta = 4;
    

}

message Stream {
    int32 size = 1;
    

}

message CohostABTestSetting {
    int64 key = 1;
    CohostABTestList value = 2;
    

}

message SubQueue {
    string id = 1;
    int32 type = 2;
    int32 status = 3;
    AuditStatus auditStatus = 4;
    string anchorId = 5;
    string roomId = 6;
    int64 createTimeSec = 7;
    string title = 8;
    int64 waitingCount = 9;
    int64 totalCount = 10;
    AuditInfo violationInfo = 11;
    

}

message FlareInfo {
    bool isFlare = 1;
    string taskId = 2;
    

}

message AckStateReq {
    StateReqCommon common = 1;
    int64 msgId = 2;
    int32 msgType = 3;
    int64 clientReceiveTime = 4;
    

}

message WebcastSocialMessage {
    CommonMessageData baseMessage = 1;
    User user = 2;
    int64 shareType = 3;
    int64 action = 4;
    string shareTarget = 5;
    int64 followCount = 6;
    int64 shareDisplayStyle = 7;
    int32 shareCount = 8;
    PublicAreaMessageCommon publicAreaMessageCommon = 9;
    string signature = 10;
    string signatureVersion = 11;
    int64 showDurationMs = 12;
    

}

message WebcastPrivilegeAdvanceMessage {
    CommonMessageData baseMessage = 1;
    WebcastRoomNotifyMessage notify = 2;
    Scene scene = 3;
    DisplayControl control = 4;
    ImageModel leftIcon = 5;
    ImageModel rightIcon = 6;
    ImageModel background = 7;
    string subType = 8;
    PrivilegeLogExtra privilegeLogExtra = 100;
    

}

message RTCInfoExtra {
    string version = 1;
    

}

message InviteLiveEventUserResponse {
    ResponseData data = 1;
    
    message ResponseData {
    

	}

}

message WebcastLinkMicBattlePunishFinish {
    CommonMessageData baseMessage = 1;
    int64 channelId = 2;
    int64 opUid = 3;
    Reason reason = 4;
    int64 battleId = 5;
    BattleSetting battleSettings = 6;
    
    enum Reason {
    	REASON_TIME_UP = 0;
    	REASON_CUT_SHORT = 1;
    }

}

message WebcastBoostedUsersMessage {
    CommonMessageData baseMessage = 1;
    int64 totalCnt = 2;
    FlareBoostedUsers flare = 3;
    repeated PromoteAdBoostedUsers promoteAds = 4;
    

}

message PartnershipGameEvent {
    int64 gameTagId = 1;
    bool anchorHasJoined = 2;
    string eventDetailUrl = 3;
    string gameName = 4;
    string gameIdStr = 5;
    string taskIdStr = 6;
    string eventIdStr = 7;
    int32 eventType = 8;
    int32 incentivetype = 9;
    bool anchorHasShowed = 10;
    string gameIcon = 11;
    

}

message CancelInviteContent {
    Player inviter = 1;
    string inviterLinkMicId = 2;
    string inviteeLinkMicId = 3;
    int64 inviteSeqId = 4;
    Player invitee = 5;
    

}

message WebcastRankToastMessage {
    CommonMessageData baseMessage = 1;
    RankToast toast = 2;
    
    message RankToast {
    	int64 userId = 1;
    	bool shouldToast = 2;
    

	}

}

message WebcastUnauthorizedMemberMessage {
    CommonMessageData baseMessage = 1;
    int32 action = 2;
    Text nickNamePrefix = 3;
    string nickName = 4;
    Text enterText = 5;
    PublicAreaMessageCommon publicAreaCommon = 6;
    

}

message KaraokeInfo {
    KaraokeSong song = 1;
    bool karaokeStatus = 2;
    bool karaokeLyricStatus = 3;
    bool displayKaraoke = 4;
    

}

message FYPCommerceStruct {
    PreviewProductCardInfo previewProductCardInfo = 1;
    int64 productNum = 2;
    int64 commercePermission = 3;
    int64 popProductId = 4;
    string oecLivePreviewRoomData = 5;
    

}

message WebcastRankUpdateMessage {
    CommonMessageData baseMessage = 1;
    bool loop = 7;
    bool animationLoopForOff = 8;
    repeated UnionAnimationInfo unionAnimation = 9;
    repeated RankListTabInfo tabInfo = 10;
    
    enum EntranceGroupType {
    	ENTRANCE_GROUP_TYPE_DEFAULT = 0;
    	ENTRANCE_GROUP_TYPE_GIFT = 1;
    	ENTRANCE_GROUP_TYPE_E_COMMERCE = 2;
    	ENTRANCE_GROUP_TYPE_GAME = 3;
    }
    enum OpType {
    	OP_TYPE_DEFAULT = 0;
    	OP_TYPE_ADD = 1;
    	OP_TYPE_REMOVE = 2;
    	OP_TYPE_RELOAD = 3;
    	OP_TYPE_BASIC_EFFECT = 4;
    }

}

message NewAnchorEffectParams {
    string effectPanel = 1;
    string resourceId = 2;
    string categoryId = 3;
    string tabKey = 4;
    

}

message GameRevenueTipsMessage {
    int64 ruleId = 1;
    Text tipsText = 2;
    repeated string fillinText = 3;
    GameAction action = 4;
    int64 priority = 5;
    int64 showDurationInapp = 6;
    int64 showDurationOutapp = 7;
    Text buttonText = 8;
    Text titleText = 9;
    CommonMessageData common = 100;
    

}

message UGGiftTaskInfo {
    bool showBannerEntry = 1;
    int32 ugTaskStatus = 2;
    int64 rewardUgPoints = 3;
    int64 taskStartTime = 4;
    int64 taskPeriodDays = 5;
    int32 ugTaskFlow = 6;
    int64 preRewardUgPoints = 7;
    int32 taskBizType = 8;
    string schemaUrl = 9;
    int64 taskEndTime = 10;
    

}

message WebcastCommentTrayMessage {
    CommonMessageData baseMessage = 1;
    string content = 2;
    int64 contentType = 3;
    int64 count = 4;
    int64 chatTime = 5;
    int64 trayId = 6;
    

}

message RechargeResp {
    RTCExtraInfo myInfo = 1;
    string myLinkmicId = 2;
    string targetLinkmicId = 3;
    MicPositionData targetPos = 4;
    repeated RTCExtraInfo groupExtInfo = 5;
    GroupChannelAllUser groupUser = 6;
    LinkMicCommonResp commonResp = 7;
    repeated ContentPosition contentPos = 8;
    BizRechargeResponse cohostRespExtra = 9527;
    

}

message ECommerceMessage {
    int32 actionType = 2;
    int32 liveProductNumber = 3;
    PopProduct popProduct = 4;
    TraceInfo traceInfo = 5;
    repeated HotTag hotTags = 6;
    AtmosphereTagInfo atmosphereTagInfo = 7;
    LivePermissionInfo livePermissionInfo = 8;
    ProductSnapShot productSnapShot = 9;
    int64 pinCardDelayTime = 10;
    repeated FlashSaleAtmosphereInfo flashSaleAtmosphereInfo = 11;
    int32 cardType = 12;
    BillboardInfo billboardInfo = 13;
    BillboardDisplayResult billboardDisplayResult = 14;
    repeated DispersionInfo dispersionInfo = 15;
    PromotionInfo promotionInfo = 16;
    CampaignBannerDisplayResult campaignBannerDisplayResult = 17;
    CampaignBannerDisplay campaignBannerDisplay = 18;
    RefreshLiveBagInfo refreshLiveBagInfo = 19;
    OecLiveShoppingMessageV2 oecLiveShoppingMessageV2 = 100;
    

}

message NotifyHighlightInfo {
    repeated NotifyHighlightContent contents = 1;
    string color = 2;
    

}

message WebcastLikeMessage {
    CommonMessageData baseMessage = 1;
    int32 count = 2;
    int64 total = 3;
    int32 color = 4;
    User user = 5;
    string icon = 6;
    repeated ImageModel icons = 7;
    repeated SpecifiedDisplayText specifiedDisplayText = 8;
    int64 effectCnt = 9;
    repeated LikeEffect likeEffect = 10;
    PublicAreaMessageCommon publicAreaMessageCommon = 11;
    int64 roomMessageHeatLevel = 12;
    

}

message ShortTouchPreviewSetting {
    string previewSchema = 1;
    int64 previewShowTime = 2;
    ImageModel previewImage = 3;
    string amountText = 4;
    string discountText = 5;
    

}

message CampaignBannerData {
    string title = 1;
    ImageModel image = 2;
    string url = 3;
    

}

message BizInviteResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	WebcastPerceptionMessage hostPerceptionInfo = 1;
    

	}

}

message LiveFilterMsgRule {
    string name = 1;
    int32 rule = 2;
    FilterMsgRuleParamRandom random = 3;
    

}

message WebcastMsgDetectMessage {
    CommonMessageData baseMessage = 1;
    int32 detectType = 2;
    TriggerCondition triggerCondition = 3;
    TimeInfo timeInfo = 4;
    int32 triggerBy = 5;
    string fromRegion = 6;
    
    message TimeInfo {
    	int64 clientStartMs = 1;
    	int64 apiRecvTimeMs = 2;
    	int64 apiSendToGoimMs = 3;
    

	}
    message TriggerCondition {
    	bool uplinkDetectHTTP = 1;
    	bool uplinkDetectWebsocket = 2;
    	bool detectP2PMsg = 3;
    	bool detectRoomMsg = 4;
    	bool httpOptimize = 5;
    

	}

}

message BizPermitJoinGroupParams {
    ReplyStatus replyStatus = 1;
    int32 sourceType = 2;
    string algoRequestId = 3;
    CohostStreamConfig streamConfig = 4;
    

}

message QuizAnchorInfo {
    string uid = 1;
    string userName = 2;
    string roomId = 3;
    string category = 4;
    string description = 5;
    string avatar = 6;
    string backgroundImage = 7;
    string extra = 8;
    

}

message EOYBanner {
    int64 round = 1;
    string title = 2;
    string subtitle = 3;
    StreakInfo streakInfo = 4;
    int64 startTime = 5;
    int64 endTime = 6;
    string announcementStarlingKey = 7;
    string description = 8;
    string schema = 9;
    GradeInfo gradeInfo = 10;
    
    message GradeInfo {
    	int64 level = 1;
    	int64 progress = 2;
    	int64 target = 3;
    

	}
    message MileStone {
    	int64 targetValue = 1;
    	int64 bonusTimes = 2;
    

	}
    message StreakInfo {
    	StreakType streakType = 1;
    	int64 progress = 2;
    	repeated MileStone mileStones = 3;
    
    	enum StreakType {
    		STREAK_TYPE_UNKNOWN = 0;
    		STREAK_TYPE_COMBO = 1;
    		STREAK_TYPE_WIN = 2;	
    }

	}

}

message Skin {
    SkinHostAccount account = 1;
    SkinDrawerEntrance drawerEntrance = 2;
    Scene scene = 3;
    

}

message WebcastAnchorReminderWordMessage {
    CommonMessageData baseMessage = 1;
    AnchorReminderWordInfoMsg reminderWordInfo = 2;
    

}

message FansScoreRule {
    int32 level = 1;
    int64 levelMinScore = 2;
    int64 levelMaxScore = 3;
    

}

message NoticeboardTemplate {
    int64 noticeboardTemplateId = 1;
    string mediaNodeId = 2;
    ConvertNoticeboardMaterialInfo convertNoticeboardMaterialInfo = 3;
    int32 privateStatus = 4;
    int32 reviewStatus = 5;
    SimpleUser authorInfo = 6;
    

}

message MultiLiveUserApplyPermission {
    int32 multiLiveApplyPermission = 1;
    int64 applierSortSetting = 2;
    int64 applierSortGiftScoreThreshold = 3;
    int64 multiGuestAllowRequestFromFriends = 4;
    int64 multiGuestAllowRequestFromFollowers = 5;
    int64 multiGuestAllowRequestFromOthers = 6;
    

}

message AtmosphereInfo {
    repeated Tag tags = 1;
    
    message Tag {
    	int32 type = 1;
    	string desc = 2;
    	int64 count = 3;
    	int32 status = 4;
    

	}

}

message AnchorPreFinishData {
    ConfirmBox confirmBox = 1;
    int32 finishType = 2;
    map<string, string> metricsMap = 3;
    
    message ConfirmBox {
    	string title = 1;
    	int64 value = 2;
    	string schemaTitle = 3;
    	string uniqueId = 4;
    	string content = 5;
    	string confirmText = 6;
    	string cancelText = 7;
    	string schemaJumpLink = 8;
    

	}

}

message GuestShowdownContent {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 playId = 3;
    int32 playStatus = 4;
    int64 version = 5;
    int64 partyStartTime = 6;
    int64 punishmentStartTime = 7;
    GuestShowdownConfig playConfig = 8;
    repeated GuestShowdownUser runningPlayUsers = 9;
    repeated GuestShowdownUser leavePlayUsers = 10;
    string streamId = 11;
    

}

message RoomLinkInfo {
    int64 channelId = 1;
    ChannelInfo channelInfo = 2;
    int64 rivalAnchorId = 5;
    repeated int64 audienceIdList = 6;
    repeated User showUserList = 7;
    int64 followedCount = 8;
    repeated User linkedUsers = 9;
    BattleInfoResponse battleInfo = 10;
    int64 MultiLiveType = 11;
    CohostTopic topicInfo = 53;
    TopicSessionStatus topicStatus = 54;
    CompetitionInfo competitionInfo = 60;
    

}

message RankTabInfo {
    ProfitRankType rankType = 1;
    Text title = 3;
    int64 listLynxType = 4;
    
    enum ProfitRankType {
    	PROFIT_RANK_TYPE_DAILY_ROOKIE = 14;
    	PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1;
    	PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5;
    	PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6;
    	PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7;
    	PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8;
    	PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9;
    	PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11;
    	PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12;
    	PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22;
    	PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13;
    	PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25;
    }

}

message UserPosition {
    int64 uid = 1;
    MicPositionData position = 2;
    

}

message BizPermitJoinGroupResponse {
    ResponseData data = 1;
    
    message ResponseData {
    

	}

}

message BattleTaskSettle {
    Result taskResult = 1;
    int64 rewardStartTime = 2;
    int64 rewardStartTimestamp = 3;
    
    enum Result {
    	RESULT_SUCCEED = 0;
    	RESULT_FAILED = 1;
    	RESULT_BOTH_SUCCEED = 2;
    }

}

message RTCMixBase {
    int32 bitrate = 1;
    

}

message CapsuleBizParamsGamingModeratorsCommentGuide {
    User user = 1;
    Text replyMsgText = 2;
    RecommendComment recommendText = 3;
    

}

message GiftListResult {
    GiftsInfo giftsInfo = 1;
    repeated Gift giftList = 2;
    repeated GiftPage giftPages = 3;
    repeated DoodleTemplate doodleTemplates = 4;
    string responseHash = 5;
    int32 refreshStatus = 6;
    string coldGiftHash = 7;
    bool isFullGiftData = 8;
    repeated string hotFields = 9;
    GiftConfigs giftConfigs = 10;
    repeated int32 tags = 11;
    DynamicRestriction dynamicRestriction = 12;
    map<int64, int64> beaconBubblePriorities = 13;
    map<int64, int64> giftLabelPriorities = 14;
    string strategyToken = 100;
    PanelRefreshData panelRefreshData = 101;
    

}

message LinkerInfo {
    repeated UserInfo linkedUsers = 1;
    bool inQuickPairing = 2;
    

}

message WebcastPaidContentLiveShoppingMessage {
    CommonMessageData baseMessage = 1;
    int32 actionType = 2;
    int32 liveSeriesNumber = 3;
    PopSeries popSeries = 4;
    TimeTag timeTag = 5;
    

}

message UseTop2Card {
    Top2CardInfo cardInfo = 1;
    int64 anchorId = 2;
    Text displayContent = 3;
    

}

message LetViewerSingResp {
    LinkMicCommonResp commonResp = 1;
    RTCExtraInfo applierExtInfo = 2;
    string applierLinkMicId = 3;
    bool isOnlyAddSong = 4;
    BizApplyResponse multiGuestRespExtra = 9527;
    

}

message WebcastRoomUserSeqMessage {
    CommonMessageData baseMessage = 1;
    repeated Contributor mContributors = 2;
    int64 mTotal = 3;
    string popStr = 4;
    repeated Contributor seats = 5;
    int64 mPopularity = 6;
    int64 totalUser = 7;
    int64 anonymous = 8;
    

}

message UseTop3Card {
    Top3CardInfo cardInfo = 1;
    int64 anchorId = 2;
    Text displayContent = 3;
    

}

message CompetitionInitiate {
    CompetitionInitiateInfo initiateInfo = 1;
    map<int64, int32> giftPermissions = 2;
    

}

message PreviewRoom {
    int64 roomId = 1;
    int64 liveId = 2;
    string identity = 3;
    string cursor = 4;
    int64 accountType = 5;
    int64 enterUniqId = 6;
    

}

message RandomGiftBubble {
    string bubbleDisplayText = 1;
    ImageModel image = 2;
    

}

message WebcastLinkMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    int64 channelId = 3;
    Scene scene = 4;
    LinkerInviteContent inviteContent = 5;
    LinkerReplyContent replyContent = 6;
    LinkerCreateContent createContent = 7;
    LinkerCloseContent closeContent = 8;
    LinkerEnterContent enterContent = 9;
    LinkerLeaveContent leaveContent = 10;
    LinkerCancelContent cancelContent = 11;
    LinkerKickOutContent kickOutContent = 12;
    LinkedListChangeContent linkedListChangeContent = 13;
    LinkerUpdateUserContent updateUserContent = 14;
    LinkerWaitingListChangeContent waitingListChangeContent = 15;
    LinkerMuteContent muteContent = 16;
    LinkerRandomMatchContent randomMatchContent = 17;
    MultiLiveUpdateUserSettingContent multiLiveUpdateUserSettingContent = 18;
    LinkerMicIdxUpdateContent micIdxUpdateContent = 19;
    LinkerListChangeContent mListChangeContent = 20;
    CohostListChangeContent cohostListChangeContent = 21;
    LinkerMediaChangeContent mediaChangeContent = 22;
    LinkerAcceptNoticeContent acceptNoticeContentMessage = 23;
    LinkerSysKickOutContent sysKickOutContent = 101;
    LinkmicUserToastContent userToastContent = 102;
    string extraStr = 200;
    int64 expireTimestamp = 201;
    string transferExtra = 202;
    

}

message MultiBattleFinishResponse {
    map<int64, BattleTeamResult> teamBattleResult = 1;
    map<int64, BattleTeamUserArmies> teamArmies = 2;
    BattleSetting battleSettings = 3;
    bool hasTeamMatchMvpSfx = 4;
    

}

message WebcastBarrageMessage {
    CommonMessageData baseMessage = 1;
    BarrageEvent event = 2;
    BarrageType msgType = 3;
    ImageModel icon = 4;
    int64 duration = 6;
    ImageModel backGround = 7;
    ImageModel rightIcon = 8;
    int32 displayConfig = 9;
    int64 galleryGiftId = 10;
    Scene scene = 11;
    DisplayControl control = 12;
    RightLabel rightLabel = 13;
    bool useMarquee = 14;
    ShowType showType = 15;
    BadgeStruct badge = 16;
    RenderType renderType = 17;
    IconDisplayType leftIconDisplayType = 18;
    ImageModel ribbonAnimation = 19;
    AnimationData animationData = 20;
    string hybridUrl = 21;
    string schema = 22;
    string subType = 23;
    Text commonBarrageContent = 24;
    BarrageTypeUserGradeParam userGradeParam = 100;
    BarrageTypeFansLevelParam fansLevelParam = 101;
    BarrageTypeSubscribeGiftParam subscribeGiftParam = 102;
    PrivilegeLogExtra privilegeLogExtra = 103;
    BarrageTypeGiftGalleryParam giftGalleryParams = 104;
    
    enum BarrageType {
    	BARRAGE_TYPE_UNKNOWN = 0;
    	BARRAGE_TYPE_E_COM_ORDERING = 1;
    	BARRAGE_TYPE_E_COM_BUYING = 2;
    	BARRAGE_TYPE_NORMAL = 3;
    	BARRAGE_TYPE_SUBSCRIBE = 4;
    	BARRAGE_TYPE_EVENT_VIEW = 5;
    	BARRAGE_TYPE_EVENT_REGISTERED = 6;
    	BARRAGE_TYPE_SUBSCRIBE_GIFT = 7;
    	BARRAGE_TYPE_USER_UPGRADE = 8;
    	BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION = 9;
    	BARRAGE_TYPE_FANS_LEVEL_UPGRADE = 10;
    	BARRAGE_TYPE_FANS_LEVEL_ENTRANCE = 11;
    	BARRAGE_TYPE_GAME_PARTNERSHIP = 12;
    	BARRAGE_TYPE_GIFT_GALLERY = 13;
    	BARRAGE_TYPE_E_COM_BOUGHT = 14;
    	BARRAGE_TYPE_COMMON_BARRAGE = 100;
    }
    enum ShowType {
    	SHOW_TYPE_NORMAL = 0;
    	SHOW_TYPE_FADE_IN_OUT = 1;
    }
    enum RenderType {
    	RENDER_TYPE_NATIVE = 0;
    	RENDER_TYPE_HYBRID = 1;
    	RENDER_TYPE_ALPHA = 2;
    }
    enum IconDisplayType {
    	ICON_DISPLAY_TYPE_IMAGE = 0;
    	ICON_DISPLAY_TYPE_BADGE = 1;
    }
    message BarrageEvent {
    	string eventName = 1;
    	map<string, string> params = 2;
    

	}
    message RightLabel {
    	string backgroundColor = 1;
    	Text content = 2;
    	int64 height = 3;
    

	}

}

message WebcastGiftNoticeMessage {
    CommonMessageData baseMessage = 1;
    GiftNotice giftNotice = 2;
    

}

message LiveStudioPermissionStatus {
    int32 permissionType = 1;
    int64 validEndTime = 2;
    int64 validStartTime = 3;
    

}

message WebcastBizStickerMessage {
    CommonMessageData baseMessage = 1;
    repeated RoomSticker bizSticker = 2;
    

}

message BizJoinChannelResponse {
    BizJoinChannelResponseData responseData = 1;
    

}

message QuizQuestionOption {
    string optionId = 2;
    string content = 3;
    repeated QuizImage image = 4;
    

}

message AvatarImageSelectTips {
    string title = 1;
    string desc = 2;
    repeated AvatarImageCase examples = 3;
    repeated string rules = 4;
    

}

message WebcastNewAnchorGuideMessage {
    CommonMessageData baseMessage = 1;
    NewAnchorGuideMsgInfo guideMsg = 2;
    

}

message LiveScenario {
    bool enableLiveVideo = 1;
    bool enableLiveThirdParty = 2;
    bool enableLiveScreenshot = 3;
    bool enableSocialLive = 4;
    bool enableLiveStudio = 5;
    bool enablePicoShow = 6;
    bool enablePicoGame = 7;
    bool enablePicoVirtual = 8;
    bool enableLiveVoice = 9;
    bool enableStreamelements = 11;
    bool enableRestream = 12;
    bool enableLiveConsole = 13;
    

}

message EffectSearchResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	repeated EffectStruct effects = 1;
    	int64 nextOffset = 2;
    	bool hasMore = 3;
    	repeated EffectStruct collections = 4;
    

	}

}

message CancelApplyContent {
    Player applicant = 1;
    string applicantLinkMicId = 2;
    

}

message AnchorGrowLevelImMsgV2 {
    int32 msgType = 1;
    AnchorGrowLevelImMsgNotification notificationData = 2;
    

}

message StarCommentQueue {
    repeated StarCommentItem starCommentList = 1;
    int32 queueVersion = 2;
    

}

message FilterMsgRuleParamRandom {
    int32 percentage = 1;
    

}

message TakeTheStageInfo {
    TakeTheStageStatus takeTheStageStatus = 1;
    int64 takeTheStageStartTime = 2;
    VictoryLapInfo victoryLapInfo = 3;
    StartedInfo startedInfo = 100;
    FinalCallInfo finalCallInfo = 101;
    
    enum TakeTheStageStatus {
    	TAKE_THE_STAGE_STATUS_UNKNOWN = 0;
    	TAKE_THE_STAGE_STATUS_NOT_STARTED = 1;
    	TAKE_THE_STAGE_STATUS_CANCELLED = 2;
    	TAKE_THE_STAGE_STATUS_STARTED = 3;
    	TAKE_THE_STAGE_STATUS_FINAL_CALL = 4;
    	TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5;
    	TAKE_THE_STAGE_STATUS_FINISHED = 6;
    }
    message FinalCallInfo {
    	int64 plannedSettlementEndTime = 1;
    	int64 extraTimeInterval = 2;
    

	}
    message StartedInfo {
    	int64 performanceStartTime = 1;
    	TakeTheStageOrderInfo orderInfo = 2;
    

	}
    message VictoryLapInfo {
    	int64 plannedFinishTime = 1;
    

	}

}

message GameTagCategory {
    GameTagType gameType = 1;
    string title = 2;
    
    enum GameTagType {
    	GAME_TAG_TYPE_UNKNOWN = 0;
    	GAME_TAG_TYPE_PC_GAME = 1;
    	GAME_TAG_TYPE_MOBILE_GAME = 2;
    	GAME_TAG_TYPE_CONSOLE_GAME = 3;
    }

}

message NumberConfig {
    int64 number = 1;
    FontStyle fontStyle = 2;
    CombineBadgeBackground background = 3;
    

}

message AnchorLevel {
    int32 level = 1;
    int64 experience = 2;
    int64 lowestExperienceThisLevel = 3;
    int64 highestExperienceThisLevel = 4;
    int64 taskStartExperience = 5;
    int64 taskStartTime = 6;
    int64 taskDecreaseExperience = 7;
    int64 taskTargetExperience = 8;
    int64 taskEndTime = 9;
    ImageModel profileDialogBg = 10;
    ImageModel profileDialogBackBg = 11;
    ImageModel stageLevelIcon = 12;
    ImageModel levelIcon = 13;
    

}

message WebcastGuestShowdownMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    GuestShowdownContent playContent = 3;
    LinkerMediaChangeOperator operatorUserInfo = 4;
    int32 playClosedReason = 5;
    int32 toCalculatingReason = 6;
    GuestShowdownConfigChange guestShowdownConfigChange = 7;
    

}

message PaddingInfo {
    bool useSpecific = 1;
    int32 middlePadding = 2;
    int32 badgeWidth = 3;
    int32 leftPadding = 4;
    int32 rightPadding = 5;
    int32 iconTopPadding = 6;
    int32 iconBottomPadding = 7;
    HorizontalPaddingRule horizontalPaddingRule = 8;
    VerticalPaddingRule verticalPaddingRule = 9;
    
    enum HorizontalPaddingRule {
    	HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH = 0;
    	HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT = 1;
    }
    enum VerticalPaddingRule {
    	VERTICAL_PADDING_RULE_USE_DEFAULT = 0;
    	VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM = 1;
    }

}

message AwardCardNotice {
    Text displayContent = 1;
    repeated BattleUserInfo awardedUsers = 2;
    

}

message RoomAuthMessageGoldenEnvelope {
    int64 revokeEndTime = 1;
    

}

message AnchorSettingInfo {
    repeated AnchorLastLayoutSetting lastLayoutSettings = 1;
    
    message AnchorLastLayoutSetting {
    	Scene scene = 1;
    	string layoutId = 2;
    

	}

}

message ShowContent {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 showId = 3;
    int32 showStatus = 4;
    int64 version = 5;
    int64 showCreateTime = 6;
    ShowConfig showConfig = 7;
    repeated ShowListUser showingAndReadyList = 9;
    repeated ShowListUser finishedList = 10;
    TransitionInfo transitionInfo = 11;
    

}

message RoomReplayReason {
    string reason = 1;
    int64 value = 2;
    string type = 3;
    string promotionId = 4;
    string typeName = 5;
    ImageModel typeIcon = 6;
    

}

message WebcastQuestionSlideDownMessage {
    CommonMessageData baseMessage = 1;
    int64 questionId = 2;
    

}

message UseCriticalStrikeCard {
    CriticalStrikeCardInfo cardInfo = 1;
    int64 anchorId = 2;
    Text displayContent = 3;
    

}

message BattleTruthOrDareTriggerGuideV2 {
    string anchorContentKey = 1;
    string audienceContentKey = 2;
    repeated TruthOrDareTip tips = 3;
    int32 guideDurationSecond = 4;
    int32 tipDurationSecond = 5;
    string ruleDetailUrl = 6;
    string lapGuideKey = 7;
    int32 lapGuideDurationSecond = 8;
    bool isFirstTime = 9;
    
    message TruthOrDareTip {
    	string tipTypeKey = 1;
    	string tipContentKey = 2;
    

	}

}

message WaveReward {
    EmoteModel emote = 1;
    repeated EmoteModel f307emotes = 2;
    

}

message GuestShowdownFinishToPunishmentResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	GuestShowdownContent playContent = 2;
    

	}

}

message WaveCardInfo {
    string cardNameKey = 1;
    ImageModel cardImage = 2;
    int64 sendTimeSec = 3;
    BattleUserInfo sendUser = 4;
    int64 effectLastDuration = 5;
    string ruleUrl = 6;
    int64 effectTimeSec = 7;
    int64 toAnchorId = 8;
    

}

message HostDisplayResponse {
    ResponseData data = 1;
    
    message DisplayInfo {
    	string hostIconBackgroundUrl = 1;
    	string hostIconUrl = 2;
    	string hostColor = 3;
    	string iconLinkUrl = 4;
    	int64 hostType = 5;
    

	}
    message ResponseData {
    	DisplayInfo displayInfo = 1;
    

	}

}

message GuidePageResource {
    repeated Text texts = 1;
    repeated ImageModel icons = 2;
    repeated ImageModel animations = 3;
    repeated BadgeStruct badges = 4;
    

}

message InviteExtra {
    LogPb logPb = 1;
    
    message LogPb {
    	string clientLogId = 1;
    

	}

}

message GameBanner {
    BannerInRoom livechatBanner = 1;
    ImageModel bannerImage = 2;
    int64 activityStartTime = 3;
    int64 activityEndTime = 4;
    string activityId = 5;
    

}

message SubjectPositionInfo {
    float topOffset = 1;
    float centerOffset = 2;
    int64 expireTime = 3;
    

}

message MultiLiveUserSettings {
    MultiLiveUserApplySettings multiLiveUserApplySettings = 1;
    map<int32, int64> channelMap = 2;
    CoHost coHost = 3;
    

}

message AudioStruct {
    int64 id = 1;
    int32 duration = 2;
    int32 audioFormat = 3;
    string vid = 4;
    repeated string audioUrls = 5;
    double volumeLoudnessLufs = 6;
    double volumeAmplitudePeak = 7;
    

}

message MultiGuestPermissionInfo {
    bool flag = 1;
    int64 errCode = 2;
    string noPermissionPrompt = 3;
    int64 linkPermissionType = 4;
    

}

message StreamUrl {
    int32 provider = 1;
    int64 id = 2;
    string idStr = 3;
    map<string, string> resolutionName = 4;
    string defaultResolution = 5;
    StreamUrlExtra extra = 6;
    string rtmpPushUrl = 7;
    string rtmpPullUrl = 8;
    map<string, string> flvPullUrl = 9;
    repeated string candidateResolution = 10;
    string hlsPullUrl = 11;
    string hlsPullUrlParams = 12;
    string defaultPullSdkParams = 13;
    map<string, string> pullSdkParams = 14;
    string pushSdkParams = 15;
    repeated string pushUrlList = 16;
    LiveCoreSDKData liveCoreSDKData = 17;
    map<string, string> hlsPullUrlMap = 18;
    repeated string completePushUrls = 19;
    int32 streamControlType = 20;
    int64 streamDelayMs = 22;
    string pushResolution = 23;
    int64 streamAppId = 24;
    int64 aliveTimestamp = 25;
    int64 streamSizeWidth = 26;
    int64 streamSizeHeight = 27;
    int32 drmType = 28;
    

}

message GameTaskRewardInfo {
    string rewardId = 1;
    int32 status = 2;
    string rewardValue = 3;
    

}

message GetShowRankResponse {
    ResponseData data = 1;
    
    message ShowRankUser {
    	int64 userId = 1;
    	int32 order = 2;
    	int64 score = 3;
    	string nickname = 4;
    	ImageModel avatarThumb = 5;
    	int64 followStatus = 6;
    

	}
    message ResponseData {
    	repeated ShowRankUser showRankUsers = 1;
    

	}

}

message UserCountdownInfo {
    int64 countdownId = 1;
    int64 score = 2;
    int64 targetScore = 3;
    int32 completionProgressPercent = 4;
    

}

message QuizUserQuestionResult {
    string correctAnswer = 1;
    string userAnswer = 2;
    string questionId = 3;
    int32 questionNo = 4;
    string simpleUserAnswer = 5;
    bool isUseRespawn = 6;
    

}

message Contributor {
    int64 mScore = 1;
    User mUser = 2;
    int64 mRank = 3;
    int64 mDelta = 4;
    

}

message ContinueRoomResponse {
    Room room = 1;
    int32 crossDeviceContinueScene = 2;
    int32 continueScene = 3;
    int64 linkMicUserNum = 4;
    

}

message AnchorGrowLevelImMsg {
    int32 msgType = 1;
    AnchorGrowLevelImMsgTaskDone taskDoneData = 2;
    

}

message CancelApplyResponse {
    

}

message ReceiverRestriction {
    int64 userId = 1;
    repeated int64 hiddenGids = 2;
    

}

message ActivePlaybook {
    int64 roomId = 1;
    int64 playId = 2;
    int32 playStatus = 3;
    Playbook playbook = 4;
    bool existsCustomContent = 5;
    int64 startTime = 6;
    int64 endTime = 7;
    

}

message BALinkStruct {
    int32 baLinkPermission = 1;
    string baLinkData = 2;
    

}

message PreviewCommentInfo {
    int64 pollingInterval = 1;
    repeated PreviewCommentItem commentList = 2;
    int64 expireTime = 3;
    string title = 4;
    ImageModel icon = 5;
    

}

message WebcastWishlistUpdateMessage {
    CommonMessageData baseMessage = 1;
    

}

message AvatarState {
    int64 avatarId = 1;
    

}

message GuideReportResponse {
    Data data = 1;
    
    message Data {
    

	}

}

message StateReqCommon {
    Scene scene = 1;
    int64 appId = 2;
    int64 liveId = 3;
    Player myself = 4;
    int64 channelId = 5;
    

}

message JoinDirectContent {
    LinkLayerListUser joiner = 1;
    AllListUser allUsers = 2;
    

}

message AnchorLinkmicUserSettings {
    bool isTurnOn = 1;
    bool acceptMultiLinkmic = 2;
    bool acceptNotFollowerInvite = 3;
    bool allowGiftToOtherAnchors = 4;
    bool blockInvitationOfThisLive = 5;
    bool receiveFriendMultiHostInvites = 6;
    bool receiveFriendMultiHostApplication = 7;
    bool blockThisMultiHostInvites = 8;
    bool blockThisMultiHostApplication = 9;
    bool receiveNotFriendMultiHostInvites = 10;
    bool receiveNotFriendMultiHostApplication = 11;
    bool allowLiveNoticeOfFriends = 12;
    bool allowFriendInvites = 13;
    bool allowSuggestedInvites = 14;
    

}

message PublicAreaMessageCommon {
    int64 scrollGapCount = 1;
    int64 anchorScrollGapCount = 2;
    bool releaseToScrollArea = 3;
    bool anchorReleaseToScrollArea = 4;
    bool isAnchorMarked = 5;
    CreatorSuccessInfo creatorSuccessInfo = 6;
    PortraitInfo portraitInfo = 7;
    UserInteractionInfo userInteractionInfo = 8;
    int64 adminFoldType = 9;
    
    message TagItem {
    	TagType tagType = 1;
    	Text tagText = 2;
    
    	enum TagType {
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN = 0;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE = 1;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL = 2;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO = 3;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM = 4;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT = 5;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM = 6;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS = 7;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM = 8;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM = 9;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM = 10;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM = 11;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT = 12;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY = 13;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP = 14;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME = 15;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM = 16;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE = 17;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT = 18;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES = 19;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION = 20;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT = 21;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP = 22;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE = 28;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION = 29;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM = 30;
    		TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM = 31;	
    }

	}
    message Topic {
    	TopicActionType topicActionType = 1;
    	Text topicText = 2;
    	Text topicTips = 3;
    
    	enum TopicActionType {
    		TOPIC_ACTION_TYPE_UNKNOWN = 0;
    		TOPIC_ACTION_TYPE_FOLLOW = 1;	
    }

	}
    message CreatorSuccessInfo {
    	repeated TagItem tags = 1;
    	Topic topic = 2;
    

	}
    message UserMetrics {
    	UserMetricsType type = 1;
    	string metricsValue = 2;
    
    	enum UserMetricsType {
    		USER_METRICS_TYPE_UNKNOWN = 0;
    		USER_METRICS_TYPE_GRADE = 1;
    		USER_METRICS_TYPE_SUBSCRIBE = 2;
    		USER_METRICS_TYPE_FOLLOW = 3;
    		USER_METRICS_TYPE_FANS_CLUB = 4;
    		USER_METRICS_TYPE_TOP_VIEWER = 5;
    		USER_METRICS_TYPE_GIFT = 6;	
    }

	}
    message PortraitTag {
    	string tagId = 1;
    	int64 priority = 2;
    	string showValue = 3;
    	string showArgs = 4;
    

	}
    message PortraitInfo {
    	repeated UserMetrics userMetrics = 1;
    	repeated PortraitTag portraitTag = 2;
    

	}
    message UserInteractionInfo {
    	int64 likeCnt = 1;
    	int64 commentCnt = 2;
    	int64 shareCnt = 3;
    

	}

}

message NoticeboardTemplateDeleteResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool isSuccess = 1;
    	int64 noticeboardTemplateId = 2;
    

	}

}

message PermitJoinGroupReq {
    LinkCommon common = 1;
    int32 type = 2;
    GroupPlayer myself = 3;
    GroupPlayer joinUser = 4;
    int32 status = 5;
    int64 groupChannelId = 6;
    repeated ContentPositionMessage contentPositionMessage = 7;
    BizPermitJoinGroupParams cohostReqExtra = 9527;
    

}

message CohostTopic {
    int64 id = 1;
    string titleKey = 2;
    string titleText = 3;
    bool liked = 21;
    int64 totalHeat = 22;
    int64 totalRivals = 23;
    repeated ImageModel rivalsAvatar = 24;
    

}

message WebcastActivityQuizCardMessage {
    CommonMessageData baseMessage = 1;
    string schema = 2;
    string primaryId = 3;
    int64 timestamp = 4;
    QuizQuestionInfo question = 5;
    QuizAnswerInfo answer = 6;
    QuizFinalResult finalResult = 7;
    QuizCallUpWebview callUpWebview = 8;
    QuizRulesIntroduction rulesIntroduction = 9;
    float seiDelayMultiple = 10;
    int64 seiDelayBias = 11;
    int64 expiredTime = 12;
    

}

message RoomReplayMoment {
    string id = 1;
    int64 momentStartTime = 2;
    int64 momentEndTime = 3;
    string vid = 4;
    int64 pushStatus = 5;
    RoomReplayReason reason = 6;
    ImageModel cover = 7;
    string playUrl = 8;
    

}

message AnchorLevelPermission {
    int32 beauty = 1;
    int32 effects = 2;
    int32 share = 3;
    int32 moderatorSetting = 4;
    int32 commentSetting = 5;
    int32 commentFilter = 6;
    int32 pauseLive = 7;
    int32 flip = 8;
    int32 mirror = 9;
    int32 hearYourOwnVoice = 10;
    int32 donationSticker = 11;
    int32 fullScreenMode = 12;
    int32 liveCenter = 13;
    int32 topic = 14;
    int32 sticker = 15;
    int32 voiceEffect = 16;
    int32 liveIntro = 17;
    int32 webcastDataInteractionquestion = 18;
    int32 poll = 19;
    int32 pin = 20;
    int32 pictionary = 21;
    int32 viewerRankList = 22;
    int32 promote = 23;
    int32 customizablePoll = 24;
    int32 goodyBag = 25;
    int32 karaoke = 26;
    int32 treasureBox = 27;
    int32 portal = 28;
    int32 liveBackground = 29;
    int32 playTogether = 30;
    

}

message InGameInfo {
    bool showInGameRank = 1;
    repeated int64 allowGuideGametagIds = 2;
    

}

message SubWaveData {
    SubWaveImMsg subWaveImMsg = 1;
    

}

message CohostListUser {
    int64 userId = 1;
    string nickName = 2;
    ImageModel avatarThumb = 3;
    int64 linkedTime = 4;
    LinkmicPlayType playType = 5;
    int64 roomId = 6;
    LinkmicUserStatus linkmicUserStatus = 7;
    int64 linkRemainingTime = 8;
    CoHostPermissoinType permissionType = 9;
    string displayId = 10;
    int64 followStatus = 11;
    bool isLowVersion = 12;
    int64 rivalUserId = 13;
    int64 rivalRoomId = 14;
    bool isInitiator = 15;
    string linkmicIdStr = 16;
    int64 bestTeammateUid = 17;
    bool hasTopicPerm = 18;
    int64 innerChannelId = 19;
    
    enum LinkmicPlayType {
    	LINKMIC_PLAY_TYPE_PLAY_TYPE_INVITE = 0;
    	LINKMIC_PLAY_TYPE_PLAY_TYPE_APPLY = 1;
    	LINKMIC_PLAY_TYPE_PLAY_TYPE_RESERVE = 2;
    }
    enum CoHostPermissoinType {
    	CO_HOST_PERMISSOIN_TYPE_NO_PERM = 0;
    	CO_HOST_PERMISSOIN_TYPE_COHOST_PERM = 1;
    	CO_HOST_PERMISSOIN_TYPE_MULTI_HOST_PERM = 2;
    }
    enum LinkmicUserStatus {
    	LINKMIC_USER_STATUS_USER_STATUS_NONE = 0;
    	LINKMIC_USER_STATUS_USER_STATUS_LINKED = 1;
    	LINKMIC_USER_STATUS_USER_STATUS_APPLYING = 2;
    	LINKMIC_USER_STATUS_USER_STATUS_INVITING = 3;
    }

}

message LinkerListChangeContent {
    repeated LinkListUser onLineUsers = 1;
    repeated LinkListUser waitingUsers = 2;
    repeated LinkListUser connectingUsers = 3;
    

}

message WebcastPortalMessage {
    CommonMessageData baseMessage = 1;
    int32 payloadType = 2;
    int64 portalId = 3;
    int64 roomId = 4;
    PortalBuy portalBuy = 5;
    PortalInvite portalInvite = 6;
    PortalFinish portalFinish = 7;
    Portal portal = 8;
    int64 nextPingTime = 9;
    
    message PortalBuy {
    	User sugarDaddy = 1;
    

	}
    message PortalFinish {
    	User luckyPerson = 1;
    

	}
    message PortalInvite {
    	int64 inviteCountDown = 1;
    	int64 rewardCountDown = 2;
    	User sugarDaddy = 3;
    	User anchor = 4;
    	ImageModel cover = 5;
    

	}

}

message Diamond {
    int32 id = 1;
    string iapId = 2;
    string price = 3;
    int32 exchangePrice = 4;
    int32 count = 5;
    int32 givingCount = 6;
    string describe = 7;
    repeated CurrencyPriceItem currencyPrice = 8;
    string couponId = 9;
    int32 discountPrice = 10;
    int32 stallType = 11;
    string genericIapId = 12;
    bool isLast = 101;
    bool isFrequent = 102;
    

}

message GoodyBagCommonDetail {
    int32 winnerHeadcount = 1;
    int32 joinedHeadcount = 2;
    ParticipateMethod participateMethod = 3;
    string participateMethodContent = 4;
    int32 openAt = 5;
    int32 countDownMinutes = 6;
    ParticipateThresholdSelected participateThresholdSelected = 7;
    
    enum ParticipateMethod {
    	PARTICIPATE_METHOD_UNKNOWN = 0;
    	PARTICIPATE_METHOD_COMMENT = 1;
    	PARTICIPATE_METHOD_SHARE = 2;
    	PARTICIPATE_METHOD_NO_THRESHOLD = 3;
    }

}

message SubQueueData {
    int32 messageTypeAction = 1;
    SubQueue queue = 2;
    User currentUser = 3;
    

}

message MsgNotifyControlResp {
    Data data = 1;
    
    message Data {
    	map<int64, MsgNotifyQuota> quotaConfig = 1;
    

	}

}

message GameServerFeature {
    int32 id = 1;
    string value = 2;
    map<string, string> valueMap = 3;
    

}

message ActivityRewardInfo {
    ImageModel mBage = 1;
    ImageModel mStoryTag = 2;
    

}

message Top3CardInfo {
    CommonCardInfo common = 1;
    

}

message CompetitionStart {
    int64 competitionStartTime = 1;
    CompetitionInitiateInfo initiateInfo = 2;
    int64 endTimestamp = 3;
    int64 actualEndTimestamp = 4;
    

}

message RoomAuthOffReasons {
    string gift = 1;
    int32 unAvailableClickReason = 2;
    

}

message ShortItemRefreshEntity {
    int32 interval = 1;
    repeated string refreshItems = 2;
    string activityId = 3;
    int64 index = 4;
    int32 refreshMsgType = 5;
    

}

message TopicPairResponse {
    ResponseData data = 1;
    
    message Setting {
    	int64 expectSuccSec = 1;
    	int64 timeoutSec = 2;
    

	}
    message ResponseData {
    	int64 pairId = 1;
    	repeated ImageModel rivalAvatars = 2;
    	Setting setting = 3;
    

	}

}

message PollOptionInfo {
    int64 votes = 1;
    string displayContent = 2;
    int32 optionIndex = 3;
    repeated VoteUser voteUserList = 4;
    

}

message WebcastPopularCardMessage {
    CommonMessageData baseMessage = 1;
    PopularCardInfo popularCardInfo = 2;
    
    message PopularCardInfo {
    	int32 status = 1;
    	int64 endTime = 3;
    	int32 enterNumber = 4;
    

	}

}

message WebcastGameGuessToastMessage {
    CommonMessageData baseMessage = 1;
    string roundIdStr = 2;
    bool showType = 3;
    string showOptionIdxStr = 4;
    string titleStarlingKey = 5;
    string resultStarlingKey = 6;
    string showRankStr = 7;
    string optionIdStr = 8;
    int64 dissMissSeconds = 9;
    

}

message Author {
    int64 videoTotalCount = 1;
    int64 videoTotalPlayCount = 2;
    int64 videoTotalFavoriteCount = 6;
    

}

message WebcastFeedUserRoomMonitorMessage {
    CommonMessageData baseMessage = 1;
    int64 anchorId = 3;
    int64 roomId = 4;
    int64 roomStatus = 5;
    int64 roomTime = 6;
    int64 streamStatus = 7;
    

}

message ProjectionConfig {
    bool useProjection = 1;
    ImageModel icon = 2;
    

}

message BattleRewardSettle {
    BattlePrompt rewardSettlePrompt = 1;
    RewardStatus status = 2;
    
    enum RewardStatus {
    	REWARD_STATUS_SUCCEED = 0;
    	REWARD_STATUS_FAILED = 1;
    }

}

message GiftRandomEffectInfo {
    RandomGiftPanelBanner randomGiftPanelBanner = 1;
    repeated int64 effectIds = 2;
    string hostKey = 3;
    string audienceKey = 4;
    RandomGiftBubble randomGiftBubble = 5;
    

}

message GiftComboInfo {
    int32 comboCount = 1;
    ImageModel comboEffectImg = 2;
    

}

message JoinGroupContent {
    GroupChannelAllUser groupUser = 1;
    GroupPlayer joinUser = 2;
    JoinType type = 3;
    repeated RTCExtraInfo groupExtInfo = 4;
    
    enum JoinType {
    	JOIN_TYPE_UNKNOWN = 0;
    	JOIN_TYPE_CHANNEL_APPLY = 1;
    	JOIN_TYPE_CHANNEL_INVITE = 2;
    	JOIN_TYPE_GROUP_APPLY = 100;
    	JOIN_TYPE_GROUP_APPLY_FOLLOW = 101;
    	JOIN_TYPE_GROUP_INVITE = 102;
    	JOIN_TYPE_GROUP_INVITE_FOLLOW = 103;
    	JOIN_TYPE_GROUP_OWNER_JOIN = 104;
    }

}

message ReqSong {
    KaraokeSong song = 1;
    repeated User userList = 2;
    int64 reqCount = 3;
    

}

message LikeIconInfo {
    repeated ImageModel icons = 1;
    repeated ImageModel iconsSelf = 2;
    repeated ImageModel defaultIcons = 3;
    

}

message WebcastGameRankNotifyMessage {
    CommonMessageData baseMessage = 1;
    MsgType msgType = 2;
    Text notifyText = 3;
    
    enum MsgType {
    	MSG_TYPE_RANK_IN_OUT = 0;
    	MSG_TYPE_RANK_CHANGE = 1;
    	MSG_TYPE_ANCHOR_ENCOURAGE = 2;
    	MSG_TYPE_UN_KNOW = 255;
    }

}

message WebcastKaraokeReqMessage {
    CommonMessageData baseMessage = 1;
    repeated ReqSong songList = 2;
    int64 totalReqCount = 3;
    int64 reqTimestampSeconds = 4;
    

}

message TopFrameSummary {
    int64 id = 1;
    string title = 2;
    string schema = 3;
    repeated ShowInfo showList = 4;
    string idStr = 5;
    

}

message Portal {
    int64 startTime = 1;
    int64 enterCount = 2;
    User sugarDaddy = 3;
    int64 roomId = 4;
    User anchor = 5;
    int64 portalId = 6;
    int32 userType = 7;
    int64 inviteeCount = 8;
    int32 status = 9;
    int64 waitDuration = 10;
    int64 rewardDuration = 11;
    int64 totalAmount = 12;
    ImageModel cover = 13;
    

}

message OpenLsNotifyInfo {
    bool fitLiveStudioRule = 1;
    bool openLsNotifyWindow = 2;
    

}

message UserStats {
    bool isNewAnchor = 1;
    bool isNewModerator = 2;
    

}

message EcomLiveElementActions {
    repeated AtomAction atomActions = 1;
    int64 version = 2;
    

}

message WebcastGuestInviteGuideMessage {
    CommonMessageData baseMessage = 1;
    repeated ImageModel inviteeAvatar = 2;
    

}

message TemplateContent {
    int64 templateId = 1;
    string templateIdStr = 2;
    PollTemplateStatus status = 3;
    PollKind pollKind = 4;
    PollAppealStatus appealStatus = 5;
    string violationIdStr = 6;
    
    enum PollKind {
    	POLL_KIND_NORMAL = 0;
    	POLL_KIND_GIFT = 1;
    	POLL_KIND_CUSTOMIZABLE = 2;
    	POLL_KIND_CUSTOMIZABLE_GIFT = 3;
    	POLL_KIND_QUICK_GIFT = 4;
    	POLL_KIND_EMOTE = 5;
    }
    enum PollTemplateStatus {
    	POLL_TEMPLATE_STATUS_TO_BE_REVIEWED = 0;
    	POLL_TEMPLATE_STATUS_UNDER_REVIEW = 1;
    	POLL_TEMPLATE_STATUS_REVIEWED = 2;
    	POLL_TEMPLATE_STATUS_REFUSED = 3;
    }
    enum PollAppealStatus {
    	POLL_APPEAL_STATUS_UNKNOWN = 0;
    	POLL_APPEAL_STATUS_PASS = 1;
    	POLL_APPEAL_STATUS_FAIL = 2;
    }

}

message InteractionQuestionInfo {
    bool hasRecommend = 1;
    bool hasQuickAnswer = 2;
    int32 qaEntryType = 3;
    bool hasLightingStrengthen = 4;
    

}

message PerceptionDialogInfo {
    PerceptionDialogIconType iconType = 1;
    Text title = 2;
    Text subTitle = 3;
    Text adviceActionText = 4;
    Text defaultActionText = 5;
    string violationDetailUrl = 6;
    Scene scene = 7;
    int64 targetUserId = 8;
    int64 targetRoomId = 9;
    int64 countDownTime = 10;
    bool showFeedback = 11;
    repeated PerceptionFeedbackOption feedbackOptions = 12;
    int64 policyTip = 13;
    int32 appealPopup = 14;
    
    enum PerceptionDialogIconType {
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17;
    	PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18;
    }

}

message PollInfo {
    PollData pollData = 1;
    UserVoteInfo userVoteInfo = 2;
    

}

message AnchorReminderWordInfoMsg {
    Scene scene = 1;
    Text title = 2;
    string content = 3;
    string messageKey = 4;
    

}

message WebcastSpecialPushMessage {
    CommonMessageData baseMessage = 1;
    string content = 2;
    string color = 3;
    string traceId = 4;
    ImageModel icon = 5;
    string actionContent = 6;
    string actionType = 7;
    int64 pushDisplayTime = 8;
    

}

message AnchorReminderWordStatus {
    Scene scene = 1;
    int32 status = 2;
    string title = 3;
    string desc = 4;
    

}

message WalletRewardsContainerInfo {
    string title = 1;
    string content = 2;
    string schema = 3;
    bool needPopup = 4;
    string exposurePeriod = 5;
    string popupSchema = 6;
    int64 popupType = 7;
    

}

message CapsuleBizParamsCommentFlaggedPrompt {
    int64 trigger = 1;
    

}

message FragmentTypeCount {
    int32 fragmentType = 1;
    int64 count = 2;
    

}

message GiftOperation {
    ImageModel leftImage = 1;
    ImageModel rightImage = 2;
    string title = 3;
    string titleColor = 4;
    int32 titleSize = 5;
    string schemeUrl = 6;
    string eventName = 7;
    

}

message KickOutResponse {
    

}

message MonetizationTipsConfig {
    repeated int64 revenueTipsTriggerTime = 1;
    

}

message ChangeLayoutResp {
    repeated UserPosition userPosition = 2;
    repeated string linkedUserUiPositions = 3;
    repeated ContentPosition contentPos = 4;
    repeated PosIdentity uiPos = 5;
    

}

message GiftNotice {
    int32 noticeType = 1;
    int64 giftId = 2;
    ImageModel effect = 3;
    int32 bizType = 4;
    int64 periodId = 5;
    

}

message EndShowResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	ShowContent showContent = 2;
    

	}

}

message UserIdentity {
    bool isGiftGiverOfAnchor = 1;
    bool isSubscriberOfAnchor = 2;
    bool isMutualFollowingWithAnchor = 3;
    bool isFollowerOfAnchor = 4;
    bool isModeratorOfAnchor = 5;
    bool isAnchor = 6;
    

}

message EnterRoomExtra {
    bool isOfficialChannel = 4;
    string region = 5;
    bool isSameAppLanguage = 6;
    string finishedPerceptionMsg = 7;
    PunishEventInfo punishInfo = 8;
    RechargeCustomError customErrorForGiftSetting = 10;
    int64 userRestrictedMode = 11;
    

}

message CaptionInfo {
    bool open = 1;
    bool alignStream = 2;
    repeated string supportLang = 3;
    int32 location = 4;
    int32 showType = 5;
    

}

message LiveStreamSubGoal {
    int32 type = 1;
    int64 id = 2;
    int64 progress = 3;
    int64 target = 4;
    LiveStreamSubGoalGift gift = 5;
    string idStr = 6;
    SubGoalPinInfo pinInfo = 7;
    int32 source = 8;
    string recommendedText = 9;
    string recommendedHeader = 10;
    

}

message LetViewerSingReq {
    LinkCommon common = 1;
    int64 channelId = 2;
    Player applier = 3;
    MicPositionData applierPos = 4;
    int64 songId = 5;
    BizApplyParams multiGuestReqExtra = 9527;
    

}

message QuickCohostContent {
    int64 contentId = 1;
    string displayText = 2;
    

}

message EpiDecision {
    int64 ts = 1;
    map<string, string> data = 2;
    map<string, string> dataV2 = 3;
    map<string, string> serverFeatures = 4;
    

}

message BattleNoticeCommonGuide {
    Text displayText = 1;
    bool exceptAnchor = 2;
    

}

message WebcastMultiGuestSuggestMessage {
    CommonMessageData baseMessage = 1;
    repeated ImageModel suggestedImage = 2;
    

}

message SubGoalPinCard {
    int64 goalId = 1;
    int64 timeToLive = 2;
    SubPinCardText desc = 3;
    int64 target = 4;
    int64 progress = 5;
    

}

message WebcastHotRoomMessage {
    CommonMessageData baseMessage = 1;
    HotRoomData data = 2;
    

}

message PingResult {
    int32 roomStatus = 1;
    int64 roomId = 2;
    int64 nextPingInterval = 3;
    

}

message TextPiece {
    int32 type = 1;
    TextFormat format = 2;
    string stringValue = 11;
    TextPieceUser userValue = 21;
    TextPieceGift giftValue = 22;
    TextPieceHeart heartValue = 23;
    TextPiecePatternRef patternRefValue = 24;
    TextPieceImage imageValue = 25;
    

}

message RankUpdate {
    ProfitRankType requestFirstShowType = 9;
    int64 supportedVersion = 10;
    bool owneronrank = 11;
    ImageModel entranceicon = 12;
    AffiliatedInfo affiliatedInfo = 13;
    
    enum ProfitRankType {
    	PROFIT_RANK_TYPE_DAILY_ROOKIE = 14;
    	PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1;
    	PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5;
    	PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6;
    	PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7;
    	PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8;
    	PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9;
    	PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11;
    	PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12;
    	PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22;
    	PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13;
    	PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25;
    }
    message AffiliatedInfo {
    	Text textContent = 1;
    	Text gapDesc = 2;
    	int64 realTimeRank = 3;
    	TeamRankBonusTime teamRankBonusTime = 4;
    

	}

}

message WebcastPartnershipDropsAnchorMessage {
    CommonMessageData baseMessage = 1;
    int32 changeMode = 2;
    string dropsId = 3;
    int64 anchorUid = 4;
    int32 anchorJoinDropsNoticeType = 5;
    string dropsName = 6;
    

}

message CohostListChangeContent {
    repeated CohostListUser users = 1;
    

}

message WebcastAccessControlMessage {
    CommonMessageData baseMessage = 1;
    AccessControlCaptcha captcha = 2;
    

}

message AnchorReplayInfoData {
    repeated RoomReplay replays = 1;
    int32 style = 2;
    bool hasMore = 3;
    int64 nextOffset = 4;
    int32 amplifyStatus = 5;
    bool showInboxSubPopUp = 6;
    

}

message WebcastGuessQuestionAuditMessage {
    CommonMessageData baseMessage = 1;
    GuessTemplate guessTemplate = 2;
    

}

message FinishShowingGuestResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	ShowContent showContent = 2;
    

	}

}

message TemplateEffectExtra {
    string resourceId = 1;
    

}

message WebcastAuthorizationNotifyMessage {
    CommonMessageData baseMessage = 1;
    string from = 2;
    string style = 4;
    ContentBlock userContent = 6;
    RelationBlock userRelation = 7;
    
    message ContentBlock {
    	bool show = 1;
    	bool isAuthorized = 2;
    	string title = 3;
    	string content = 4;
    	string detail = 5;
    

	}
    message RelationBlock {
    	bool show = 1;
    	bool isAuthorized = 2;
    	string title = 3;
    	string content = 4;
    	string detail = 5;
    

	}

}

message WebcastLinkMicMethod {
    CommonMessageData baseMessage = 1;
    int32 mType = 2;
    string accessKey = 3;
    int32 anchorLinkMicId = 4;
    int64 userId = 5;
    int64 fanTicket = 6;
    int64 totalFanTicket = 7;
    int64 channelId = 8;
    int32 layout = 9;
    int32 vendor = 10;
    int32 dimension = 11;
    string theme = 12;
    int64 inviteUid = 13;
    int32 reply = 14;
    int32 duration = 16;
    int32 matchType = 18;
    bool win = 19;
    string prompts = 20;
    int64 toUserId = 21;
    string tips = 25;
    int64 startTimeMs = 26;
    int32 confluenceType = 27;
    int64 fromRoomId = 28;
    int32 inviteType = 29;
    int64 subType = 30;
    string rtcExtInfo = 32;
    string appId = 34;
    string appSign = 35;
    string anchorLinkMicIdStr = 37;
    int64 rivalAnchorId = 38;
    int32 rivalLinkmicId = 39;
    string rivalLinkmicIdStr = 40;
    bool shouldShowPopup = 41;
    bool rtcJoinChannel = 51;
    int32 fanTicketType = 52;
    
    enum LinkmicReplyType {
    	LINKMIC_REPLY_TYPE_RT_UNKNOWN = 0;
    	LINKMIC_REPLY_TYPE_RT_AGREE = 1;
    	LINKMIC_REPLY_TYPE_RT_REJECT = 2;
    }

}

message GiftHintInfo {
    int32 hintId = 1;
    ImageModel hintIcon = 2;
    string hintText = 3;
    int64 hintShowDelayMs = 4;
    int64 giftId = 5;
    bool hasGiftHistory = 6;
    

}

message User {
    int64 id = 1;
    string nickName = 3;
    ImageModel avatarThumb = 9;
    ImageModel avatarMedium = 10;
    ImageModel avatarLarge = 11;
    bool isVerified = 12;
    int32 status = 15;
    int64 createTime = 16;
    int64 modifyTime = 17;
    int32 secret = 18;
    string shareQrcodeUri = 19;
    FollowInfo followInfo = 22;
    UserHonor userHonor = 23;
    FansClubMember fansClub = 24;
    BorderInfo border = 25;
    string specialId = 26;
    ImageModel avatarBorder = 27;
    ImageModel medal = 28;
    repeated ImageModel userBadges = 29;
    repeated ImageModel newUserBadges = 30;
    int32 topVipNo = 31;
    UserAttr userAttr = 32;
    OwnRoom ownRoom = 33;
    int64 payScore = 34;
    int64 fanTicketCount = 35;
    AnchorInfo anchorInfo = 36;
    LinkmicStatus linkMicStats = 37;
    string username = 38;
    bool enableShowCommerceSale = 39;
    bool withFusionShopEntry = 40;
    int64 payScores = 41;
    AnchorLevel anchorLevel = 42;
    string verifiedContent = 43;
    Author authorInfo = 44;
    repeated User topFans = 45;
    string secUid = 46;
    int32 userRole = 47;
    ActivityRewardInfo rewardInfo = 49;
    ImageModel personalCard = 52;
    AuthenticationInfo authenticationInfo = 53;
    repeated ImageModel mediaBadgeImageList = 57;
    repeated int64 commerceWebcastConfigIds = 60;
    repeated BorderInfo borders = 61;
    ComboBadgeInfo comboBadgeInfo = 62;
    SubscribeInfo subscribeInfo = 63;
    repeated BadgeStruct badgeList = 64;
    repeated int64 mintTypeLabel = 65;
    FansClubInfo fansClubInfo = 66;
    bool allowFindByContacts = 1002;
    bool allowOthersDownloadVideo = 1003;
    bool allowOthersDownloadWhenSharingVideo = 1004;
    bool allowShareShowProfile = 1005;
    bool allowShowInGossip = 1006;
    bool allowShowMyAction = 1007;
    bool allowStrangeComment = 1008;
    bool allowUnfollowerComment = 1009;
    bool allowUseLinkmic = 1010;
    ImageModel avatarJpg = 1012;
    string backgroundImgUrl = 1013;
    int32 blockStatus = 1016;
    int32 commentRestrict = 1017;
    string constellation = 1018;
    int32 disableIchat = 1019;
    int64 enableIchatImg = 1020;
    int32 exp = 1021;
    bool foldStrangerChat = 1023;
    int64 followStatus = 1024;
    int32 ichatRestrictType = 1027;
    string idStr = 1028;
    bool isFollower = 1029;
    bool isFollowing = 1030;
    bool needProfileGuide = 1031;
    bool pushCommentStatus = 1033;
    bool pushDigg = 1034;
    bool pushFollow = 1035;
    bool pushFriendAction = 1036;
    bool pushIchat = 1037;
    bool pushStatus = 1038;
    bool pushVideoPost = 1039;
    bool pushVideoRecommend = 1040;
    string verifiedReason = 1043;
    bool enableCarManagementPermission = 1044;
    repeated LiveEventInfo upcomingEventList = 1045;
    string scmLabel = 1046;
    EcommerceEntrance ecommerceEntrance = 1047;
    bool isBlock = 1048;
    bool isSubscribe = 1090;
    bool isAnchorMarked = 1091;
    
    enum LinkmicStatus {
    	LINKMIC_STATUS_DISABLE = 0;
    	LINKMIC_STATUS_ENABLE = 1;
    	LINKMIC_STATUS_JUST_FOLLOWING = 2;
    	LINKMIC_STATUS_MULTI_LINKING = 3;
    	LINKMIC_STATUS_MULTI_LINKING_ONLY_FOLLOWING = 4;
    }
    message ComboBadgeInfo {
    	ImageModel icon = 1;
    	int64 comboCount = 2;
    

	}
    message FansClubInfo {
    	bool isSleeping = 1;
    	int64 fansLevel = 2;
    	int64 fansScore = 3;
    	ImageModel badge = 4;
    	int64 fansCount = 5;
    	string fansClubName = 6;
    

	}
    message OwnRoom {
    	repeated int64 roomIdList = 1;
    

	}

}

message UseSmokeCard {
    SmokeCardInfo cardInfo = 1;
    int64 anchorId = 2;
    Text displayContent = 3;
    

}

message WebcastAvatarGenerateResultMessage {
    CommonMessageData baseMessage = 1;
    Avatar avatar = 2;
    

}

message AudienceCancelContent {
    int64 fromUserId = 1;
    User user = 2;
    

}

message StringBadge {
    BadgeDisplayType badgeDisplayType = 1;
    string contentStr = 2;
    
    enum BadgeDisplayType {
    	BADGE_DISPLAY_TYPE_UNKNOWN = 0;
    	BADGE_DISPLAY_TYPE_IMAGE = 1;
    	BADGE_DISPLAY_TYPE_TEXT = 2;
    	BADGE_DISPLAY_TYPE_STRING = 3;
    	BADGE_DISPLAY_TYPE_COMBINE = 4;
    }

}

message WebcastRankTextMessage {
    CommonMessageData baseMessage = 1;
    RankTestMessageScene scene = 2;
    int64 ownerIdxBeforeUpdate = 3;
    int64 ownerIdxAfterUpdate = 4;
    Text selfGetBadgeMsg = 5;
    Text otherGetBadgeMsg = 6;
    int64 curUserId = 7;
    
    enum RankTestMessageScene {
    	RANK_TEST_MESSAGE_SCENE_UNKNOWN = 0;
    	RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN = 1;
    }

}

message EmoteModel {
    string emoteId = 1;
    ImageModel image = 2;
    AuditStatus auditStatus = 3;
    string uuid = 4;
    EmoteType emoteType = 5;
    ContentSource contentSource = 6;
    EmotePrivateType emotePrivateType = 7;
    string packageId = 8;
    AuditInfo auditInfo = 9;
    RewardCondition rewardCondition = 10;
    EmoteUploadInfo emoteUploadInfo = 11;
    int64 createTime = 12;
    EmoteScene emoteScene = 13;
    
    enum EmoteScene {
    	EMOTE_SCENE_SUBSCRIPTION = 0;
    	EMOTE_SCENE_GAME = 1;
    }
    enum EmoteType {
    	EMOTE_TYPE_NORMAL = 0;
    	EMOTE_TYPE_WITH_STICKER = 1;
    }
    enum ContentSource {
    	CONTENT_SOURCE_UNKNOWN = 0;
    	CONTENT_SOURCE_NORMAL = 1;
    	CONTENT_SOURCE_CAMERA = 2;
    }
    enum RewardCondition {
    	REWARD_CONDITION_SUBSCRIPTION = 0;
    	REWARD_CONDITION_SUB_WAVE_CUSTOM = 1;
    }
    enum EmotePrivateType {
    	EMOTE_PRIVATE_TYPE_NORMAL = 0;
    	EMOTE_PRIVATE_TYPE_SUB_WAVE = 1;
    	EMOTE_PRIVATE_TYPE_GUESSING = 101;
    }
    enum AuditStatus {
    	AUDIT_STATUS_UNKNOWN = 0;
    	AUDIT_STATUS_PASS = 1;
    	AUDIT_STATUS_FAILED = 2;
    	AUDIT_STATUS_REVIEWING = 3;
    	AUDIT_STATUS_FORBIDDEN = 4;
    }

}

message SubWaveStrikeInfo {
    int64 startTime = 1;
    int64 endTime = 2;
    int64 round = 3;
    WaveStatus status = 4;
    repeated EmoteModel emoteList = 5;
    WaveReward strikeReward = 6;
    int64 strikeRecordId = 7;
    int64 strikeTargetCount = 8;
    
    enum WaveStatus {
    	WAVE_STATUS_RUNNING = 0;
    	WAVE_STATUS_FINISHED = 1;
    	WAVE_STATUS_FAILED = 2;
    	WAVE_STATUS_STRIKE = 3;
    }

}

message WebcastOChannelModifyMessage {
    CommonMessageData baseMessage = 1;
    int64 endTimeStamp = 2;
    int64 channelUid = 3;
    

}

message InviteTopHostInfo {
    string rankType = 1;
    int64 topIndex = 2;
    

}

message GiftPage {
    int32 pageType = 1;
    string pageName = 2;
    repeated Gift gifts = 3;
    bool display = 4;
    GiftOperation operation = 5;
    string eventName = 6;
    GiftPanelBanner pagePanelBanner = 7;
    repeated Gift frequentlyUsedGifts = 8;
    map<int64, ForceInsertMetricsItem> forceInsertMetrics = 9;
    string region = 10;
    map<int64, int64> forceInsertPriorityMap = 11;
    repeated Gift favouriteGifts = 12;
    repeated Gift backfillGifts = 13;
    bool useBackfillSpecialText = 14;
    repeated GiftGroupInTab groupsInTab = 15;
    
    message GiftGroupInTab {
    	int32 groupInTab = 1;
    	Text title = 2;
    	Text description = 3;
    

	}

}

message JoinGroupReq {
    LinkCommon common = 1;
    GroupPlayer myself = 2;
    GroupPlayer target = 3;
    int32 type = 4;
    int64 groupChannelId = 5;
    repeated ContentPositionMessage contentPositionMessage = 6;
    BizJoinGroupParams cohostReqExtra = 9527;
    

}

message WebcastPictionaryUpdateMessage {
    CommonMessageData baseMessage = 1;
    int64 correctCount = 2;
    int64 roundId = 3;
    

}

message SupportedActionsWrapper {
    int64 actionType = 1;
    

}

message TaskPeriodConfig {
    int64 taskStartTime = 1;
    int64 duration = 2;
    int64 targetStartTimestamp = 3;
    int32 clickAction = 11;
    BattlePrompt clickToastPrompt = 12;
    int32 promptType = 21;
    BattlePrompt taskStaticPrompt = 22;
    int64 progressTarget = 23;
    int32 targetType = 24;
    ImageModel icon = 25;
    string clickActionSchemaUrl = 26;
    

}

message CapsuleBizParamsAnchorPinPerk {
    int64 pinId = 1;
    int32 pinCardType = 2;
    string templateId = 3;
    

}

message Hashtag {
    int64 id = 1;
    string title = 2;
    ImageModel image = 3;
    HashtagNamespace namespace = 4;
    
    enum HashtagNamespace {
    	HASHTAG_NAMESPACE_GLOBAL = 0;
    	HASHTAG_NAMESPACE_GAMING = 1;
    }

}

message UserModelPredictionData {
    int64 userId = 1;
    map<string, double> modelPredictionData = 2;
    

}

message TextPieceImage {
    ImageModel imageModel = 1;
    

}

message WalletPackage {
    string iapId = 1;
    string usdPriceShow = 2;
    

}

message LinkmicListResponse {
    int64 totalPositionCount = 1;
    repeated CohostListUser users = 2;
    

}

message WebcastGiftGuideMessage {
    CommonMessageData baseMessage = 1;
    Text content = 2;
    int64 giftId = 3;
    bool hasSent = 4;
    string guideType = 5;
    int64 displaySeconds = 6;
    string triggerName = 7;
    string schemaUrl = 8;
    bool shouldUseConfig = 9;
    repeated GuidePageResource guidePageResources = 10;
    string templateType = 11;
    GuideTarget guideTarget = 12;
    string biz = 13;
    repeated string tags = 14;
    repeated int64 giftIds = 15;
    bool useServerConfig = 16;
    string subTriggerName = 17;
    

}

message WebcastPartnershipGameOfflineMessage {
    CommonMessageData baseMessage = 1;
    repeated OfflineGameInfo offlineGameList = 2;
    
    message OfflineGameInfo {
    	string taskId = 1;
    	string toastText = 2;
    	int32 taskListLen = 3;
    	OfflineType offlineType = 4;
    
    	enum OfflineType {
    		OFFLINE_TYPE_TASK_OFFLINE = 0;
    		OFFLINE_TYPE_EVENT_OFFLINE = 1;
    		OFFLINE_TYPE_DROPS_OFFLINE = 2;	
    }

	}

}

message NoticeboardOfficialTemplateUpdateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool isSuccess = 1;
    	NoticeboardTemplate template = 2;
    

	}

}

message GetNoticeboardMaterialContentResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	string mediaNodeId = 1;
    	ConvertNoticeboardMaterialInfo convertNoticeboardMaterialInfo = 2;
    	int64 createTime = 3;
    	int64 updateTime = 4;
    

	}

}

message GiftBoxInfo {
    int64 capacity = 1;
    bool isPrimaryBox = 2;
    string schemeUrl = 3;
    

}

message BattleComboInfo {
    int64 userId = 1;
    int64 comboStatus = 2;
    int64 comboCount = 3;
    string comboIconUrl = 4;
    int32 comboType = 5;
    string comboRuleGuideSchema = 6;
    

}

message BannerInRoomCollection {
    BannerInfo topRightBanner = 1;
    BannerInfo bottomRightBanner = 2;
    BannerInfo giftPanelBanner = 3;
    BannerInfo middleBanner = 4;
    BannerInfo activityTopRightBanner = 5;
    BannerInfo topLeft = 6;
    BannerInfo liveScene = 7;
    
    message BannerInfo {
    	string url = 1;
    	repeated BannerInRoom bannerList = 2;
    	ImageModel animationImage = 3;
    	BannerCollapseInfo collapseInfo = 4;
    	int32 height = 5;
    	int32 width = 6;
    	string lynxContainerUrl = 7;
    	int64 containerType = 8;
    

	}

}

message StarlingTranslateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	repeated StarlingTranslateInfo starlingTranslateInfo = 1;
    

	}

}

message RiskCtl {
    bool disableSendGift = 1;
    string errorMsg = 2;
    string toastReason = 3;
    

}

message CriticalStrikeCardInfo {
    string cardNameKey = 1;
    ImageModel cardImage = 2;
    int64 sendTimeSec = 3;
    BattleUserInfo sendUser = 4;
    int64 effectLastDuration = 5;
    int64 criticalStrikeRateLow = 6;
    int64 criticalStrikeRateHigh = 7;
    int64 multiple = 8;
    string giftNameKey = 9;
    string ruleUrl = 10;
    int64 effectTimeSec = 11;
    int64 toAnchorId = 12;
    string toAnchorIdStr = 13;
    

}

message RoomAudienceMultiGuestPermissionInfo {
    bool roomPackSuccessFlag = 1;
    MultiGuestPermissionInfo permissionInfo = 2;
    

}

message GetStateReq {
    StateReqCommon common = 1;
    int64 clientVersion = 2;
    

}

message FeedRoomLabel {
    int64 location = 1;
    Text text = 2;
    ImageModel icon = 3;
    string logExtra = 4;
    string backgroundColor = 5;
    ImageModel bgImage = 6;
    

}

message TeamRankBonusTime {
    int64 startTimestamp = 2;
    int64 endTimestamp = 3;
    bool showAnimation = 4;
    int64 bonusRate = 5;
    int64 bonusTimeGiftId = 6;
    

}

message BizResumeParams {
    bool needShowInfo = 1;
    bool needGuestShowdown = 2;
    

}

message WebcastOChannelAnchorMessage {
    CommonMessageData baseMessage = 1;
    int64 startTimeStamp = 2;
    int64 endTimeStamp = 3;
    int32 roleType = 4;
    bool existLinkmic = 5;
    int32 linkmicType = 6;
    

}

message EcDrawEntity {
    int32 type = 1;
    int32 subType = 2;
    int64 activityId = 3;
    ImageModel incentiveImage = 11;
    int64 incentiveRecordId = 12;
    

}

message InviteResponse {
    int64 channelId = 2;
    RTCExtraInfo rtcInfo = 3;
    string inviterLinkMicId = 4;
    string inviteeLinkMicId = 5;
    int64 inviteSeqId = 6;
    BizInviteResponse multiGuestRespExtra = 9527;
    

}

message WebcastLinkmicAudienceNoticeMessage {
    CommonMessageData baseMessage = 1;
    int32 noticeType = 2;
    LinkMicAudienceTurnOnGuide turnOnGuide = 3;
    LinkMicAudienceInviteGuide inviteGuide = 4;
    LinkmicAudienceInviteGroupChatMemberGuide groupChatMemberInviteGuide = 5;
    
    message LinkMicAudienceNoticeText {
    	string text = 1;
    

	}
    message LinkMicAudienceInviteGuide {
    	LinkMicAudienceNoticeText content = 1;
    	LinkMicAudienceNoticeText buttonContent = 2;
    	User user = 3;
    	int32 displayStrategy = 4;
    	string linkmicAudienceInviteNoticeReason = 5;
    

	}
    message LinkMicAudienceTurnOnGuide {
    	LinkMicAudienceNoticeText content = 1;
    	LinkMicAudienceNoticeText buttonContent = 2;
    

	}

}

message GuideKeywordsResponse {
    Data data = 1;
    
    message UserInfo {
    	bool isInEea = 1;
    	bool hasEverRecharged = 2;
    	int64 suggestedMinCoins = 3;
    	int64 suggestedMaxCoins = 4;
    	string coinExchangePrompt = 5;
    

	}
    message Data {
    	int64 version = 1;
    	UserInfo userInfo = 2;
    	repeated KeywordsLibrary keywordsLibrary = 3;
    

	}

}

message BattleBonusStatus {
    int32 bonusPeriod = 1;
    BattlePrompt enterRoomPrompt = 2;
    int64 taskProgress = 11;
    bool userAssisted = 12;
    BattlePrompt rewardSettlePrompt = 13;
    int64 rewardSettleDuration = 14;
    int64 rewardSettleStatus = 15;
    

}

message BizJoinChannelResponseData {
    int32 layoutTypeAction = 1;
    int32 fixMicNumAction = 2;
    

}

message PictionaryStatistics {
    int64 guessCorrectUv = 1;
    int64 guessTotalPv = 2;
    User firstUser = 3;
    

}

message LinkerRandomMatchContent {
    User user = 1;
    int64 roomId = 2;
    int64 inviteType = 3;
    string matchId = 4;
    int64 innerChannelId = 5;
    

}

message CapsuleBizParamsRandomGift {
    int64 round = 1;
    string effectNameKey = 2;
    Gift gift = 3;
    int64 type = 4;
    bool filterHost = 5;
    

}

message LinkerEnterContent {
    repeated ListUser listUsers = 1;
    LinkmicMultiLiveEnum MultiLiveType = 2;
    MultiLiveAnchorPanelSettings anchorSettingInfo = 3;
    
    enum LinkmicMultiLiveEnum {
    	LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0;
    	LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1;
    }

}

message LiveStreamGoalContributor {
    int64 userId = 1;
    ImageModel avatar = 2;
    string displayId = 3;
    int64 score = 4;
    string userIdStr = 5;
    bool inRoom = 6;
    bool isFriend = 7;
    bool followByOwner = 9;
    bool isFistContribute = 10;
    repeated SubGoalContribution subGoalContributions = 11;
    

}

message WebcastPartnershipTaskShowMessage {
    CommonMessageData baseMessage = 1;
    int32 changeMode = 2;
    string taskId = 3;
    bool hasShowTask = 4;
    

}

message InviteBizContent {
    MultiLiveAnchorPanelSettings multiLiveAnchorPanelSettings = 1;
    ContentInviteSource inviteSource = 2;
    User operatorUserInfo = 3;
    LinkMicUserAdminType operatorLinkAdminType = 4;
    User inviteeUserInfo = 5;
    LinkmicShareRevenueSetting shareRevenueSetting = 6;
    
    enum LinkmicShareRevenueSetting {
    	LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET = 0;
    	LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN = 1;
    	LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE = 2;
    }
    enum ContentInviteSource {
    	CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN = 0;
    	CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE = 1;
    	CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE = 2;
    	CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE = 3;
    	CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE = 4;
    }
    enum LinkMicUserAdminType {
    	LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0;
    	LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1;
    	LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2;
    }

}

message GiftsInfo {
    int64 newGiftId = 1;
    int64 mFastGiftId = 3;
    string giftWords = 4;
    repeated GiftGroupCount giftGroupInfos = 5;
    bool hideRecharge = 10;
    ImageModel giftEntranceIcon = 11;
    repeated GiftComboInfo giftComboInfos = 13;
    bool showFirstRechargeEntrance = 14;
    bool enableFirstRechargeDynamicEffect = 15;
    LiveLimitedTimeDiscountGiftInfo firstRechargeGiftInfo = 16;
    LiveLimitedTimeDiscountGiftInfo compensationGiftInfo = 17;
    GiftIconInfo giftIconInfo = 18;
    int64 recentlySentColorGiftId = 19;
    int64 defaultLocColorGiftId = 20;
    ImageModel colorGiftIconAnimation = 21;
    int64 recommendRandomGiftId = 22;
    GiftPollInfo giftPollInfo = 23;
    RiskCtl riskCtl = 24;
    FreqLimitGiftInfo freqLimitGiftInfo = 25;
    bool isUniversal = 26;
    ImageModel bannerGiftBoxIcon = 27;
    bool isDisplayGiftBox = 28;
    string giftBoxSchemeUrl = 29;
    ImageModel liveGoalLabelIcon = 30;
    GiftPanelBanner liveGoalBanner = 31;
    repeated LimitedTimeRewardGiftInfo limitedTimeRewardGiftInfos = 32;
    TeamRankProgress teamRankProgress = 33;
    ImageModel panelGiftGalleryIcon = 34;
    string giftGalleryDetailPageSchemeUrl = 35;
    string strategyContext = 36;
    GiftChallengeProgress giftChallengeProgress = 37;
    GiftGalleryInfo giftGalleryInfo = 38;
    BatchGiftInfo batchGiftInfo = 39;
    bool isVaultEoyBonusEligible = 40;
    UGPointsGiftInfo pointsGiftInfo = 41;
    LevelUpGiftInfo levelUpGiftInfo = 42;
    BeaconBubbleInfo beaconBubbleInfo = 43;
    ServerStrategyContext serverStrategyContext = 44;
    
    message BatchGiftInfo {
    	int64 dismissExpireSeconds = 1;
    	int64 consumeLimit = 2;
    

	}
    message BeaconBubbleInfo {
    	ImageModel liveGoalIcon = 1;
    	ImageModel anchorGalleryIcon = 2;
    	string liveGoalSchemaUrl = 3;
    

	}
    message GiftGalleryInfo {
    	string anchorRankingLeague = 1;
    	string galleryRankingLeague = 2;
    

	}
    message LevelUpGiftInfo {
    	int64 giftId = 1;
    	int64 leftCountToLevelUp = 2;
    	int64 levelUpCount = 3;
    	int64 currentCount = 4;
    	int64 numOfUpgradeGiftsLeft = 5;
    	string showId = 6;
    	int64 minimumLevelGrade = 7;
    

	}
    message LimitedTimeRewardGiftInfo {
    	int64 giftId = 1;
    	int64 validStart = 2;
    	int64 validEnd = 3;
    	GiftPanelBanner giftPanelBanner = 4;
    

	}
    message UGPointsGiftInfo {
    	int64 maxAnchorTimes = 1;
    	bool hasSendGiftsInHistory = 2;
    	int64 validStartAt = 3;
    	int64 validEndAt = 4;
    

	}
    message ServerStrategyContext {
    	repeated int64 previousSentGiftIds = 1;
    

	}

}

message OrganizationModel {
    string name = 1;
    string desc = 2;
    string detailUrl = 3;
    string donateLink = 4;
    ImageModel icon = 5;
    string organizationId = 6;
    

}

message WebcastInteractiveEffectMessage {
    CommonMessageData baseMessage = 1;
    string triggerData = 2;
    

}

message GiftGoalVoiceAlterSwitch {
    int32 value = 1;
    

}

message ApplyGuideResponse {
    ResponseData data = 1;
    Extra extra = 2;
    
    message ResponseData {
    	bool isDisplay = 1;
    	int32 displayStrategy = 2;
    	bool triggerAgain = 3;
    

	}
    message Extra {
    	int64 now = 1;
    

	}

}

message CancelJoinGroupReq {
    LinkCommon common = 1;
    GroupPlayer myself = 2;
    GroupPlayer target = 3;
    int32 type = 4;
    int64 groupChannelId = 5;
    

}

message WebcastCohostTopicMessage {
    CommonMessageData baseMessage = 1;
    int32 action = 2;
    CohostTopic topic = 3;
    TopicSetContent topicSetContent = 5;
    HeatUpdateContent heatUpdateContent = 6;
    TopicSessionStatus sessionStatus = 21;
    

}

message CancelJoinGroupResp {
    LinkMicCommonResp commonResp = 1;
    

}

message ReserveContent {
    User reserver = 1;
    int64 reserverRoomId = 2;
    int64 redDotNum = 3;
    int64 createdTimestamp = 4;
    int64 reservationAnchorCount = 5;
    

}

message WebcastGiftUnlockMessage {
    CommonMessageData baseMessage = 1;
    repeated Gift gifts = 2;
    Text bubbleText = 3;
    

}

message GetShowSettingsParams {
    

}

message WebcastEcDrawMessage {
    CommonMessageData baseMessage = 1;
    EcDrawEntity entity = 2;
    

}

message GiftPageByCreator {
    int32 pageType = 1;
    string pageName = 2;
    repeated GiftStructByCreator gifts = 3;
    bool display = 4;
    

}

message BannerInfo {
    string title = 1;
    string subTitle = 2;
    string textColor = 3;
    string leftColor = 4;
    string rightColor = 5;
    string coreImageUrl = 6;
    string backgroundImageUrl = 7;
    int64 gradientAngle = 8;
    int64 priority = 9;
    string bannerUrl = 10;
    int64 bannerId = 11;
    

}

message Playbook {
    int64 playbookId = 1;
    SimpleUser authorInfo = 2;
    PlaybookContent content = 3;
    int64 totalFavorites = 4;
    int64 totalUsage = 5;
    int64 createTime = 6;
    int64 updateTime = 7;
    bool isUpdatedVersion = 8;
    bool isMyFavorite = 9;
    

}

message MatchInfo {
    int64 critical = 1;
    bool effectCardInUse = 2;
    MultiplierType multiplierType = 3;
    int64 multiplierValue = 4;
    
    enum MultiplierType {
    	MULTIPLIER_TYPE_UNSPECIFIED = 0;
    	MULTIPLIER_TYPE_CRITICAL_STRIKE = 1;
    	MULTIPLIER_TYPE_TOP_2 = 2;
    	MULTIPLIER_TYPE_TOP_3 = 3;
    }

}

message CreateInfoResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	int64 tnsReportIntervalMs = 1;
    	int64 cliTnsCollectIntervalMs = 2;
    	OpenLsNotifyInfo openLsNotify = 3;
    	int64 serverTimestamp = 4;
    	bool hasLiveStudioLogin = 5;
    	bool haveMutilGuestPermission = 6;
    	bool haveDualDeviceCamera = 7;
    	bool haveScreenshotRecord = 8;
    	Text tips = 9;
    	InGameInfo inGameInfo = 10;
    	bool useCustomCover = 11;
    	bool allowMultiStream = 12;
    	bool enableLiveStudioMonitor = 13;
    	GameRevenueTipsMessage revenueTips = 14;
    	GameBannerContainer bannerData = 15;
    	MonetizationTipsConfig monetizationTipsConfig = 16;
    	int64 anchorFirstGameGoLiveTs = 17;
    	bool isGameAnchor = 18;
    	int64 userSettingDetail = 19;
    	int64 guessResultNoticeTime = 20;
    

	}

}

message Top2CardInfo {
    CommonCardInfo common = 1;
    

}

message RivalsGameTag {
    int64 tagId = 1;
    string tagDisplayText = 2;
    

}

message GiftChallengeProgress {
    GiftChallengeStatus status = 1;
    int64 currentPoints = 2;
    repeated StageData stageData = 3;
    int64 challengeId = 4;
    
    enum GiftChallengeStatus {
    	GIFT_CHALLENGE_STATUS_UNKNOWN = 0;
    	GIFT_CHALLENGE_STATUS_NOT_JOINED = 1;
    	GIFT_CHALLENGE_STATUS_JOINED = 2;
    	GIFT_CHALLENGE_STATUS_COMPLETED = 3;
    }
    message StageData {
    	int64 totalPoints = 1;
    	int64 giftId = 2;
    

	}

}

message JoinDirectBizContent {
    int64 replyImMsgId = 1;
    MultiGuestOutsideRoomInviteSource outsideRoomInviteSource = 2;
    
    enum MultiGuestOutsideRoomInviteSource {
    	MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN = 0;
    	MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL = 1;
    	MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE = 2;
    	MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION = 3;
    }

}

message TopHostInfo {
    string rankType = 1;
    int64 topIndex = 2;
    

}

message ShowConfig {
    int64 durationPerGuest = 1;
    bool allowOpenMicFreely = 2;
    int64 transitionDurationOfConfig = 3;
    

}

message BoostCard {
    int64 mCardId = 1;
    int32 mTaskSource = 2;
    int64 mTaskId = 3;
    

}

message BattleNoticeAnchorGiftGuide {
    BattleNoticeText content = 1;
    

}

message PaidContentInfo {
    bool paidContentPermission = 1;
    string paidContentLiveData = 2;
    

}

message GroupChannelUser {
    int64 channelId = 1;
    GroupStatus status = 2;
    JoinType type = 3;
    AllListUser allUser = 4;
    int64 joinTime = 5;
    int64 linkedTime = 6;
    GroupPlayer ownerUser = 7;
    string groupLinkmicId = 8;
    
    enum JoinType {
    	JOIN_TYPE_UNKNOWN = 0;
    	JOIN_TYPE_CHANNEL_APPLY = 1;
    	JOIN_TYPE_CHANNEL_INVITE = 2;
    	JOIN_TYPE_GROUP_APPLY = 100;
    	JOIN_TYPE_GROUP_APPLY_FOLLOW = 101;
    	JOIN_TYPE_GROUP_INVITE = 102;
    	JOIN_TYPE_GROUP_INVITE_FOLLOW = 103;
    	JOIN_TYPE_GROUP_OWNER_JOIN = 104;
    }
    enum GroupStatus {
    	GROUP_STATUS_UNKNOWN = 0;
    	GROUP_STATUS_WAITING = 1;
    	GROUP_STATUS_LINKED = 3;
    }

}

message QuickChatContent {
    int32 type = 1;
    string text = 2;
    string textStarlingKey = 3;
    EmoteModel emote = 4;
    

}

message FeedBanner {
    string avgColor = 1;
    string title = 2;
    repeated string urlList = 3;
    string uri = 4;
    int32 height = 5;
    int32 width = 6;
    int64 id = 8;
    string schemaUrl = 9;
    int32 bannerType = 11;
    int64 businessType = 12;
    string businessSource = 13;
    string activityId = 14;
    

}

message AnchorGrowLevelImMsgTaskDone {
    int64 level = 1;
    bool isfinallevel = 2;
    bool iscompletelevel = 3;
    int64 taskid = 4;
    

}

message GiftListByCreatorResponse {
    Data data = 1;
    Extra extra = 2;
    
    message Data {
    	GiftsInfoByCreator giftsInfo = 1;
    	repeated GiftPageByCreator pages = 2;
    	GiftActivityCreator activity = 3;
    	repeated GiftActivityCreator recommendationActivities = 4;
    

	}
    message Extra {
    	string logId = 1;
    

	}

}

message PermitApplyContent {
    Player approver = 1;
    string approverLinkMicId = 2;
    MicPositionData positionData = 3;
    AgreeStatus replyStatus = 4;
    DSLConfig dsl = 5;
    Player applier = 6;
    Player operator = 7;
    string applierLinkMicId = 8;
    repeated string linkedUserUiPositions = 9;
    string applierRtcToken = 10;
    repeated PosIdentity uiPos = 11;
    
    enum AgreeStatus {
    	AGREE_STATUS_AGREE_UNKNOWN = 0;
    	AGREE_STATUS_AGREE = 1;
    	AGREE_STATUS_REJECT = 2;
    }

}

message DispersionParam {
    int64 maxDelayMs = 1;
    int64 minDelayMs = 2;
    

}

message WebcastGiftMessage {
    CommonMessageData baseMessage = 1;
    int32 fanTicketCount = 3;
    int32 groupCount = 4;
    int32 repeatCount = 5;
    int32 comboCount = 6;
    User fromUser = 7;
    User toUser = 8;
    int32 repeatEnd = 9;
    TextEffect textEffect = 10;
    int64 groupId = 11;
    int64 incomeTaskgifts = 12;
    int64 roomFanTicketCount = 13;
    GiftIMPriority priority = 14;
    Gift mGift = 15;
    string mLogId = 16;
    int64 sendType = 17;
    PublicAreaCommon publicAreaCommon = 18;
    Text trayDisplayText = 19;
    int64 bannedDisplayEffects = 20;
    GiftTrayInfo mTrayInfo = 21;
    GiftMonitorInfo giftMonitorInfo = 23;
    int64 colorId = 24;
    bool isFirstSendGift = 25;
    Text displayTextForAnchor = 26;
    Text displayTextForAudience = 27;
    string orderId = 28;
    GiftsBoxInfo giftsInBox = 29;
    MsgFilter msgFilter = 30;
    repeated LynxGiftExtra lynxExtra = 31;
    UserIdentity userIdentity = 32;
    MatchInfo matchInfo = 33;
    LinkmicGiftExpressionStrategy linkmicGiftExpressionStrategy = 34;
    FlyingMicResources flyingMicResources = 35;
    bool disableGiftTracking = 36;
    AssetsModel asset = 37;
    GiftMessageVersion version = 38;
    repeated SponsorshipInfo sponsorshipInfo = 39;
    FlyingMicResources flyingMicResourcesV2 = 40;
    PublicAreaMessageCommon publicAreaMessageCommon = 41;
    string signature = 42;
    string signatureVersion = 43;
    bool multiGenerateMessage = 44;
    string toMemberId = 45;
    int64 toMemberIdInt = 46;
    string toMemberNickname = 47;
    InteractiveGiftInfo interactiveGiftInfo = 48;
    
    enum LinkmicGiftExpressionStrategy {
    	LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1 = 0;
    	LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1 = 1;
    	LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2 = 2;
    }
    enum GiftMessageVersion {
    	GIFT_MESSAGE_VERSION_0 = 0;
    	GIFT_MESSAGE_VERSION_1 = 1;
    }
    message InteractiveGiftInfo {
    	int64 crossScreenDelay = 1;
    	int64 crossScreenRole = 2;
    	GiftMessageIgnoreConfig ignoreConfig = 3;
    	int64 uniqId = 4;
    	int64 toUserTeamId = 5;
    
    	enum GiftMessageIgnoreConfig {
    		GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE = 0;
    		GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY = 1;
    		GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M = 2;
    		GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M = 3;	
    }

	}
    message SponsorshipInfo {
    	int64 giftId = 1;
    	int64 sponsorId = 2;
    	bool lightGiftUp = 3;
    	string unlightedGiftIcon = 4;
    	string giftGalleryDetailPageSchemeUrl = 5;
    	bool giftGalleryClickSponsor = 6;
    	bool becomeAllSponsored = 21;
    

	}

}

message CountdownForAllEndResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	CountdownForAllContent playContent = 2;
    

	}

}

message PermissionLevelInfo {
    int32 notFinishTaskNum = 1;
    int32 permissionLevel = 2;
    bool abnormal = 3;
    int32 cppVersion = 4;
    

}

message WebcastSubQueueMessage {
    CommonMessageData baseMessage = 1;
    int32 messageTypeAction = 2;
    SubQueue queue = 3;
    User currentUser = 4;
    

}

message BagItemPreUpdateInfo {
    int64 count = 1;
    int64 minExpireAt = 2;
    

}

message PollData {
    int64 pollId = 1;
    PollStatus pollStatus = 2;
    int64 startTime = 3;
    int64 endTime = 4;
    repeated PollOptionInfo pollOptionList = 5;
    PollKind pollKind = 6;
    string title = 7;
    User operator = 8;
    int64 templateId = 9;
    PollVoteLimit voteLimit = 14;
    int64 giftId = 15;
    int64 pollIndex = 16;
    string pollSponsor = 17;
    int64 pollUserCnt = 18;
    Gift gift = 19;
    PollEndType endType = 20;
    string suggestedQuestionKey = 21;
    bool isSuggestedQuestion = 22;
    int64 originalPollDurationMs = 23;
    
    enum PollStatus {
    	POLL_STATUS_PS_UNKNOWN = 0;
    	POLL_STATUS_ENABLE = 1;
    	POLL_STATUS_DISABLE = 2;
    }
    enum PollEndType {
    	POLL_END_TYPE_POLL_END_BY_TIME = 0;
    	POLL_END_TYPE_POLL_END_BY_OWNER = 1;
    	POLL_END_TYPE_POLL_END_BY_OTHER = 2;
    	POLL_END_TYPE_POLL_END_BY_ADMIN = 3;
    }
    enum PollKind {
    	POLL_KIND_NORMAL = 0;
    	POLL_KIND_GIFT = 1;
    	POLL_KIND_CUSTOMIZABLE = 2;
    	POLL_KIND_CUSTOMIZABLE_GIFT = 3;
    	POLL_KIND_QUICK_GIFT = 4;
    	POLL_KIND_EMOTE = 5;
    }

}

message TopicExtraInfo {
    int64 startTimeSec = 1;
    int64 endTimeSec = 2;
    int64 allRivals = 3;
    repeated ImageModel allRivalsAvatar = 4;
    

}

message CompetitionFinishResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	CompetitionFinish finishInfo = 1;
    

	}

}

message SortStatsTag {
    string key = 1;
    string value = 2;
    

}

message GuidePopupBanner {
    int32 bannerStyle = 1;
    int32 bannerContentType = 2;
    repeated User topCohostedPartners = 3;
    repeated Benefit benefits = 4;
    int32 recapTitleType = 5;
    string timestamp = 6;
    

}

message ProfileContent {
    bool useContent = 1;
    repeated IconConfig iconList = 2;
    NumberConfig numberConfig = 3;
    

}

message PollBasicInfo {
    string pollSponsor = 1;
    int64 giftId = 2;
    string title = 3;
    bool isSuggestedQuestion = 4;
    int64 userCnt = 5;
    Gift gift = 6;
    string pollIdStr = 7;
    string suggestedQuestionKey = 8;
    int64 pollDuration = 9;
    int64 timeRemain = 10;
    int64 pollIndex = 11;
    int64 templateId = 12;
    

}

message TextPiecePatternRef {
    string key = 1;
    string defaultPattern = 2;
    

}

message RTCBitRateMap {
    int32 xx_1 = 1;
    int32 xx_2 = 2;
    int32 xx_3 = 3;
    int32 xx_4 = 4;
    

}

message RoomDecoration {
    ImageModel image = 2;
    repeated int64 inputRect = 4;
    int64 maxLength = 8;
    int64 status = 9;
    int64 kind = 14;
    

}

message RoomHostMultiGuestPermissionInfo {
    bool roomPackSuccessFlag = 1;
    MultiGuestPermissionInfo permissionInfo = 2;
    

}

message BattleABTest {
    BattleABTestType abTestType = 1;
    int32 group = 2;
    
    enum BattleABTestType {
    	BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE = 0;
    	BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE = 1;
    	BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT = 2;
    	BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL = 3;
    	BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT = 4;
    	BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE = 5;
    	BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048 = 6;
    	BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE = 7;
    }

}

message GiftCollection {
    int64 round = 1;
    string effectNameKey = 2;
    Gift gift = 3;
    MessageType messageType = 4;
    bool isFilterHost = 5;
    string schemaUrl = 6;
    

}

message LivePermissionApplyResponse {
    ResponseData data = 1;
    
    message PermissionApplyInfo {
    	int32 mAnchorFansNum = 1;
    	int32 mForbiddenApplyCountdown = 2;
    	int32 mApplyNeedFansNum = 3;
    	int32 mTargetLiveTime = 4;
    	int32 mForbiddenApplyDays = 5;
    	int32 mApplyInvalidTime = 6;
    	int32 mNeedLiveTime = 7;
    	int32 mApplyStatus = 8;
    	int32 mApplySource = 9;
    

	}
    message ResponseData {
    	map<string, PermissionApplyInfo> permissionInfo = 1;
    

	}

}

message WebcastRoomBottomMessage {
    CommonMessageData baseMessage = 1;
    string color = 3;
    string actionContent = 6;
    string actionType = 7;
    int64 pushDisplayTime = 8;
    ImageModel actionIcon = 10;
    FlexImageModel newBackgroundImage = 11;
    string source = 12;
    

}

message ProtoMessageFetchResult {
    repeated BaseProtoMessage messages = 1;
    string cursor = 2;
    int64 fetchInterval = 3;
    int64 now = 4;
    string internalExt = 5;
    int32 fetchType = 6;
    map<string, string> routeParams = 7;
    int64 heartbeatDuration = 8;
    bool needAck = 9;
    string pushServer = 10;
    bool isFirst = 11;
    string historyCommentCursor = 12;
    bool historyNoMore = 13;
    
    message BaseProtoMessage {
    	string method = 1;
    	bytes payload = 2;
    	int64 msgId = 3;
    	int32 msgType = 4;
    	int64 offset = 5;
    	bool isHistory = 6;
    

	}

}

message FinishShowingGuestParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 showId = 3;
    int64 targetUserId = 4;
    

}

message EmoteUploadInfo {
    int64 userId = 1;
    UserEmoteUploadSource emoteUploadSource = 2;
    User userInfo = 3;
    string userIdStr = 4;
    
    enum UserEmoteUploadSource {
    	USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR = 0;
    	USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER = 1;
    	USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR = 2;
    }

}

message NoticeboardTemplateSaveResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool isSuccess = 1;
    	NoticeboardTemplate template = 2;
    

	}

}

message CompetitionInfo {
    CompetitionCommon bizCommon = 1;
    repeated CompetitionResultsTeamInfo teamInfos = 2;
    map<int64, CompetitionABInfo> abInfos = 4;
    TakeTheStageInfo takeTheStageInfo = 100;
    GroupShowInfo groupShowInfo = 101;
    
    message GroupShowInfo {
    	GroupShowStatus status = 1;
    	int64 endTimestamp = 2;
    	int64 actualEndTimestamp = 3;
    	int64 startTimestamp = 4;
    
    	enum GroupShowStatus {
    		GROUP_SHOW_STATUS_UNKNOWN = 0;
    		GROUP_SHOW_STATUS_STARTED = 1;
    		GROUP_SHOW_STATUS_FINISHED = 10;	
    }

	}

}

message WebcastDonationInfoMessage {
    CommonMessageData baseMessage = 1;
    string totalMoney = 2;
    string currency = 3;
    int64 totalUser = 4;
    

}

message WebcastGameMomentMessage {
    CommonMessageData baseMessage = 1;
    GameMomentMessageType messageType = 2;
    int64 eventTime = 3;
    int64 maxTime = 4;
    string uniqueId = 5;
    GameMomentEffectType momentEffects = 6;
    
    enum GameMomentMessageType {
    	GAME_MOMENT_MESSAGE_TYPE_UNKNOWN = 0;
    	GAME_MOMENT_MESSAGE_TYPE_VICTORY = 1;
    	GAME_MOMENT_MESSAGE_TYPE_HIGHLIGHT = 2;
    	GAME_MOMENT_MESSAGE_TYPE_DEFEAT = 3;
    	GAME_MOMENT_MESSAGE_TYPE_KILL_NUM = 4;
    	GAME_MOMENT_MESSAGE_TYPE_REMAIN_NUM = 5;
    }
    enum GameMomentEffectType {
    	GAME_MOMENT_EFFECT_TYPE_UNKNOWN = 0;
    	GAME_MOMENT_EFFECT_TYPE_GIFT_GUIDANCE = 1;
    	GAME_MOMENT_EFFECT_TYPE_QUICK_COMMENT = 2;
    }

}

message SearchBar {
    ImageModel bgImage = 1;
    string content = 2;
    

}

message FeedExtra {
    int64 cost = 5;
    int64 maxTime = 6;
    int64 minTime = 7;
    int32 total = 8;
    FeedBannerContainer bannerContainer = 9;
    string unreadExtra = 11;
    int32 style = 12;
    string hashtag_text = 13;
    string noResultReason = 16;
    string oceanReqInfo = 17;
    string exitGuide = 18;
    string exitGuideMusic = 19;
    

}

message GuestShowdownConfigChange {
    bool updateLoserNum = 1;
    int32 loserNum = 2;
    bool updateAddDuration = 3;
    int64 addDuration = 4;
    

}

message RoomResumeResponse {
    

}

message CaptionContent {
    string lang = 1;
    string content = 2;
    

}

message RoomMultiGuestLinkmicInfo {
    int64 packErrCode = 1;
    MultiGuestLinkmicInfo multiGuestLinkmicInfo = 2;
    string linkmicRoomCreateAbParam = 3;
    

}

message WebcastImDeleteMessage {
    CommonMessageData baseMessage = 1;
    repeated int64 deleteMsgIds = 2;
    repeated int64 deleteUserIds = 3;
    

}

message UpdateShowContentResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	ShowContent showContent = 2;
    

	}

}

message WebcastHashtagMessage {
    CommonMessageData baseMessage = 1;
    Hashtag hashtag = 2;
    

}

message GrowthJourneyBannerItem {
    string bannerContent = 1;
    string bannerSchema = 2;
    string bannerIcon = 3;
    string bannerFrequencyKey = 4;
    

}

message NoticeboardTemplateFetchListParams {
    int32 fetchType = 1;
    int64 roomId = 2;
    

}

message WebcastLinkMicBattleItemCard {
    CommonMessageData baseMessage = 1;
    int64 battleId = 2;
    BattleCardMsgType msgType = 3;
    CardObtainGuide cardObtainGuide = 4;
    UseCriticalStrikeCard useCriticalStrikeCard = 5;
    UseSmokeCard useSmokeCard = 6;
    AwardCardNotice awardCardNotice = 7;
    UseExtraTimeCard useExtraTimeCard = 8;
    UseSpecialEffectCard useSpecialEffectCard = 9;
    UsePotionCard usePotionCard = 10;
    UseWaveCard useWaveCard = 11;
    SpecialEffectNotice specialEffectNotice = 12;
    UseTop2Card useTop2Card = 13;
    UseTop3Card useTop3Card = 14;
    
    enum BattleCardMsgType {
    	BATTLE_CARD_MSG_TYPE_AWARD_CARD_NOTICE = 4;
    	BATTLE_CARD_MSG_TYPE_UNKNOWN_CARD_ACTION = 0;
    	BATTLE_CARD_MSG_TYPE_CARD_OBTAIN_GUIDE = 1;
    	BATTLE_CARD_MSG_TYPE_USE_CRITICAL_STRIKE_CARD = 2;
    	BATTLE_CARD_MSG_TYPE_USE_SMOKE_CARD = 3;
    	BATTLE_CARD_MSG_TYPE_USE_EXTRA_TIME_CARD = 5;
    	BATTLE_CARD_MSG_TYPE_USE_SPECIAL_EFFECT_CARD = 6;
    	BATTLE_CARD_MSG_TYPE_USE_POTION_CARD = 7;
    	BATTLE_CARD_MSG_TYPE_USE_WAVE_CARD = 8;
    	BATTLE_CARD_MSG_TYPE_SPECIAL_EFFECT_NOTICE = 9;
    	BATTLE_CARD_MSG_TYPE_USE_TOP_2_CARD = 10;
    	BATTLE_CARD_MSG_TYPE_USE_TOP_3_CARD = 11;
    }

}

message GuideKeywordsReportResponse {
    Data data = 1;
    
    message Data {
    

	}

}

message WebcastPrivilegeDynamicEffectMessage {
    CommonMessageData baseMessage = 1;
    Scene scene = 2;
    ResourceAttr resourceAttr = 3;
    DisplayControl control = 4;
    repeated Placeholder placeholderList = 5;
    int32 effectType = 6;
    StickerEffectModel stickerModel = 7;
    PrivilegeLogExtra privilegeLogExtra = 100;
    
    message ShadowConfig {
    	string shadowColor = 6;
    	int32 shadowDx = 7;
    	int32 shadowDy = 8;
    	int32 shadowRadius = 9;
    

	}
    message StrokeConfig {
    	string strokeColor = 1;
    	int32 strokeWidth = 2;
    

	}
    message FontStyle {
    	int32 maxLines = 1;
    	int32 fontSize = 2;
    	string fontColor = 3;
    	int32 weight = 4;
    	bool enableShadow = 5;
    	repeated ShadowConfig shadowConfigList = 6;
    	bool enableStroke = 7;
    	repeated StrokeConfig strokeConfigList = 8;
    	int32 horizontalAlign = 9;
    	int32 verticalAlign = 10;
    

	}
    message ImagePadding {
    	int32 leftPadding = 1;
    	int32 rightPadding = 2;
    	int32 topPadding = 3;
    	int32 bottomPadding = 4;
    

	}
    message Placeholder {
    	int32 placeType = 1;
    	string targetImage = 2;
    	int32 targetWidth = 3;
    	int32 targetHeight = 4;
    	Text text = 5;
    	FontStyle fontStyle = 6;
    	ImagePadding imagePadding = 7;
    

	}
    message StickerEffectModel {
    	string resourceId = 1;
    	Text text = 2;
    	int64 duration = 3;
    	string panelType = 4;
    

	}

}

message EffectInfo {
    int64 effectId = 1;
    int64 role = 2;
    int64 userId = 3;
    

}

message OnlineAudience {
    repeated Rank ranks = 1;
    Rank selfInfo = 2;
    string currency = 3;
    bool anchorShowContribution = 4;
    bool deprecated = 5;
    int64 total = 6;
    string ruleUrl = 7;
    DisplayConfig displayConfig = 8;
    int64 anonymous = 9;
    int64 previewCount = 10;
    
    message DisplayConfig {
    	bool showOnlinePanel = 1;
    	bool canPanelClick = 2;
    	bool showAvatarList = 3;
    	int64 avatarCount = 4;
    	bool showScore = 5;
    

	}
    message Rank {
    	User user = 1;
    	int64 score = 2;
    	int64 rank = 3;
    	string gapDescription = 4;
    	int64 userRestrictionLevel = 5;
    	RankUser rankUser = 6;
    

	}

}

message HashtagResponse {
    repeated Hashtag hashtags = 1;
    repeated GameTag gameTagList = 2;
    Hashtag gameHashTag = 3;
    repeated Hashtag obsHashTag = 4;
    repeated Hashtag liveVoiceHashtag = 5;
    repeated Hashtag liveStudioHashtag = 6;
    

}

message LinkerGuestCancelEnlargeContent {
    EnlargeScreenScene scene = 1;
    int32 isRejectEnlarge = 2;
    string cancelLinkmicId = 3;
    
    enum EnlargeScreenScene {
    	ENLARGE_SCREEN_SCENE_ENLARGE_UNKNOWN = 0;
    	ENLARGE_SCREEN_SCENE_ENLARGE_HOST_SCREEN = 1;
    	ENLARGE_SCREEN_SCENE_INVITE_ENLARGE_GUEST_SCREEN = 2;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_HOST = 3;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_GUEST = 4;
    	ENLARGE_SCREEN_SCENE_HOST_RECEIVE_CANCEL_ENLARGE = 5;
    	ENLARGE_SCREEN_SCENE_GET_ENLARGE_STATUS = 6;
    	ENLARGE_SCREEN_SCENE_ENLARGE_POSITION = 7;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_POSITION = 8;
    	ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_ALL = 9;
    	ENLARGE_SCREEN_SCENE_CHANGE_ENLARGE_RECORD = 10;
    }

}

message GiftColorInfo {
    int64 colorId = 1;
    string colorName = 2;
    repeated string colorValues = 3;
    ImageModel colorImage = 4;
    ImageModel giftImage = 5;
    int64 colorEffectId = 6;
    bool isDefault = 7;
    

}

message WebcastAnchorGetSubQuotaMessage {
    CommonMessageData baseMessage = 1;
    string description = 2;
    

}

message FrameInfo {
    string frameImgUrl = 1;
    int64 timestamp = 2;
    

}

message SortStatsTags {
    repeated SortStatsTag forAppLog = 1;
    repeated SortStatsTag forClientFunc = 2;
    

}

message WebcastOecLiveHotRoomMessage {
    CommonMessageData baseMessage = 1;
    map<string, string> pathMap = 2;
    int64 expireAt = 3;
    

}

message WebcastAudienceReserveUserStateMessage {
    CommonMessageData baseMessage = 1;
    int64 roomId = 2;
    AudienceReserveType type = 3;
    AudienceReserveUserInfo audienceReserveUserInfo = 4;
    AudienceReserveContent audienceReserveContent = 100;
    AudienceCancelContent audienceCancelContent = 101;
    AudienceReplyContent audienceReplyContent = 102;
    AudienceRejectContent audienceRejectContent = 103;
    
    enum AudienceReserveType {
    	AUDIENCE_RESERVE_TYPE_REJECT = 5;
    	AUDIENCE_RESERVE_TYPE_UNKNOWN_FIELD = 0;
    	AUDIENCE_RESERVE_TYPE_RESERVE = 1;
    	AUDIENCE_RESERVE_TYPE_CANCEL = 2;
    	AUDIENCE_RESERVE_TYPE_WAIT = 3;
    	AUDIENCE_RESERVE_TYPE_DONE = 4;
    }

}

message CountdownUser {
    int64 userId = 1;
    string linkmicId = 2;
    int64 score = 3;
    int32 completionProgressPercent = 4;
    string nickname = 5;
    string displayId = 6;
    

}

message WebcastRealtimeLiveCenterMethod {
    CommonMessageData baseMessage = 1;
    string roomId = 2;
    RealtimeLiveCenterBaseData baseInfo = 3;
    RealtimeLiveCenterTips tipsInfo = 4;
    RealtimeLiveCenterShopData shopInfo = 5;
    ColdStartStatData coldStartStatData = 6;
    RealtimeReminderWordInfoMsg reminderWordInfo = 7;
    

}

message CreateChannelContent {
    Player owner = 1;
    string ownerLinkMicId = 2;
    

}

message CeremonyEffect {
    ImageModel gradeBackground = 1;
    ImageModel avatarBorder = 2;
    

}

message LinkmicUserInfo {
    int64 userId = 1;
    string linkmicIdStr = 2;
    int64 roomId = 3;
    int64 linkedTime = 4;
    

}

message MaskLayer {
    Text title = 1;
    Text subTitle = 2;
    int32 maskLayerType = 3;
    PunishEventInfo punishInfo = 4;
    

}

message LiveStreamSubGoalGift {
    string name = 1;
    ImageModel icon = 2;
    int64 diamondCount = 3;
    int32 type = 4;
    

}

message SkinDrawerEntrance {
    int64 style = 1;
    ImageModel cover = 2;
    string title = 3;
    string titleKey = 4;
    

}

message MultiLiveAnchorPanelSettings {
    int64 userId = 1;
    int32 layoutType = 2;
    int32 fixMicNumAction = 3;
    int32 allowViewerReq = 4;
    int32 onlyAllowFollowerReq = 5;
    int32 applierSortSetting = 7;
    int64 applierSortGiftScoreThreshold = 8;
    int32 allowRequestFromFriends = 9;
    int32 allowRequestFromFollowers = 10;
    int32 allowRequestFromOthers = 11;
    int32 enableShowMultiGuestLayout = 12;
    

}

message StreamResolution {
    int32 streamResolution = 1;
    string resolutionText = 2;
    string resolutionDescribe = 3;
    int32 minBitRate = 4;
    

}

message ContentPositionMessage {
    string contentID = 1;
    ContentPositionType contentType = 2;
    
    enum ContentPositionType {
    	CONTENT_POSITION_TYPE_UNKNOWN = 0;
    	CONTENT_POSITION_TYPE_STREAM = 1;
    	CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT = 2;
    	CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE = 3;
    }

}

message EffectStruct {
    string name = 1;
    string hint = 2;
    UrlDataStruct hintIcon = 3;
    string sdkVersion = 4;
    string appVersion = 5;
    UrlDataStruct fileUrl = 6;
    UrlDataStruct iconUrl = 7;
    string id = 8;
    string effectId = 9;
    string devicePlatform = 10;
    repeated string types = 11;
    repeated string tags = 12;
    string tagsUpdatedAt = 13;
    string parent = 14;
    repeated string children = 15;
    int32 effectType = 16;
    repeated string music = 17;
    int32 source = 18;
    string designerId = 19;
    string schema = 20;
    repeated string requirements = 21;
    string extra = 22;
    bool isBusi = 23;
    string designerEncryptedId = 26;
    string sdkExtra = 27;
    string resourceId = 28;
    string adRawData = 29;
    repeated string bindIds = 30;
    int64 ptime = 31;
    string gradeKey = 32;
    string composerParams = 33;
    UrlDataStruct hintFile = 34;
    int64 useNumber = 35;
    repeated string typesSec = 36;
    repeated string requirementsSec = 37;
    string panel = 38;
    string modelNames = 39;
    string modelNamesSec = 40;
    int32 hintFileFormat = 41;
    string poiId = 42;
    bool isPoi = 43;
    repeated string challenge = 44;
    repeated string systemList = 45;
    string originalEffectId = 46;
    UrlDataStruct transFileUrl = 47;
    string templateEffectId = 48;
    int64 recTag = 49;
    TemplateEffectExtra templateEffectExtra = 50;
    DiffInfo fileDiff = 51;
    int32 provider = 52;
    int64 packageSize = 53;
    

}

message EmoteWithIndex {
    int32 index = 1;
    EmoteModel emoteModel = 2;
    

}

message ShowInfo {
    int64 showStartTime = 1;
    int64 showEndTime = 2;
    repeated User anchors = 3;
    string showIntroduction = 4;
    

}

message RivalExtraInfo {
    string text = 1;
    TextType text_type = 2;
    string label = 3;
    AnchorLayer anchorLayer = 4;
    LinkerInfo linkerInfo = 5;
    AnchorLinkmicUserSettings linkmicUserSettings = 6;
    InviteBlockReason inviteBlockReason = 8;
    LinkmicPlayType showPlayType = 9;
    Tag tag = 11;
    ReserveInfo reserveInfo = 12;
    DetailBlockReason detailBlockReason = 13;
    OptPairInfo optPairInfo = 14;
    TagV2 tagV2 = 15;
    int64 eoyLevel = 16;
    BattleInfo battleInfo = 17;
    CohostLayoutMode cohostLayoutMode = 18;
    RivalsGameTag gameTag = 19;
    
    enum TextType {
    	TEXT_TYPE_UNKNOWN = 0;
    	TEXT_TYPE_CURRO_OMF_AN_TICKET = 1;
    	TEXT_TYPE_TOTAL_DIAMOND_COUNT = 2;
    	TEXT_TYPE_DISTANCE = 3;
    	TEXT_TYPE_DISTANCE_CITY = 4;
    }
    enum AnchorLayer {
    	ANCHOR_LAYER_UNKNOWN = 0;
    	ANCHOR_LAYER_TOP = 1;
    	ANCHOR_LAYER_SMALL = 2;
    }
    enum InviteBlockReason {
    	INVITE_BLOCK_REASON_NONE = 0;
    	INVITE_BLOCK_REASON_IS_LINKING = 1;
    	INVITE_BLOCK_REASON_INVITATION_DENIED = 2;
    	INVITE_BLOCK_REASON_PERMISSION_DENIED = 3;
    	INVITE_BLOCK_REASON_LOW_CLIENT_VERSION = 4;
    	INVITE_BLOCK_REASON_ROOM_PAUSED = 5;
    	INVITE_BLOCK_REASON_LINK_MIC_FULL = 6;
    	INVITE_BLOCK_REASON_MATURE_THEME_NOT_MATCH = 7;
    	INVITE_BLOCK_REASON_RESERVE_FULL = 8;
    	INVITE_BLOCK_REASON_REGIONAL_BLOCK = 9;
    }
    enum LinkmicPlayType {
    	LINKMIC_PLAY_TYPE_PLAY_TYPE_INVITE = 0;
    	LINKMIC_PLAY_TYPE_PLAY_TYPE_APPLY = 1;
    	LINKMIC_PLAY_TYPE_PLAY_TYPE_RESERVE = 2;
    }
    enum DetailBlockReason {
    	DETAIL_BLOCK_REASON_BLOCK_REASON_NONE = 0;
    	DETAIL_BLOCK_REASON_IN_LINK_MIC = 100;
    	DETAIL_BLOCK_REASON_MULTI_HOST_FULL = 101;
    	DETAIL_BLOCK_REASON_IN_COHOST_LINK_MIC = 102;
    	DETAIL_BLOCK_REASON_DEAL_OTHER_INVITE = 103;
    	DETAIL_BLOCK_REASON_DEAL_OTHER_APPLY = 104;
    	DETAIL_BLOCK_REASON_IN_PK_STATUS = 105;
    	DETAIL_BLOCK_REASON_SELF_IN_PK_STATUS = 106;
    	DETAIL_BLOCK_REASON_IN_COHOST_INVITE_APPLY = 107;
    	DETAIL_BLOCK_REASON_IN_AUDIENCE_LINK_MIC = 108;
    	DETAIL_BLOCK_REASON_WAITING_AUTO_MATCH = 109;
    	DETAIL_BLOCK_REASON_INVITE_NEED_TO_JOIN = 110;
    	DETAIL_BLOCK_REASON_JOIN_NEED_TO_INVITE = 111;
    	DETAIL_BLOCK_REASON_IN_TAKE_THE_STAGE_STATUS = 112;
    	DETAIL_BLOCK_REASON_SELF_IN_TAKE_THE_STAGE_STATUS = 113;
    	DETAIL_BLOCK_REASON_NOLINK_MIC_PERMISSION = 200;
    	DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_SETTING_CLOSED = 202;
    	DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_NOT_FOLLOWER = 203;
    	DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_BLOCK_INVITATION_OF_LIVE = 204;
    	DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_FRIEND_INVITE = 205;
    	DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_FRIEND_APPLY = 206;
    	DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_NOT_FRIEND_INVITE = 207;
    	DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_NOT_FRIEND_APPLY = 208;
    	DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_BLOCK_INVITATION_OF_MULTI_HOST = 209;
    	DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_BLOCK_APPLY_OF_MULTI_HOST = 210;
    	DETAIL_BLOCK_REASON_ROOM_PAUSED = 300;
    	DETAIL_BLOCK_REASON_LIVE_TYPE_AUDIO = 301;
    	DETAIL_BLOCK_REASON_ROOM_INTERACTION_CONFLICT = 302;
    	DETAIL_BLOCK_REASON_RIVAL_VERSION_NOT_SUPPORT = 303;
    	DETAIL_BLOCK_REASON_SELF_VERSION_NOT_SUPPORT = 304;
    	DETAIL_BLOCK_REASON_MATURE_THEME_MISMATCH = 305;
    	DETAIL_BLOCK_REASON_SELF_IN_OFFICIAL_CHANNEL = 306;
    	DETAIL_BLOCK_REASON_RIVAL_IN_OFFICIAL_CHANNEL = 307;
    	DETAIL_BLOCK_REASON_IN_OFFICIAL_BACKUP_CHANNEL = 308;
    	DETAIL_BLOCK_REASON_RIVAL_RESERVE_FULL = 309;
    	DETAIL_BLOCK_REASON_ANCHOR_NOT_LIVING = 310;
    	DETAIL_BLOCK_REASON_ANCHOR_IS_SELF = 311;
    	DETAIL_BLOCK_REASON_PRIVATE_ROOM = 312;
    	DETAIL_BLOCK_REASON_BLOCKED_BY_RIVAL = 313;
    	DETAIL_BLOCK_REASON_SELF_BLOCKED_RIVAL = 314;
    	DETAIL_BLOCK_REASON_VIEWER_REGION_NOT_SUPPORT = 315;
    	DETAIL_BLOCK_REASON_SUBSCRIBER_ROOM = 316;
    	DETAIL_BLOCK_REASON_REGIONAL_BLOCK = 317;
    	DETAIL_BLOCK_REASON_PENALTY_BANNED = 318;
    	DETAIL_BLOCK_REASON_BLOCK_PROGRAM_LIVE_TAB_ROOM = 319;
    	DETAIL_BLOCK_REASON_NETWORK_ERROR = 400;
    	DETAIL_BLOCK_REASON_ROOM_FILTER_ERROR = 401;
    }
    enum CohostLayoutMode {
    	COHOST_LAYOUT_MODE_NORMAL = 0;
    	COHOST_LAYOUT_MODE_SCREEN_SHARE = 1;
    }
    message BattleInfo {
    	BattleInfoType infoType = 1;
    	int64 value = 2;
    
    	enum BattleInfoType {
    		BATTLE_INFO_TYPE_NONE = 0;
    		BATTLE_INFO_TYPE_AVERAGE_SCORE = 1;
    		BATTLE_INFO_TYPE_MAX_SCORE = 2;
    		BATTLE_INFO_TYPE_LAST_SCORE = 3;
    		BATTLE_INFO_TYPE_WIN_STREAK = 4;	
    }

	}
    message ReserveInfo {
    	int64 reservationId = 1;
    	ReserveReplyStatus replyStatus = 2;
    	string bubbleTip = 3;
    	int64 responseTime = 4;
    	bool isReservationSender = 5;
    	int64 createdTimestamp = 6;
    	bool viewed = 7;
    
    	enum ReserveReplyStatus {
    		RESERVE_REPLY_STATUS_UNKNOWN = 0;
    		RESERVE_REPLY_STATUS_WAIT_FORME = 1;	
    }

	}
    message Tag {
    	int32 tagType = 1;
    	string tagValue = 2;
    	string tagText = 3;
    

	}

}

message GradeScoreRule {
    int32 grade = 1;
    int64 gradeMinScore = 2;
    int64 gradeMaxScore = 3;
    

}

message CommentSwitchSettings {
    int32 chat = 1;
    int32 chatSpamComments = 2;
    int32 chatL2 = 3;
    int32 chatCommunityFlagged = 4;
    int32 chatCommunityFlaggedReview = 5;
    int32 commentTray = 6;
    int32 muteDuration = 7;
    

}

message GiftModeMeta {
    int64 giftId = 1;
    string giftNameKey = 2;
    ImageModel giftIconImage = 3;
    Text giftModeDesc = 4;
    

}

message WebcastWallpaperMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    WallpaperContent wallpaperContent = 3;
    

}

message EcTaskRegisterMessageEntity {
    int32 interval = 1;
    string taskId = 2;
    

}

message UserSetting {
    int64 settingId = 1;
    int64 version = 2;
    ExampleSetting exampleSetting = 100;
    RevenueTipsSetting revenueTipsSetting = 101;
    GiftGoalAutoUpdateSwitch goalAutoUpdateSwitch = 102;
    GiftGoalVoiceAlterSwitch goalVoiceAlterSwitch = 103;
    GameServerFeatureSetting gameServerFeatureSetting = 104;
    GameGuessRecommendCreateSwitch gameGuessRecommendCreateSwitch = 105;
    

}

message BadgeStruct {
    BadgeDisplayType badgeDisplayType = 1;
    BadgePriorityType badgePriorityType = 2;
    BadgeSceneType badgeScene = 3;
    Position position = 4;
    DisplayStatus displayStatus = 5;
    int64 greyedByClient = 6;
    BadgeExhibitionType exhibitionType = 7;
    string schemaUrl = 10;
    bool display = 11;
    PrivilegeLogExtra logExtra = 12;
    ImageBadge imageBadge = 20;
    TextBadge textBadge = 21;
    StringBadge stringBadge = 22;
    CombineBadgeStruct combineBadgeStruct = 23;
    bool isCustomized = 24;
    
    enum BadgeDisplayType {
    	BADGE_DISPLAY_TYPE_UNKNOWN = 0;
    	BADGE_DISPLAY_TYPE_IMAGE = 1;
    	BADGE_DISPLAY_TYPE_TEXT = 2;
    	BADGE_DISPLAY_TYPE_STRING = 3;
    	BADGE_DISPLAY_TYPE_COMBINE = 4;
    }
    enum BadgePriorityType {
    	BADGE_PRIORITY_TYPE_UNKNOWN = 0;
    	BADGE_PRIORITY_TYPE_STRONG_RELATION = 10;
    	BADGE_PRIORITY_TYPE_PLATFORM = 20;
    	BADGE_PRIORITY_TYPE_RELATION = 30;
    	BADGE_PRIORITY_TYPE_ACTIVITY = 40;
    	BADGE_PRIORITY_TYPE_RANK_LIST = 50;
    }
    enum BadgeSceneType {
    	BADGE_SCENE_TYPE_UNKNOWN = 0;
    	BADGE_SCENE_TYPE_ADMIN = 1;
    	BADGE_SCENE_TYPE_FIRST_RECHARGE = 2;
    	BADGE_SCENE_TYPE_FRIENDS = 3;
    	BADGE_SCENE_TYPE_SUBSCRIBER = 4;
    	BADGE_SCENE_TYPE_ACTIVITY = 5;
    	BADGE_SCENE_TYPE_RANK_LIST = 6;
    	BADGE_SCENE_TYPE_NEW_SUBSCRIBER = 7;
    	BADGE_SCENE_TYPE_USER_GRADE = 8;
    	BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA = 9;
    	BADGE_SCENE_TYPE_FANS = 10;
    	BADGE_SCENE_TYPE_LIVE_PRO = 11;
    	BADGE_SCENE_TYPE_ANCHOR = 12;
    }
    enum BadgeExhibitionType {
    	BADGE_EXHIBITION_TYPE_BADGE = 0;
    	BADGE_EXHIBITION_TYPE_IDENTITY_LABEL = 1;
    }
    enum DisplayStatus {
    	DISPLAY_STATUS_NORMAL = 0;
    	DISPLAY_STATUS_SHADOW = 1;
    }
    enum Position {
    	POSITION_UNKNOWN = 0;
    	POSITION_LEFT = 1;
    	POSITION_RIGHT = 2;
    }

}

message CohostContent {
    JoinGroupBizContent joinGroupBizContent = 1;
    PermitJoinGroupBizContent permitJoinGroupBizContent = 2;
    ListChangeBizContent listChangeBizContent = 11;
    

}

message SubGoalPinInfo {
    int64 pinStartTime = 1;
    int64 pinEndTime = 2;
    int64 pinReadyTime = 3;
    

}

message GiftStructByCreator {
    string name = 1;
    int64 id = 2;
    int32 type = 3;
    int32 diamondCount = 4;
    ImageModel image = 5;
    ImageModel previewImage = 6;
    repeated GiftPanelCardletByCreator giftPanelCardlets = 7;
    ImageModel giftLabelIcon = 8;
    bool isBoxGift = 9;
    

}

message ExtraTimeCardInfo {
    string cardNameKey = 1;
    ImageModel cardImage = 2;
    int64 sendTimeSec = 3;
    BattleUserInfo sendUser = 4;
    int64 effectLastDuration = 5;
    string ruleUrl = 6;
    int64 effectTimeSec = 7;
    int64 toAnchorId = 8;
    int64 extraDurationSec = 9;
    string toAnchorIdStr = 10;
    

}

message EntranceConditionsPopup {
    repeated Condition conditions = 1;
    string title = 2;
    
    message Condition {
    	string name = 1;
    	string text = 2;
    	bool match = 3;
    

	}

}

message ShortTouchExtra {
    ShortTouchPollData pollData = 1;
    

}

message WebcastSubPinEventMessage {
    CommonMessageData baseMessage = 1;
    ActionType actionType = 2;
    SubPinCard card = 3;
    int64 operatorUserId = 4;
    
    enum ActionType {
    	ACTION_TYPE_UNKNOWN = 0;
    	ACTION_TYPE_PIN = 1;
    	ACTION_TYPE_UNPIN = 2;
    }

}

message BattleTruthOrDareTips {
    repeated TruthOrDareTip truthOrDareTips = 1;
    string giftGuideKey = 2;
    

}

message PopMsgContainer {
    bool hasPop = 1;
    string content = 2;
    repeated string buttonContent = 3;
    string title = 4;
    bool hasJump = 5;
    string jumpTitle = 6;
    string jumpUrl = 7;
    int32 id = 8;
    

}

message PromoteAdBoostedUsers {
    int64 adId = 1;
    int64 cnt = 2;
    int64 percent = 3;
    int64 endTime = 4;
    

}

message MsgNotifyQuota {
    int32 componentType = 1;
    map<string, int64> positionCountMap = 2;
    int64 defaultCount = 3;
    

}

message ApplyContent {
    Player applicant = 1;
    string applicantLinkMicId = 2;
    

}

message WebcastLinkmicBattleTaskMessage {
    CommonMessageData baseMessage = 1;
    BattleTaskMessageType battleTaskMessageType = 2;
    BattleTaskStart taskStart = 3;
    BattleTaskUpdate taskUpdate = 4;
    BattleTaskSettle taskSettle = 5;
    BattleRewardSettle rewardSettle = 6;
    int64 battleId = 20;
    
    enum BattleTaskMessageType {
    	BATTLE_TASK_MESSAGE_TYPE_START = 0;
    	BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE = 1;
    	BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE = 2;
    	BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE = 3;
    }

}

message LinkPosition {
    int32 position = 1;
    int32 positionType = 2;
    

}

message TextPieceGift {
    int64 giftId = 1;
    PatternRef nameRef = 2;
    GiftShowType showType = 3;
    int64 colorId = 4;
    
    enum GiftShowType {
    	GIFT_SHOW_TYPE_GIFT_SHOW_DEFAULT = 0;
    	GIFT_SHOW_TYPE_GIFT_SHOW_NAME = 1;
    }

}

message WebcastStarCommentPushMessage {
    CommonMessageData baseMessage = 1;
    int32 queueVersion = 2;
    StarCommentMessage current = 3;
    StarCommentMessage next = 4;
    

}

message LiveStreamGoalIndicator {
    string key = 1;
    int32 op = 2;
    

}

message Video {
    string vid = 1;
    string url = 2;
    double duration = 3;
    int32 width = 4;
    int32 height = 5;
    

}

message Img {
    string key = 1;
    int32 width = 2;
    int32 height = 3;
    string url = 4;
    

}

message KickOutBizContent {
    User operatorUserInfo = 1;
    LinkMicUserAdminType operatorLinkAdminType = 2;
    User kickPlayerUserInfo = 3;
    
    enum LinkMicUserAdminType {
    	LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0;
    	LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1;
    	LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2;
    }

}

message WebcastEcTaskRefreshCouponListMessage {
    CommonMessageData baseMessage = 1;
    EcTaskRefreshCouponListEntity entity = 2;
    

}

message Avatar {
    int64 avatarId = 1;
    ImageModel image = 2;
    Video videoStatic = 3;
    Video videoDynamic = 4;
    int64 styleId = 5;
    int64 createdAt = 6;
    int64 updatedAt = 7;
    int32 status = 8;
    string failedTitle = 9;
    string failedReason = 10;
    bool isSystem = 12;
    

}

message GetUploadAuthResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	string accessKey = 1;
    	string secretKey = 2;
    	string sessionToken = 3;
    	string serviceId = 4;
    	string uploadDomain = 5;
    	int64 expiredTime = 6;
    	int64 currentTime = 7;
    

	}

}

message WebcastShortTouchMessage {
    CommonMessageData baseMessage = 1;
    UnifyBaseActionData actionData = 2;
    ShortTouchExtra extra = 3;
    

}

message GuestShowdownStartParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 prePlayId = 3;
    string streamId = 4;
    GuestShowdownConfig playConfig = 5;
    

}

message NoticeboardOfficialTemplateCreateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool isSuccess = 1;
    	NoticeboardTemplate template = 2;
    

	}

}

message ProductItem {
    int64 productId = 1;
    BagIndex bagIndex = 2;
    Title title = 3;
    ImageModel cover = 4;
    AtmosphereInfo atmosphereInfo = 5;
    ShopBrandLogo shopBrandLogo = 6;
    LiveFlashSaleInfo liveFlashSaleInfo = 7;
    

}

message CancelJoinGroupContent {
    repeated GroupPlayer leaver = 1;
    GroupPlayer operator = 2;
    JoinType type = 3;
    GroupChannelAllUser groupUser = 4;
    
    enum JoinType {
    	JOIN_TYPE_UNKNOWN = 0;
    	JOIN_TYPE_CHANNEL_APPLY = 1;
    	JOIN_TYPE_CHANNEL_INVITE = 2;
    	JOIN_TYPE_GROUP_APPLY = 100;
    	JOIN_TYPE_GROUP_APPLY_FOLLOW = 101;
    	JOIN_TYPE_GROUP_INVITE = 102;
    	JOIN_TYPE_GROUP_INVITE_FOLLOW = 103;
    	JOIN_TYPE_GROUP_OWNER_JOIN = 104;
    }

}

message WebcastEffectControlMessage {
    CommonMessageData baseMessage = 1;
    int32 controlType = 2;
    string resourceId = 3;
    bool replaceResumeEffect = 4;
    Scene scene = 5;
    

}

message GoalPinInfo {
    bool pin = 1;
    bool unpin = 2;
    int64 pinEndTime = 3;
    int64 subGoalId = 4;
    string subGoalIdStr = 5;
    

}

message AnchorSubWaveCurrentSettings {
    AnchorSubWaveTriggerSettings anchorSubWaveTriggerSettings = 1;
    AnchorSubWaveChallengeSettings anchorSubWaveChallengeSettings = 2;
    

}

message LinkmicSettingResult {
    string linkMIcAbParams = 102;
    repeated LinkmicSettingmodel settings = 200;
    

}

message GuessTemplate {
    int64 templateIdStr = 1;
    GuessText title = 2;
    repeated GuessOptions guessOptions = 3;
    string gameTypeName = 4;
    AuditStatus auditStatus = 5;
    int64 auditDetail = 6;
    

}

message BillboardInfo {
    int32 billboardType = 1;
    repeated string billboardIds = 2;
    int32 sourceFrom = 3;
    

}

message WebcastKaraokeRedDotMessage {
    CommonMessageData baseMessage = 1;
    int64 hostSingReqCumulativeCount = 2;
    int64 youSingReqCumulativeCount = 3;
    

}

message WebcastQuestionDeleteMessage {
    CommonMessageData baseMessage = 1;
    int64 questionId = 2;
    int64 userId = 3;
    Scene scene = 4;
    

}

message MultiLiveUserApplySettings {
    MultiLiveUserApplyPermission multiLiveUserApplyPermission = 1;
    int32 linkMicServiceVersion = 2;
    RoomHostMultiGuestPermissionInfo roomHostMultiGuestPermissionInfo = 3;
    bool tryOpenMultiGuest = 4;
    RoomAudienceMultiGuestPermissionInfo roomAudienceMultiGuestPermissionInfo = 5;
    RoomMultiGuestLinkmicInfo roomMultiGuestLinkmicInfo = 6;
    int64 hostMultiGuestDevMode = 7;
    int64 audienceSharedInviteePanelType = 8;
    int64 hostGifterLinkmicEnum = 9;
    int64 viewerGifterLinkmicEnum = 10;
    AnchorSettingInfo anchorSettingInfo = 11;
    int64 hostSendGiftsToAllEnum = 20;
    int64 audienceSendGiftsToAllEnum = 21;
    MultiGuestPlayInfo multiGuestPlayInfo = 30;
    

}

message CompetitionLeaveResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	CompetitionCommon bizCommon = 1;
    	repeated CompetitionResultsTeamInfo teamInfos = 2;
    

	}

}

message WebcastInRoomBannerMessage {
    CommonMessageData baseMessage = 1;
    map<string, string> extra = 2;
    int32 position = 3;
    int32 actionType = 4;
    

}

message WebcastShareGuideMessage {
    CommonMessageData baseMessage = 1;
    string shareChannel = 2;
    

}

message DropsRoomInfo {
    bool showClaimDropsGiftNotice = 1;
    int32 earliestGiftExpireTs = 2;
    bool dropsListEntrance = 3;
    bool showDropsTag = 4;
    string promotingDropsId = 5;
    string promotingDropsGameId = 6;
    string promotingDropsGameNameForReport = 7;
    

}

message Title {
    string text = 1;
    

}

message SubWaveSubscriberInfo {
    int64 userId = 1;
    ImageModel avatar = 2;
    string displayId = 3;
    string userIdStr = 4;
    repeated BadgeStruct badgeList = 5;
    

}

message HostReportOpenLinkmicPanelResponse {
    ResponseData data = 1;
    Extra extra = 2;
    
    message ResponseData {
    

	}
    message Extra {
    	int64 now = 1;
    

	}

}

message AtomAction {
    int32 type = 1;
    ReqItem requestItem = 2;
    

}

message JoinGroupBizContent {
    int32 fromRoomAgeRestricted = 1;
    PerceptionDialogInfo dialog = 3;
    PunishEventInfo punishInfo = 4;
    CohostTopic topicInfo = 5;
    string algoRequestId = 6;
    CohostLayoutMode cohostLayoutMode = 7;
    TagV2 tag = 8;
    RivalsGameTag gameTag = 9;
    string newUserEducation = 11;
    JoinGroupMessageExtra joinGroupMsgExtra = 101;
    
    enum CohostLayoutMode {
    	COHOST_LAYOUT_MODE_NORMAL = 0;
    	COHOST_LAYOUT_MODE_SCREEN_SHARE = 1;
    }

}

message ReplyInviteContent {
    Player invitee = 1;
    AgreeStatus replyStatus = 2;
    string inviteeLinkMicId = 3;
    MicPositionData positionData = 4;
    Player inviteOperatorUser = 5;
    repeated string linkedUserUiPositions = 6;
    repeated PosIdentity uiPos = 7;
    
    enum AgreeStatus {
    	AGREE_STATUS_AGREE_UNKNOWN = 0;
    	AGREE_STATUS_AGREE = 1;
    	AGREE_STATUS_REJECT = 2;
    }

}

message BattleTruthOrDareTriggerGuide {
    string anchorContentKey = 1;
    string audienceContentKey = 2;
    int32 guideDurationSecond = 3;
    string ruleDetailUrl = 4;
    

}

message WebcastEventMessage {
    CommonMessageData baseMessage = 1;
    int32 actionType = 2;
    EventCard card = 3;
    

}

message WebcastInRoomBannerEvent {
    CommonMessageData baseMessage = 1;
    int32 position = 2;
    BannerInRoomCollection data = 3;
    

}

message CancelViewerSingResp {
    LinkMicCommonResp commonResp = 1;
    bool isOnlyDelSong = 2;
    

}

message BizApplyParams {
    int64 linkType = 1;
    int64 anchorId = 2;
    int32 userReturnType = 3;
    bool follow = 4;
    int32 shareRevenueSetting = 5;
    int32 inviterRole = 6;
    int64 inviterUserId = 7;
    

}

message ShowResult {
    bool banned = 1;
    

}

message MsgNotifyComponentRecoverInfo {
    bool recover = 1;
    int64 delayMs = 2;
    

}

message CountdownEndResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	CountdownContent countdownContent = 2;
    

	}

}

message UserLiveEventInfo {
    string liveEventId = 1;
    string quizId = 2;
    bool isSubscribed = 3;
    

}

message LinkedUser {
    int64 uid = 1;
    string linkMicId = 2;
    int32 audioMuteStatus = 3;
    int32 videoMuteStatus = 4;
    int32 position = 5;
    

}

message ProductSnapShot {
    string productId = 1;
    string title = 2;
    Img cover = 3;
    int32 stockType = 4;
    int64 timestamp = 5;
    AddToCartButton addToCartButton = 6;
    

}

message DispersionInfo {
    int32 dispersionPath = 1;
    DelayParam delayParam = 2;
    

}

message PictionaryFullInfo {
    PictionaryInfo pictionaryInfo = 1;
    PictionaryStatistics pictionaryStatistics = 2;
    bool guessCorrect = 3;
    

}

message BattleUserArmy {
    int64 userId = 1;
    int64 score = 2;
    string nickname = 3;
    ImageModel avatarThumb = 4;
    int64 diamondScore = 5;
    string userIdStr = 6;
    

}

message UserFanTicket {
    int64 userId = 1;
    int64 fanTicket = 2;
    int64 matchTotalScore = 3;
    int32 matchRank = 4;
    UserCountdownInfo countdownInfo = 5;
    UserPlayInfo playInfo = 6;
    string iconName = 7;
    string animationName = 8;
    

}

message SubWaveInfoCommon {
    AnchorSubWaveCurrentSettings subWaveSettings = 1;
    int64 waveSubCount = 2;
    int64 totalSubCount = 3;
    int64 startTime = 4;
    int64 endTime = 5;
    WaveStatus waveStatus = 6;
    repeated SubWaveSubscriberInfo thanksList = 7;
    int64 waveTargetSubCount = 8;
    int64 waveOpenRecordId = 9;
    repeated SubWaveStrikeInfo subWaveStrikes = 10;
    
    enum WaveStatus {
    	WAVE_STATUS_RUNNING = 0;
    	WAVE_STATUS_FINISHED = 1;
    	WAVE_STATUS_FAILED = 2;
    	WAVE_STATUS_STRIKE = 3;
    }

}

message BattleNoticeText {
    string text = 1;
    

}

message CapsuleBizParamsCommentFlaggedPromptForNewUser {
    int64 trigger = 1;
    repeated int64 commentIds = 2;
    

}

message WebcastPlayTogetherMessage {
    CommonMessageData baseMessage = 1;
    PlayTogetherMessageType messageType = 2;
    PlayTogetherBasicInfo basicInfo = 3;
    PlayTogetherListChangeContent listChangeContent = 4;
    PlayTogetherPermitNoticeContent permitNoticeContent = 5;
    
    enum PlayTogetherMessageType {
    	PLAY_TOGETHER_MESSAGE_TYPE_START = 0;
    	PLAY_TOGETHER_MESSAGE_TYPE_END = 1;
    	PLAY_TOGETHER_MESSAGE_TYPE_REVIEW_NOTICE = 2;
    	PLAY_TOGETHER_MESSAGE_TYPE_LIST_CHANGE = 3;
    	PLAY_TOGETHER_MESSAGE_TYPE_PERMIT_NOTICE = 4;
    	PLAY_TOGETHER_MESSAGE_TYPE_IN_PROGRESS = 5;
    }

}

message QuizRulesIntroduction {
    MessageType messageType = 1;
    string quizId = 2;
    int32 quizType = 3;
    string extra = 4;
    string rewardAmount = 5;
    int32 questionCount = 6;
    int32 userCount = 7;
    string sponsorCode = 8;
    int32 displayDurationMs = 9;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;
    

}

message ToplivePageData {
    repeated ToplivePageItem items = 1;
    

}

message WebcastSubContractStatusMessage {
    CommonMessageData baseMessage = 1;
    PushContractStatusResult data = 2;
    ResponseExtra extra = 3;
    
    message ResponseExtra {
    	int64 now = 1;
    

	}

}

message CancelInviteResponse {
    

}

message CommerceInfo {
    map<int64, ProductItem> productInfo = 1;
    PopCardInfo popCardInfo = 2;
    

}

message GiftMode {
    int64 giftId = 1;
    string giftName = 2;
    ImageModel giftIconImage = 3;
    int64 giftPrice = 4;
    ImageModel giftBackgroundImage = 5;
    int64 releaseVersion = 6;
    bool hasFlashEffect = 7;
    ImageModel eventIconImage = 8;
    string labelText = 9;
    

}

message LinkerMicIdxUpdateInfo {
    MicIdxOperation operation = 1;
    int64 userID = 2;
    int64 micIndex = 3;
    
    enum MicIdxOperation {
    	MIC_IDX_OPERATION_MIC_I_DX_OP_ON = 0;
    	MIC_IDX_OPERATION_MIC_I_DX_OP_OFF = 1;
    }

}

message SeparatorConfig {
    string color = 1;
    

}

message RivalsListsData {
    repeated Room followedList = 1;
    repeated Room recentList = 2;
    repeated Room recommendList = 3;
    map<int64, RivalExtraInfo> rivalExtraInfos = 4;
    AutoMatchBanner autoMatchBanner = 5;
    string tips = 6;
    SearchBar searchBar = 7;
    BannerText bannerText = 8;
    map<int64, TopHostInfo> roomTopHostInfo = 9;
    repeated Room bestTeammateList = 10;
    repeated Room reservedList = 11;
    repeated Room mayKnowList = 12;
    repeated Room mixedList = 13;
    repeated Room eoyRankList = 14;
    repeated Room gameList = 15;
    CohostTopic topicBanner = 21;
    TopicExtraInfo topicExtraInfo = 22;
    GuidePopupBanner guidePopupBanner = 23;
    EOYBanner eoyBanner = 24;
    repeated BattleOptPair battleOptPairList = 25;
    string statusText = 31;
    int32 statusTextType = 32;
    DynamicListConfig dynamicListConfig = 51;
    
    message BannerText {
    	string title = 1;
    	string subTitle = 2;
    	string buttonText = 3;
    	bool isMatchValid = 4;
    	bool isInUiExp = 5;
    	int32 bannerStyle = 6;
    	QuickCohostContentInfo quickCohostContentInfo = 7;
    

	}
    message TopHostInfo {
    	string rankType = 1;
    	int64 topIndex = 2;
    

	}

}

message FansLevelInfo {
    int64 userid = 1;
    int64 anchorid = 2;
    int64 score = 3;
    int64 level = 4;
    bool isSleeping = 5;
    int64 timeToSleep = 6;
    FansScoreRule fansScoreRule = 7;
    BadgeStruct badge = 8;
    

}

message TopicSetResponse {
    ResponseData data = 1;
    
    message ResponseData {
    

	}

}

message GiftsInfoByCreator {
    repeated int64 giftBoxIds = 1;
    GiftPanelCardletByCreator liveGoalCardlet = 2;
    

}

message MsgFilter {
    bool isGifter = 1;
    bool isSubscribedToAnchor = 2;
    

}

message WebcastHourlyRankRewardMessage {
    CommonMessageData baseMessage = 1;
    repeated HourlyRankRewardInfo winners = 2;
    

}

message LynxGiftExtra {
    int64 id = 1;
    int64 code = 2;
    int64 type = 3;
    repeated string params = 4;
    string extra = 5;
    

}

message WebcastPictionaryStartMessage {
    CommonMessageData baseMessage = 1;
    PictionaryInfo data = 2;
    

}

message LiveRecordConfig {
    bool canRecord = 1;
    bool hasFixedFloatingBall = 2;
    int64 maxRecordDuration = 3;
    int64 minStorageSize = 4;
    

}

message FansClubData {
    string clubName = 1;
    int32 level = 2;
    int32 userFansClubStatus = 3;
    UserBadge badge = 4;
    repeated int64 availableGiftIds = 5;
    int64 anchorId = 6;
    
    message UserBadge {
    	map<int32, ImageModel> icons = 1;
    	string title = 2;
    

	}

}

message CompetitionSwitchTurn {
    TakeTheStageBiz takeTheStageBiz = 100;
    
    message TakeTheStageBiz {
    	int64 performanceStartTime = 1;
    	TakeTheStageOrderInfo orderInfo = 2;
    

	}

}

message WebcastGuestInviteMessage {
    CommonMessageData baseMessage = 1;
    int64 roomId = 2;
    int64 inviterUserId = 3;
    string inviterNickname = 4;
    ImageModel inviterAvatar = 5;
    

}

message PinInfo {
    bool pinEnabled = 1;
    int64 displayDuration = 2;
    

}

message RealtimeLiveCenterBaseData {
    int64 liveStartTime = 1;
    int64 liveEndTime = 2;
    int64 totalScore = 3;
    int64 liveWatchCnt = 4;
    int64 liveNewFansUcnt = 5;
    int64 liveConsumeUcnt = 6;
    int64 liveCommentCnt = 7;
    int64 liveLikeCnt = 8;
    int64 newSubscribersCnt = 9;
    int64 liveOnlineWatchCnt = 10;
    int64 shareCnt = 11;
    

}

message WebcastNoticeMessage {
    CommonMessageData baseMessage = 1;
    string content = 2;
    int32 noticeType = 3;
    string style = 4;
    Text title = 5;
    Text violationReason = 6;
    Text illegalText = 7;
    Text bottomTip = 8;
    string tipUrl = 9;
    Text noticeTitle = 10;
    Text noticeContent = 11;
    Scene scene = 12;
    

}

message ReplyReserveResponse {
    ResponseData data = 1;
    ReplyReserveExtra extra = 2;
    
    message ResponseData {
    

	}
    message LogPb {
    	string imprId = 1;
    

	}
    message ReplyReserveExtra {
    	LogPb logPb = 1;
    

	}

}

message AudienceReplyContent {
    int64 fromUserId = 1;
    

}

message CompetitionSettleStart {
    int64 plannedSettlementEndTime = 1;
    int64 extraTimeInterval = 2;
    CompetitionUserBase initiator = 3;
    

}

message CreateShowResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool showExists = 1;
    	ShowContent showContent = 2;
    

	}

}

message GiftGoalAutoUpdateSwitch {
    int32 value = 1;
    

}

message AnchorSubWaveChallengeSettings {
    int64 id = 1;
    string name = 2;
    int64 needSubCounts = 3;
    int64 duringTime = 4;
    repeated EmoteModel emoteList = 5;
    

}

message UserCountdownRecord {
    int64 countdownId = 1;
    int32 status = 2;
    int64 duration = 3;
    int64 startTime = 4;
    int64 endTime = 5;
    int64 score = 6;
    int64 targetScore = 7;
    bool achieved = 8;
    

}

message GetWallpaperContentResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	WallpaperContent wallpaperContent = 1;
    

	}

}

message CancelViewerSingReq {
    LinkCommon common = 1;
    int64 channelId = 2;
    Player applier = 3;
    int64 songId = 4;
    BizCancelApplyParams multiGuestReqExtra = 9527;
    

}

message NewAnchorIncentiveBannerData {
    string title = 1;
    string subTitle = 2;
    ImageModel image = 3;
    string url = 4;
    map<string, string> metricsMap = 5;
    int64 subType = 6;
    

}

message EventTracking {
    int64 giftSubSenderId = 1;
    int64 giftSubReceiverId = 2;
    int64 anchorId = 3;
    int64 giftSubOrderCreateTime = 4;
    

}

message GoodyBagCoinDetail {
    int32 totalCoin = 1;
    

}

message GetRunningNoticeboardMaterialContentResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	string imageUrl = 1;
    	string imageMetaUrl = 2;
    

	}

}

message SubWaveImMsg {
    SubWaveImMsgType msgType = 1;
    SubWaveSubscriberInfo newComeSubscriberInfo = 2;
    SubWaveInfoCommon subWaveInfoCommon = 3;
    WaveReward waveReward = 4;
    SubWaveStrikeInfo currentStrikeRound = 5;
    bool strikeEnabled = 6;
    
    enum SubWaveImMsgType {
    	SUB_WAVE_IM_MSG_TYPE_WAVE_START = 0;
    	SUB_WAVE_IM_MSG_TYPE_NEW_COME_SUBSCRIBER = 1;
    	SUB_WAVE_IM_MSG_TYPE_WAVE_FINISH = 2;
    	SUB_WAVE_IM_MSG_TYPE_RECEIVE_REWARD = 3;
    	SUB_WAVE_IM_MSG_TYPE_WAVE_FINISH_STRIKE_START = 4;
    	SUB_WAVE_IM_MSG_TYPE_STRIKE_FINISH = 5;
    	SUB_WAVE_IM_MSG_TYPE_STRIKE_FINISH_NEXT_STRIKE_START = 6;
    	SUB_WAVE_IM_MSG_TYPE_REWARD_SENT = 7;
    }

}

message NoticeboardContent {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 noticeboardId = 3;
    int32 status = 4;
    string linkmicId = 5;
    MicPositionData position = 6;
    string streamId = 7;
    int64 startTime = 8;
    int64 endTime = 9;
    string passedMediaNodeId = 10;
    NoticeboardReviewInfo lastReviewInfo = 11;
    int64 version = 12;
    

}

message UseSpecialEffectCard {
    SpecialEffectCardInfo cardInfo = 1;
    int64 anchorId = 2;
    Text displayContent = 3;
    repeated AnchorPair affectedAnchorPairs = 4;
    

}

message HighScoreControlCfg {
    bool normalControlApplied = 1;
    int64 threshold = 2;
    repeated int64 originDisplayToUserList = 3;
    

}

message GiftConfigInfo {
    GiftConfigType configType = 1;
    RoleConfig roleConfig = 2;
    
    enum GiftConfigType {
    	GIFT_CONFIG_TYPE_UNKNOWN = 0;
    	GIFT_CONFIG_TYPE_AUDIO = 1;
    }
    message RoleConfig {
    	string viewer = 1;
    	string anchor = 2;
    	string gifter = 3;
    

	}

}

message GameLiveInfo {
    bool hasGameLive = 1;
    bool hasGameLive2Min = 2;
    bool hasCommentInGameLive = 3;
    

}

message GuestShowdownStartResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool isExists = 1;
    	GuestShowdownContent playContent = 2;
    

	}

}

message BattleRivalTag {
    ImageModel bgImage = 1;
    ImageModel iconImage = 2;
    string content = 3;
    

}

message ProductAtmosphereTag {
    string productId = 1;
    string tagDesc = 2;
    int64 count = 3;
    

}

message BusinessLinksLiveMessage {
    int32 op = 2;
    int64 id = 3;
    string title = 4;
    string subtitle = 5;
    string url = 6;
    string pic = 7;
    int64 opTime = 8;
    int32 cardType = 9;
    string gameUrl = 10;
    string liveLogExtra = 11;
    

}

message WebcastPartnershipDownloadCountMessage {
    CommonMessageData baseMessage = 1;
    int64 downloadedCount = 2;
    string gameId = 3;
    

}

message LinkReplyResult {
    bool canJoinChannelDirectly = 3;
    int32 confluenceType = 4;
    string rtcExtInfo = 5;
    string linkMicIdStr = 15;
    string rivalLinkmicIdStr = 17;
    

}

message ImageModel {
    repeated string mUrls = 1;
    string mUri = 2;
    int32 height = 3;
    int32 width = 4;
    string avgColor = 5;
    int32 imageType = 6;
    string schema = 7;
    Content content = 8;
    bool isAnimated = 9;
    
    message Content {
    	string name = 1;
    	string fontColor = 2;
    	int64 level = 3;
    

	}

}

message WebcastGreetingMessage {
    CommonMessageData baseMessage = 1;
    UserIdentity userIdentity = 2;
    int64 enterMsgId = 3;
    Text greetingText = 4;
    Text guideText = 5;
    WaveAlgorithmData waveAlgorithmData = 6;
    

}

message UserAttrResponse {
    map<int64, int64> values = 1;
    

}

message ShortTouchItem {
    string schema = 1;
    int64 width = 2;
    int64 height = 3;
    int64 topMargin = 4;
    int64 leftMargin = 5;
    int64 fcSecond = 6;
    string name = 7;
    ShortTouchPreviewSetting previewSetting = 8;
    int32 animeType = 9;
    string iconSkin = 10;
    string activityId = 11;
    

}

message Sprite {
    string spriteUrl = 1;
    int32 totalNum = 2;
    int32 xNum = 3;
    int32 yNum = 4;
    int32 imageHeight = 5;
    int32 imageWidth = 6;
    string url = 7;
    int64 spriteNum = 8;
    int64 imageXNum = 9;
    int64 imageYNum = 10;
    int64 fps = 11;
    

}

message PushContractStatusResult {
    int32 payChannel = 1;
    int32 status = 2;
    int32 tplType = 3;
    int32 subCircle = 4;
    SubInfo subInfo = 5;
    string toast = 6;
    string contractid = 7;
    int32 createContractIntent = 8;
    

}

message TextPieceHeart {
    string color = 1;
    

}

message WallpaperCreateResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool wallpaperExists = 1;
    	WallpaperContent wallpaperContent = 2;
    

	}

}

message AvatarStyle {
    int64 styleId = 1;
    ImageModel image = 2;
    

}

message Benefit {
    int32 type = 1;
    int64 value = 2;
    

}

message CompetitionResultsTeamInfo {
    int64 teamId = 1;
    int64 rank = 2;
    int64 score = 3;
    Result result = 4;
    repeated CompetitionContributorInfo contributors = 5;
    repeated CompetitionTeamMemberInfo members = 6;
    string teamIdStr = 7;
    
    enum Result {
    	RESULT_UNKNOWN = 0;
    	RESULT_WIN = 1;
    	RESULT_LOSE = 2;
    	RESULT_DRAW = 3;
    }

}

message TimeTag {
    int64 operationTime = 1;
    

}

message WebcastLiveShowMessage {
    CommonMessageData baseMessage = 1;
    LiveShowMessageType messageType = 2;
    ShowContent showContent = 3;
    ShowUserFinishReason showuserfinishreason = 4;
    LinkerMediaChangeOperator operatorUserInfo = 5;
    
    enum LiveShowMessageType {
    	LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_UNKNOWN = 0;
    	LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_CREATE_SHOW = 1;
    	LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_NEXT_GUEST = 2;
    	LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_FINISH_GUEST = 3;
    	LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_SHOW_AGAIN_GUEST = 4;
    	LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_END_SHOW = 5;
    	LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_CONTENT_CHANGED = 6;
    	LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_HOST_TRANSITION_START = 7;
    }
    enum ShowUserFinishReason {
    	SHOW_USER_FINISH_REASON_UNKNOWN = 0;
    	SHOW_USER_FINISH_REASON_TIME_ROVER_NORMALLY = 1;
    	SHOW_USER_FINISH_REASON_HOST_FINISH_SHOWING_GUEST = 2;
    	SHOW_USER_FINISH_REASON_SELF_FINISH_SHOWING_GUEST = 3;
    	SHOW_USER_FINISH_REASON_LEAVE = 4;
    	SHOW_USER_FINISH_REASON_KICK_OUT = 5;
    	SHOW_USER_FINISH_REASON_RT_C_CALLBACK_LEAVE = 6;
    	SHOW_USER_FINISH_REASON_HOST_END_SHOW = 7;
    	SHOW_USER_FINISH_REASON_MULTI_GUEST_CLOSED = 8;
    	SHOW_USER_FINISH_REASON_MULTI_GUEST_RESUMED = 9;
    	SHOW_USER_FINISH_REASON_KICK_OUT_ALL_GUESTS = 10;
    	SHOW_USER_FINISH_REASON_MODERATOR_FINISH_SHOWING_GUEST = 11;
    	SHOW_USER_FINISH_REASON_MODERATOR_END_SHOW = 12;
    }

}

message WebcastSubWaveMessage {
    CommonMessageData baseMessage = 1;
    SubWaveImMsg subWaveImMsg = 2;
    

}

message BizResumeResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool isShowing = 1;
    	ShowContent showContent = 2;
    	repeated CountdownContent countdownContents = 3;
    	CountdownForAllContent countdownForAllContent = 4;
    	repeated NoticeboardContent noticeboardContents = 5;
    	ActivePlaybook activePlaybook = 6;
    	GuestShowdownContent guestShowdownContent = 7;
    

	}

}

message UpgradeInfo {
    bool isUpgrade = 1;
    int32 toGrade = 2;
    

}

message WebcastGameReqSetGuessMessage {
    CommonMessageData baseMessage = 1;
    Text toastContext = 2;
    string requestCntStr = 3;
    string limitSupremacyStr = 4;
    string capsuleCntStr = 5;
    

}

message WebcastLinkMicFanTicketMethod {
    CommonMessageData baseMessage = 1;
    FanTicketRoomNoticeContent fanTicketRoomNotice = 2;
    

}

message LinkMicAdContent {
    int64 roomId = 1;
    int64 adId = 2;
    int64 duration = 3;
    int64 playTimes = 4;
    string url = 5;
    

}

message VideoResource {
    string videoTypeName = 1;
    ResourceModel videoUrl = 2;
    string videoMd5 = 3;
    

}

message WebcastSpeakerMessage {
    CommonMessageData baseMessage = 1;
    

}

message GroupChannelAllUser {
    int64 groupChannelId = 1;
    repeated GroupChannelUser user = 2;
    int64 contentVersion = 3;
    

}

message RankAnimationInfo {
    

}

message CrowdSelectionResponse {
    Data data = 1;
    
    message Data {
    	int64 anchorCrowd = 1;
    

	}

}

message Product {
    string title = 1;
    ImageModel cover = 2;
    ProductPrice price = 3;
    

}

message CompetitionSettlementEndResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	CompetitionCommon bizCommon = 1;
    	CompetitionSettleEnd settleEnd = 2;
    

	}

}

message LiveEventInfo {
    int64 id = 1;
    string title = 2;
    
    enum EventPayMethod {
    	EVENT_PAY_METHOD_INVALID = 0;
    	EVENT_PAY_METHOD_COINS = 1;
    	EVENT_PAY_METHOD_CASH = 2;
    }

}

message SubPinCardText {
    TextType type = 1;
    string content = 2;
    
    enum TextType {
    	TEXT_TYPE_UNKNOWN = 0;
    	TEXT_TYPE_ORIGINAL = 1;
    	TEXT_TYPE_STARLING_KEY = 2;
    }

}

message WebcastLinkMicAnchorGuideMessage {
    CommonMessageData baseMessage = 1;
    string guideContent = 2;
    string buttonContent = 3;
    int32 connectType = 4;
    int32 guideType = 5;
    User user = 6;
    string logId = 7;
    ReserveInfo reserveInfo = 8;
    int32 buttonShowType = 9;
    OptPairInfo optPairInfo = 10;
    repeated UserModelPredictionData userModelPredictionData = 11;
    bool isFollowRival = 21;
    int32 availableFriendNumber = 22;
    

}

message MsgNotifyWatchContinuousQuota {
    int32 componentType = 1;
    int64 coutinuousRoomCnt = 2;
    int64 count = 3;
    

}

message HotfixGiftDataForProp {
    Text displayText = 1;
    string describe = 2;
    int64 giftId = 3;
    int64 groupCount = 4;
    int64 repeatCount = 5;
    int64 comboCount = 6;
    int64 msgId = 7;
    

}

message TriggerReserveNoticeResponse {
    ResponseData data = 1;
    
    message ResponseData {
    

	}

}

message PromoteOtherMessage {
    string recallToast = 1;
    

}

message CompetitionTeamBase {
    int64 teamId = 1;
    repeated CompetitionUserBase users = 2;
    

}

message ResourceModel {
    repeated string urlList = 1;
    string uri = 2;
    

}

message WebcastCompetitionMessage {
    CommonMessageData baseMessage = 1;
    CompetitionCommon bizCommon = 2;
    CompetitionMessageType type = 3;
    CompetitionInitiate initiate = 100;
    CompetitionReply reply = 101;
    CompetitionStart start = 102;
    CompetitionSettleStart settleStart = 103;
    CompetitionSettleEnd settleEnd = 104;
    CompetitionScoreChange scoreChange = 105;
    CompetitionFinish finish = 106;
    CompetitionSwitchTurn switchTurn = 107;
    
    enum CompetitionMessageType {
    	COMPETITION_MESSAGE_TYPE_UNKNOWN = 0;
    	COMPETITION_MESSAGE_TYPE_INITIATE = 1;
    	COMPETITION_MESSAGE_TYPE_REPLY = 2;
    	COMPETITION_MESSAGE_TYPE_START = 3;
    	COMPETITION_MESSAGE_TYPE_SETTLE_START = 4;
    	COMPETITION_MESSAGE_TYPE_SETTLE_END = 5;
    	COMPETITION_MESSAGE_TYPE_SCORE_CHANGE = 6;
    	COMPETITION_MESSAGE_TYPE_FINISH = 7;
    	COMPETITION_MESSAGE_TYPE_SWITCH_TURN = 8;
    }

}

message CompetitionCommon {
    BattleType type = 1;
    int64 channelId = 2;
    int64 competitionId = 3;
    int64 roomId = 4;
    string competitionIdStr = 5;
    string roomIdStr = 6;
    
    enum BattleType {
    	BATTLE_TYPE_1_V_N = 4;
    	BATTLE_TYPE_UNKNOWN_BATTLE_TYPE = 0;
    	BATTLE_TYPE_NORMAL_BATTLE = 1;
    	BATTLE_TYPE_TEAM_BATTLE = 2;
    	BATTLE_TYPE_INDIVIDUAL_BATTLE = 3;
    	BATTLE_TYPE_TAKE_THE_STAGE = 51;
    	BATTLE_TYPE_GROUP_SHOW = 52;
    }

}

message WebcastAvatarReportDeleteMessage {
    CommonMessageData baseMessage = 1;
    int64 avatarId = 2;
    int64 avatarOwnerUserId = 3;
    

}

message WebcastEffectPreloadingMessage {
    CommonMessageData baseMessage = 1;
    repeated int64 giftId = 2;
    repeated int64 effectId = 3;
    GiftIMPriority priority = 14;
    string logId = 16;
    

}

message PermitJoinGroupContent {
    GroupPlayer approver = 1;
    AgreeStatus agreeStatus = 2;
    JoinType type = 3;
    repeated RTCExtraInfo groupExtInfo = 4;
    GroupChannelAllUser groupUser = 5;
    MigrationDetails migrationDetails = 6;
    repeated string linkedUserUiPositions = 7;
    
    enum AgreeStatus {
    	AGREE_STATUS_AGREE_UNKNOWN = 0;
    	AGREE_STATUS_AGREE = 1;
    	AGREE_STATUS_REJECT = 2;
    }
    enum JoinType {
    	JOIN_TYPE_UNKNOWN = 0;
    	JOIN_TYPE_CHANNEL_APPLY = 1;
    	JOIN_TYPE_CHANNEL_INVITE = 2;
    	JOIN_TYPE_GROUP_APPLY = 100;
    	JOIN_TYPE_GROUP_APPLY_FOLLOW = 101;
    	JOIN_TYPE_GROUP_INVITE = 102;
    	JOIN_TYPE_GROUP_INVITE_FOLLOW = 103;
    	JOIN_TYPE_GROUP_OWNER_JOIN = 104;
    }

}

message MigrationDetails {
    bool isMigrate = 1;
    int64 sourceGroupChannelId = 2;
    int64 targetGroupChannelId = 3;
    

}

message ECTaskRegisterMessage {
    EcTaskRegisterMessageEntity entity = 2;
    

}

message FirstChargeData {
    bool isFirstCharge = 1;
    FirstChargeGuideEffectRule rule = 2;
    Diamond diamond = 3;
    int32 giftShowStyle = 4;
    

}

message DelayParam {
    int64 minDelayMs = 1;
    int64 maxDelayMs = 2;
    

}

message FlashSaleAtmosphereInfo {
    string productId = 1;
    int64 activityId = 2;
    FlashSaleAtmosphere flashSaleAtmosphere = 3;
    FlashSaleStock flashSaleStock = 4;
    bool pinnedProduct = 5;
    bool liveOnlyChannel = 6;
    int32 creatorLimitType = 7;
    

}

message WebcastEnvelopeMessage {
    CommonMessageData baseMessage = 1;
    MessageRedEnvelopInfo envelopeInfo = 2;
    EnvelopeDisplay display = 3;
    
    enum EnvelopeDisplay {
    	ENVELOPE_DISPLAY_UNKNOWN = 0;
    	ENVELOPE_DISPLAY_NEW = 1;
    	ENVELOPE_DISPLAY_HIDE = 2;
    }

}

message LinkmicInfo {
    string accessKey = 1;
    int64 linkmicId = 2;
    bool joinable = 3;
    int32 confluenceType = 4;
    string rtcExtInfo = 5;
    string rtcAppId = 6;
    string rtcAppSign = 7;
    string linkmicIdStr = 8;
    int32 vendor = 9;
    

}

message BattleABTestList {
    repeated BattleABTest abTestList = 1;
    

}

message LangTranslate {
    string locale = 1;
    string translateResult = 2;
    bool defaultTranslate = 3;
    

}

message CohostUserInfo {
    int64 permissionType = 1;
    SourceType sourceType = 2;
    bool isLowVersion = 3;
    int64 bestTeammateUid = 4;
    bool hasTopicPerm = 5;
    CohostStreamConfig streamConfig = 6;
    bool inDifferentInviteTypeControlGroup = 7;
    string nickname = 11;
    string displayId = 12;
    ImageModel avatarThumb = 13;
    int64 followStatus = 14;
    string userIdStr = 15;
    
    enum SourceType {
    	SOURCE_TYPE_UNKNOWN = 0;
    	SOURCE_TYPE_FRIEND_LIST = 1;
    	SOURCE_TYPE_RECOMMEND_LIST = 2;
    	SOURCE_TYPE_RECENT = 3;
    	SOURCE_TYPE_OTHER_FOLLOW = 4;
    	SOURCE_TYPE_QUICK_PAIR = 5;
    	SOURCE_TYPE_ACTIVITY = 6;
    	SOURCE_TYPE_QUICK_RECOMMEND = 7;
    	SOURCE_TYPE_OFFICIAL_CHANNEL = 8;
    	SOURCE_TYPE_BEST_TEAMMATE = 9;
    	SOURCE_TYPE_RESERVATION = 10;
    	SOURCE_TYPE_PAIRING = 11;
    	SOURCE_TYPE_PAIRING_ON_RESERVATION = 12;
    	SOURCE_TYPE_TOPIC_QUICK_PAIR = 13;
    	SOURCE_TYPE_TOPIC_QUICK_RECOMMEND = 14;
    	SOURCE_TYPE_ONLINE_FRIEND_CAPSULE = 15;
    	SOURCE_TYPE_WEEKLY_RANK = 20;
    	SOURCE_TYPE_HOURLY_RANK = 21;
    	SOURCE_TYPE_WEEKLY_RISING = 23;
    	SOURCE_TYPE_WEEKLY_ROOKIE = 24;
    	SOURCE_TYPE_CONNECTION_LIST = 25;
    	SOURCE_TYPE_DAILY_RANK = 26;
    	SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME = 27;
    	SOURCE_TYPE_RESERVATION_BUBBLE = 28;
    	SOURCE_TYPE_PAIRING_BUBBLE = 29;
    	SOURCE_TYPE_LEAGUE_PHASE_ONE = 30;
    	SOURCE_TYPE_LEAGUE_PHASE_TWO = 31;
    	SOURCE_TYPE_LEAGUE_PHASE_THREE = 32;
    	SOURCE_TYPE_DAILY_ROOKIE = 33;
    	SOURCE_TYPE_MAY_KNOW_LIST = 34;
    	SOURCE_TYPE_BANNER = 35;
    	SOURCE_TYPE_FANS_TEAM_RANK = 36;
    	SOURCE_TYPE_SEARCH = 37;
    	SOURCE_TYPE_E_OY_RANK_LIST = 38;
    	SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK = 39;
    	SOURCE_TYPE_CREATOR_CLASS_RANK = 40;
    	SOURCE_TYPE_HISTORY = 41;
    	SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST = 43;
    }

}

message BattleSetting {
    int64 battleId = 1;
    int64 startTimeMs = 2;
    int32 duration = 3;
    int64 channelId = 4;
    int32 status = 5;
    int32 inviteType = 6;
    GiftModeMeta giftModeMeta = 7;
    int32 battleType = 8;
    int64 extraDurationSecond = 9;
    int64 endTimeMs = 10;
    

}

message WebcastColdStartMessage {
    CommonMessageData baseMessage = 1;
    int32 msgType = 2;
    int32 status = 3;
    int64 viewerCount = 4;
    int64 totalCount = 5;
    

}

message FansClubMember {
    FansClubData data = 1;
    map<int32, FansClubData> preferData = 2;
    

}

message GroupLiveInfo {
    CompetitionInfo groupShow = 1;
    

}

message AboutMeResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	AboutMe aboutMe = 1;
    	BenefitsInfo benefitsInfo = 2;
    	IntroConflictInfo conflictInfo = 3;
    	int32 mergeType = 4;
    	bool oldVersion = 5;
    

	}

}

message WebcastCountdownForAllMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    CountdownForAllContent playContent = 3;
    LinkerMediaChangeOperator operatorUserInfo = 4;
    int32 playEndReason = 5;
    

}

message MultiGuestRecommendRoomInfo {
    int64 roomId = 1;
    User hostInfo = 2;
    repeated string hostRecoTags = 3;
    int64 guestNum = 4;
    int64 viewerNum = 5;
    string recoReason = 6;
    int64 recoRank = 7;
    

}

message WebcastGiftBroadcastMessage {
    CommonMessageData baseMessage = 1;
    int64 mFromUserId = 2;
    ImageModel mLeftIcon = 3;
    WebcastRoomNotifyMessage mNotifyMessage = 4;
    

}

message ChangePositionResp {
    repeated string linkedUserUiPositions = 2;
    

}

message MiddleTouchExtra {
    SubWaveData subWaveData = 1;
    SubGoalData subGoalData = 2;
    StreamGoalData liveGoalIndicatorStreamGoal = 3;
    GuessWidgetsData guessWidgetsData = 4;
    PlayTogetherWidgetsData playTogetherWidgetsData = 5;
    SubQueueData subQueueData = 6;
    

}

message BarrageTypeGiftGalleryParam {
    int64 fromUserId = 1;
    int64 toUserId = 2;
    

}

message CampaignBannerDisplayResult {
    int32 campaignBannerDisplayResult = 1;
    

}

message UrlDataStruct {
    string uri = 1;
    repeated string urlList = 2;
    int32 urlSubType = 3;
    string md5 = 4;
    repeated string urlPrefix = 5;
    

}

message CardObtainGuide {
    int32 notInUse = 1;
    

}

message LinkmicSettingmodel {
    int32 key = 1;
    int32 value = 2;
    

}

message PlayTogetherBasicInfo {
    string playTogetherId = 1;
    string description = 2;
    string applyNote = 3;
    PlayTogetherStatus status = 4;
    ApplyLimitType applyLimitType = 5;
    int64 applyUserNum = 6;
    bool isApplying = 7;
    int64 creatorId = 8;
    string creatorAvatar = 9;
    string creatorNickName = 10;
    
    enum ApplyLimitType {
    	APPLY_LIMIT_TYPE_ALL_USER = 0;
    	APPLY_LIMIT_TYPE_FOLLOWER_ONLY = 1;
    	APPLY_LIMIT_TYPE_CREATOR_TEAM_ONLY = 2;
    	APPLY_LIMIT_TYPE_SUBSCRIBER_ONLY = 3;
    }
    enum PlayTogetherStatus {
    	PLAY_TOGETHER_STATUS_UNKNOWN = 0;
    	PLAY_TOGETHER_STATUS_REVIEWING = 1;
    	PLAY_TOGETHER_STATUS_REVIEW_PASS = 2;
    	PLAY_TOGETHER_STATUS_DESC_NOT_PASS = 3;
    	PLAY_TOGETHER_STATUS_APPLY_NOTE_NOT_PASS = 4;
    	PLAY_TOGETHER_STATUS_ALL_NOT_REVIEW_PASS = 5;
    	PLAY_TOGETHER_STATUS_START = 6;
    	PLAY_TOGETHER_STATUS_END = 7;
    }

}

message BizLeaveJoinGroupParams {
    int64 notSuggestToUid = 1;
    

}

message ArrowConfig {
    ImageModel icon = 1;
    

}

message ManageViewerSingReq {
    LinkCommon common = 1;
    int64 channelId = 2;
    Player permiter = 3;
    Player applier = 4;
    ReplyStatus replyStatus = 5;
    DSLConfig dsl = 6;
    Player operator = 7;
    int64 songId = 8;
    BizPermitParams multiGuestReqExtra = 9527;
    

}

message DynamicListConfig {
    repeated string listSections = 1;
    map<string, SectionConfig> sectionConfigs = 2;
    
    message SectionConfig {
    	string schema = 1;
    	string initialData = 2;
    

	}

}

message BattleTeamUser {
    int64 userId = 1;
    int64 score = 2;
    string userIdStr = 3;
    

}

message OfficialChannelInfo {
    User channelUser = 1;
    string channelName = 2;
    int64 endTimeStamp = 3;
    int64 forbiddenBeforeEnd = 4;
    int64 maxNextTime = 5;
    map<int64, int64> delayEnterTime = 6;
    int64 backupRoomId = 7;
    string backupRoomIdStr = 8;
    int64 startTimeStamp = 9;
    int32 roleType = 10;
    bool existLinkmic = 11;
    int32 linkmicType = 12;
    

}

message GiftListAckResponse {
    Extra extra = 2;
    
    message Extra {
    	string logId = 1;
    

	}

}

message BestTeammateRelation {
    int64 userId = 1;
    int64 bestTeammateId = 2;
    

}

message GuessOptions {
    GuessText text = 1;
    GuessOptionStats guessOptionStats = 2;
    int64 serialNum = 3;
    string optionIdStr = 4;
    

}

message CompetitionSwitchTurnResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	CompetitionSwitchTurn switchTurnInfo = 1;
    

	}

}

message GuideInfoResponse {
    Data data = 1;
    
    message GuidePageResource {
    	repeated Text texts = 1;
    	repeated ImageModel icons = 2;
    	repeated ImageModel animations = 3;
    

	}
    message GuideEntry {
    	repeated GuidePageResource guidePageResources = 10;
    

	}
    message UserStats {
    	int64 giftPanelShowCnt = 1;
    	int64 shortcutGiftClickCnt = 2;
    	int64 giftGuidePopupShowCnt = 3;
    	int64 likeCnt = 4;
    	int64 watchDuration = 5;
    

	}
    message Data {
    	UserStats userStats = 1;
    	string guideType = 2;
    	string schemaUrl = 3;
    	bool shouldUseConfig = 4;
    	GuideEntry guideEntry = 5;
    	UGGiftTaskInfo ugGiftTaskInfo = 6;
    

	}

}

message CombineBadgeStruct {
    int32 badgeDisplayType = 1;
    ImageModel icon = 2;
    BadgeText text = 3;
    string str = 4;
    PaddingInfo padding = 5;
    FontStyle fontStyle = 6;
    ProfileCardPanel profileCardPanel = 7;
    CombineBadgeBackground background = 11;
    CombineBadgeBackground backgroundDarkMode = 12;
    bool iconAutoMirrored = 13;
    bool bgAutoMirrored = 14;
    int32 publicScreenShowStyle = 15;
    int32 personalCardShowStyle = 16;
    int32 rankListOnlineAudienceShowStyle = 17;
    int32 multiGuestShowStyle = 18;
    ArrowConfig arrowConfig = 19;
    PaddingInfo paddingNewFont = 20;
    

}

message CapsuleBizParamsNewAnchorEffect {
    string effectPanel = 1;
    string resourceId = 2;
    string categoryId = 3;
    string tabKey = 4;
    

}

message GroupChatWatchLiveInfo {
    int64 roomId = 1;
    User userInfo = 2;
    

}

message CompetitionUserBase {
    int64 userId = 1;
    CompetitionRoleType role = 2;
    string nickname = 3;
    ImageModel avatar = 4;
    string userIdStr = 5;
    
    enum CompetitionRoleType {
    	COMPETITION_ROLE_TYPE_UNKNOWN = 0;
    	COMPETITION_ROLE_TYPE_ANCHOR = 1;
    	COMPETITION_ROLE_TYPE_AUDIENCE = 2;
    }

}

message LiveStreamGoal {
    int64 id = 1;
    int32 type = 2;
    int32 status = 3;
    repeated LiveStreamSubGoal subGoals = 4;
    string description = 5;
    AuditStatus auditStatus = 6;
    int32 cycleType = 7;
    int64 startTime = 8;
    int64 expireTime = 9;
    int64 realFinishTime = 10;
    repeated LiveStreamGoalContributor contributors = 11;
    int32 contributorsLength = 12;
    string idStr = 13;
    string auditDescription = 14;
    GoalStats stats = 15;
    string goalExtraInfo = 16;
    int32 mode = 17;
    AuditInfo auditInfo = 18;
    string challengeType = 20;
    bool isUneditable = 21;
    
    message AuditInfo {
    	int64 violationId = 1;
    	int32 taskType = 2;
    

	}

}

message BubbleMetadata {
    string liveTaskId = 1;
    int32 liveTaskStatus = 2;
    

}

message LeaveJoinGroupResp {
    LinkMicCommonResp commonResp = 1;
    BizLeaveJoinGroupResponse cohostBizResp = 9527;
    

}

message WebcastPreviewGameMomentMessage {
    CommonMessageData baseMessage = 1;
    repeated PreviewGameMomentData momentDataList = 2;
    

}

message EffectingCard {
    repeated CriticalStrikeCardInfo criticalStrikeCards = 1;
    repeated SmokeCardInfo smokeCards = 2;
    repeated ExtraTimeCardInfo extraTimeCards = 3;
    repeated SpecialEffectCardInfo specialEffectCards = 4;
    repeated PotionCardInfo potionCards = 5;
    repeated WaveCardInfo waveCards = 6;
    repeated Top2CardInfo top2Cards = 7;
    repeated Top3CardInfo top3Cards = 8;
    

}

message WebcastGameRecommendCreateGuessMessage {
    CommonMessageData baseMessage = 1;
    string templateIdStr = 2;
    int64 betDurationInSecond = 3;
    GuessText guessTitle = 4;
    GuessText guessOpt1 = 5;
    GuessText guessOpt2 = 6;
    int64 dissMissDuration = 7;
    int64 tipsType = 8;
    int64 tipsLimit = 9;
    string serverTimestampStr = 10;
    string expireTime = 11;
    

}

message LiveFlashSaleInfo {
    int64 activityId = 1;
    int32 type = 2;
    int32 status = 3;
    int32 stockStatus = 4;
    int32 availableStock = 5;
    

}

message LinkerMuteContent {
    int64 userId = 1;
    MuteStatus muteStatus = 2;
    
    enum MuteStatus {
    	MUTE_STATUS_MUTE = 0;
    	MUTE_STATUS_UN_MUTE = 1;
    }

}

message BannerCollapseInfo {
    Text title = 1;
    ImageModel image = 2;
    bool enabled = 3;
    string backgroundColor = 4;
    int64 collapseHeight = 5;
    string verticalLineColor = 6;
    

}

message WebcastVideoLiveGoodsOrderMessage {
    CommonMessageData baseMessage = 1;
    User user = 2;
    GoodsOrder goodsOrder = 3;
    
    message GoodsOrder {
    	int64 goodsRoomOrder = 1;
    	int64 orderNum = 2;
    	int64 orderMoney = 3;
    	string orderId = 4;
    

	}

}

message FansLevelUpgradeInfo {
    int64 userId = 1;
    int64 anchorId = 2;
    int64 level = 3;
    int64 levelUpgradeExpiredTime = 4;
    

}

message LinkLayerListUser {
    Player linkUser = 1;
    string linkMicId = 2;
    MicPositionData positionData = 3;
    int64 linkedTimeNano = 4;
    string appVersion = 5;
    

}

message BattleTask {
    BattleBonusConfig battleBonusConfig = 1;
    BattleBonusStatus battleBonusStatus = 2;
    

}

message NoticeboardEndResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool success = 1;
    	NoticeboardContent noticeboardContent = 2;
    

	}

}

message WebcastStarCommentNotificationMessage {
    CommonMessageData baseMessage = 1;
    StarCommentAction starCommentAction = 2;
    int64 msgId = 3;
    User operator = 4;
    StarCommentMessage starCommentMessage = 5;
    
    enum StarCommentAction {
    	STAR_COMMENT_ACTION_UNKNOWN = 0;
    	STAR_COMMENT_ACTION_DELETED = 1;
    	STAR_COMMENT_ACTION_POLLING = 2;
    }

}

message HourlyRankRewardInfo {
    int64 userId = 1;
    int64 assetId = 2;
    WebcastRoomNotifyMessage notifyMessage = 3;
    BorderInfo borderInfo = 4;
    

}

message WebcastInRoomBannerRefreshMessage {
    CommonMessageData baseMessage = 1;
    int32 delaySeconds = 2;
    bool onlyAnchor = 3;
    

}

message BoostedUsersPoint {
    int64 mPointTimeStamp = 1;
    int64 mTotalUsers = 2;
    

}

message RealtimeReminderWordInfoMsg {
    Scene scene = 1;
    Text title = 2;
    string content = 3;
    string messageKey = 4;
    

}

message PreviewPeriod {
    int64 duration = 1;
    BattlePrompt promot = 2;
    ImageModel icon = 25;
    

}

message GameAction {
    GameActionType actionType = 1;
    JumpPage jumpPage = 2;
    int64 followUserId = 3;
    
    enum GameActionType {
    	GAME_ACTION_TYPE_SHOW = 0;
    	GAME_ACTION_TYPE_JUMP = 1;
    	GAME_ACTION_TYPE_FOLLOW = 2;
    	GAME_ACTION_TYPE_COMMENT = 3;
    }
    enum JumpPage {
    	JUMP_PAGE_GIFT_GOAL_SOURCE = 0;
    	JUMP_PAGE_GIFT_ALERT_SOURCE = 1;
    	JUMP_PAGE_COHOST_SETTING = 2;
    	JUMP_PAGE_GIFT_ER_RANK_LIST = 3;
    	JUMP_PAGE_WEEKLY_GAME_RANK_LIST = 4;
    	JUMP_PAGE_FANS_CLUB = 5;
    	JUMP_PAGE_GOODY_BAG_SETTING = 6;
    	JUMP_PAGE_GAME_GUESS_SETTING = 7;
    	JUMP_PAGE_ADMIN_SETTING = 8;
    	JUMP_PAGE_GIFT_ALERT_TT_S = 9;
    	JUMP_PAGE_LIVE_GOAL = 10;
    	JUMP_PAGE_TREASURE_BOX = 11;
    	JUMP_PAGE_GAME_REWARDS = 12;
    	JUMP_PAGE_POLL = 13;
    	JUMP_PAGE_SUBSCRIPTION = 14;
    	JUMP_PAGE_MONET_IZ_ATION_TIPS_SETTING = 15;
    	JUMP_PAGE_EXTENDING_COUNTDOWN = 16;
    	JUMP_PAGE_PLAY_TOGETHER = 17;
    	JUMP_PAGE_MULTI_GUEST = 18;
    	JUMP_PAGE_PARTNERSHIP = 19;
    	JUMP_PAGE_GIFT_NOTIFICATION = 20;
    	JUMP_PAGE_GIFT_GALLERY = 21;
    }

}

message TeamUsersInfo {
    int64 teamId = 1;
    repeated int64 userIds = 2;
    

}

message GuestShowdownUpdateParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 playId = 3;
    int32 guestShowdownUpdateScene = 4;
    GuestShowdownConfigChange configChange = 5;
    

}

message WebcastRoomStickerMessage {
    CommonMessageData baseMessage = 1;
    repeated RoomSticker stickerList = 2;
    

}

message FinishChannelContent {
    Player owner = 1;
    int64 finishReason = 2;
    

}

message BizReplyResponseData {
    int64 linkTypePermission = 1;
    int32 layoutTypeAction = 2;
    int32 fixMicNumAction = 3;
    WebcastPerceptionMessage hostPerceptionInfo = 5;
    

}

message PosIdentity {
    PosIdentityType type = 1;
    string value = 2;
    
    enum PosIdentityType {
    	POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT = 0;
    	POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID = 1;
    	POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID = 2;
    	POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID = 3;
    }

}

message WebcastOChannelUserMessage {
    CommonMessageData baseMessage = 1;
    int64 startTimeStamp = 2;
    int64 maxEnterTime = 3;
    

}

message ResumeReq {
    LinkCommon common = 1;
    Player myself = 2;
    int64 channelId = 3;
    BizResumeParams multiGuestReqExtra = 9527;
    

}

message WallpaperContext {
    int64 userId = 1;
    int64 wallpaperStartTime = 2;
    string nickname = 3;
    ImageModel avatarThumb = 4;
    string userKeywords = 5;
    string linkmicIdStr = 6;
    

}

message BizPermitResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	WebcastPerceptionMessage hostPerceptionInfo = 1;
    

	}

}

message WebcastGiftProgressMessage {
    CommonMessageData baseMessage = 1;
    string progressType = 2;
    repeated ProgressStruct progress = 3;
    
    message ProgressStruct {
    	int64 progressId = 1;
    	int64 progressValue = 2;
    	int32 progressStatus = 3;
    

	}

}

message Text {
    string key = 1;
    string defaultPattern = 2;
    TextFormat defaultFormat = 3;
    repeated TextPiece pieces = 4;
    

}

message GiftsBoxInfo {
    repeated GiftInfoInBox gifts = 1;
    

}

message AudienceReserveContent {
    int64 fromUserId = 1;
    User user = 2;
    

}

message WebcastOecLiveManagerMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    PurchaseProductInfo purchaseProductInfo = 3;
    SubscriptionInfo subscriptionInfo = 4;
    GiveawayInfo giveawayInfo = 5;
    AskDemoInfo askDemoInfo = 6;
    

}

message TopicSessionStatus {
    int64 sessionId = 1;
    int64 sessionHeat = 2;
    

}

message WebcastDiggMessage {
    CommonMessageData baseMessage = 1;
    int32 diggCount = 2;
    int32 duration = 3;
    int32 color = 4;
    User user = 5;
    string icon = 6;
    

}

message WebcastAILiveSummaryMessage {
    CommonMessageData baseMessage = 1;
    AILiveSummary aiLiveSummary = 2;
    

}

message EffectListResponse {
    Data data = 1;
    
    message Data {
    	string version = 1;
    	Panel panel = 2;
    	repeated EffectStruct effects = 3;
    	repeated EffectStruct collection = 4;
    	repeated EffectCategory category = 5;
    	string frontEffectId = 6;
    	string rearEffectId = 7;
    	repeated string urlPrefix = 8;
    	map<string, string> extra = 9;
    

	}

}

message P2PGroupChangeContent {
    repeated RTCExtraInfo groupExtInfo = 1;
    GroupChannelAllUser groupUser = 2;
    MigrationDetails migrationDetails = 3;
    repeated ContentPosition contentPos = 4;
    

}

message GiftResultData {
    Text displayText = 1;
    string describe = 2;
    int64 giftId = 3;
    int32 groupCount = 4;
    int32 repeatCount = 5;
    int32 comboCount = 6;
    int64 msgId = 7;
    Text trayDisplayText = 8;
    GiftTrayInfo mTrayInfo = 10;
    Gift mGift = 11;
    Text displayTextForAnchor = 12;
    Text displayTextForAudience = 13;
    GiftsBoxInfo giftsInBox = 14;
    AssetsModel giftAsset = 15;
    

}

message TransitionConfig {
    int64 configId = 1;
    ImageModel resourceImage = 2;
    

}

message PartnershipInfo {
    bool partnershipRoom = 1;
    string promotingTaskId = 2;
    repeated string taskIdList = 3;
    string promotingGameId = 4;
    string showTaskId = 5;
    string promotingDropsId = 6;
    bool promotingRoom = 7;
    int32 promotingTaskType = 8;
    int32 showTaskType = 9;
    

}

message RefreshPaidStreamResp {
    ResponseData data = 1;
    
    message ResponseData {
    	StreamUrl streamUrl = 1;
    	StreamUrl multiStreamUrl = 2;
    

	}

}

message GiftLockInfo {
    bool mLock = 1;
    int32 mLockType = 2;
    int32 giftLevel = 3;
    bool highlightEnabled = 4;
    string unlockButtonText = 5;
    string unlockSchema = 6;
    

}

message GuestShowdownConfig {
    int64 duration = 1;
    int32 loserNum = 2;
    

}

message LinkGetSettingResult {
    AnchorLinkmicUserSettings settings = 1;
    

}

message WebcastAnchorToolModificationMessage {
    CommonMessageData baseMessage = 1;
    AnchorToolModification modification = 2;
    

}

message WebcastLiveIntroMessage {
    CommonMessageData baseMessage = 1;
    int64 id = 2;
    AuditStatus auditStatus = 3;
    string content = 4;
    User user = 5;
    int32 introMode = 6;
    repeated BadgeStruct badges = 7;
    string contentLanguage = 8;
    

}

message CapsuleBizParamsMultiGuestInviteGuide {
    User inviteeUser = 1;
    int32 displayStrategy = 2;
    string linkmicAudienceInviteNoticeReason = 3;
    

}

message LinkerCloseContent {
    

}

message CompetitionABInfo {
    TakeTheStageABInfo tts = 1;
    
    message TakeTheStageABInfo {
    	bool atmosphereAnimation = 1;
    	bool atmosphereDuration = 2;
    

	}

}

message GiftIconInfo {
    int64 mIconId = 1;
    string mName = 2;
    int64 mValidStartAt = 3;
    int64 mValidEndAt = 4;
    string mIconUri = 5;
    ImageModel mIcon = 6;
    bool mWith_effect = 7;
    string mEffectUri = 8;
    ImageModel mEffect = 9;
    

}

message GiftFavouriteSaveResponse {
    Data data = 1;
    
    message Data {
    	bool success = 1;
    	repeated int64 favouriteGiftIds = 2;
    

	}

}

message GiftRecord {
    Message message = 1;
    Gift gift = 2;
    User fromUser = 3;
    repeated string tags = 4;
    
    message User {
    	int64 id = 1;
    	string nickname = 2;
    	ImageModel avatar = 3;
    

	}
    message Gift {
    	int64 id = 1;
    	string name = 2;
    	ImageModel image = 3;
    	int32 giftCount = 4;
    

	}
    message Message {
    	int64 msgId = 1;
    	int64 groupId = 2;
    	int64 createdOnTimestamp = 3;
    

	}

}

message WebcastMGPunishCenterActionMessage {
    CommonMessageData baseMessage = 1;
    int32 actionType = 2;
    

}

message UnionAnimationInfo {
    UnionAnimationInfoType unionType = 1;
    ProfitRankType rankTypeArray = 2;
    int64 supportedVersion = 3;
    
    enum ProfitRankType {
    	PROFIT_RANK_TYPE_DAILY_ROOKIE = 14;
    	PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1;
    	PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5;
    	PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6;
    	PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7;
    	PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8;
    	PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9;
    	PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11;
    	PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12;
    	PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21;
    	PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22;
    	PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13;
    	PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24;
    	PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25;
    }
    enum UnionAnimationInfoType {
    	UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION = 0;
    	UNION_ANIMATION_INFO_TYPE_LOOP = 1;
    	UNION_ANIMATION_INFO_TYPE_LOCK = 2;
    }

}

message SubInfo {
    string userId = 1;
    string anchorId = 2;
    int64 subStartTime = 3;
    int64 subEndTime = 4;
    int64 nextRenewTime = 5;
    int32 subscribedMonth = 6;
    bool isSubscribing = 7;
    SubLevel subLevel = 8;
    PayStatus status = 9;
    bool subInfoNotFound = 10;
    string skuName = 11;
    PayChannel payChannel = 12;
    GraceInfo graceInfo = 13;
    PriceChangeInfo priceChangeInfo = 16;
    SubOperation lastOperation = 17;
    string packageId = 18;
    int64 subCircle = 19;
    int32 renewalPeriod = 20;
    bool isMocked = 21;
    
    enum PayStatus {
    	PAY_STATUS_SUB_STATUS_UNKNOWN = 0;
    	PAY_STATUS_SUB_STATUS_ONE_TIME = 1;
    	PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION = 2;
    	PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION_CANCELED = 3;
    	PAY_STATUS_SUB_STATUS_REVOKE = 4;
    }
    enum PayChannel {
    	PAY_CHANNEL_PAY_CHAN_UNKNOWN = 0;
    	PAY_CHANNEL_PAY_CHAN_COINS = 1;
    	PAY_CHANNEL_PAY_CHAN_I_AP_CASH = 2;
    	PAY_CHANNEL_PAY_CHAN_WEB_APP = 3;
    	PAY_CHANNEL_PAY_CHAN_GIFT_SUB = 4;
    }

}

message ListChangeBizContent {
    map<int64, CohostUserInfo> userInfos = 1;
    repeated VirtualWaitingUser waitingUsers = 2;
    

}

message NoticeboardGetUserRestrictedHistoryResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	map<string, int32> restrictedMap = 1;
    

	}

}

message FlashSaleAtmosphere {
    int32 status = 1;
    int64 startTime = 2;
    int64 endTime = 3;
    int64 preheatTime = 4;
    

}

message PayGradeInfo {
    UserGrade userGrade = 1;
    UpgradeInfo upgradeInfo = 2;
    

}

message AnchorReplayInfoResponse {
    AnchorReplayInfoData data = 1;
    

}

message RankListTabInfo {
    repeated RankTabInfo tabs = 1;
    int64 supportedVersion = 2;
    

}

message BetStats {
    string betOption = 1;
    int64 betPoints = 2;
    int64 winPoints = 3;
    int64 refundPoints = 4;
    int64 rollbackPoints = 5;
    int64 betTimes = 6;
    

}

message PurchaseProductInfo {
    User user = 1;
    Product product = 2;
    

}

message JoinGroupResp {
    LinkMicCommonResp commonResp = 1;
    GroupChannelAllUser groupUser = 2;
    repeated string linkedUserUiPositions = 3;
    repeated RTCExtraInfo groupRtcInfo = 4;
    BizJoinGroupResponse cohostRespExtra = 9527;
    

}

message DisplayControl {
    int32 priority = 1;
    int64 duration = 2;
    map<int32, ShowResult> targetGroupShowRst = 3;
    HorizontalOnclickTriggerType horizontalTriggerType = 4;
    
    enum HorizontalOnclickTriggerType {
    	HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN = 0;
    	HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT = 1;
    	HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE = 2;
    	HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT = 3;
    	HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA = 4;
    }

}

message WebcastPictionaryExitMessage {
    CommonMessageData baseMessage = 1;
    int64 sessionId = 2;
    bool showStats = 3;
    int32 pictionaryType = 4;
    

}

message SubscribeInfo {
    bool isAnchorQualified = 1;
    bool isSubscribed = 2;
    SubscribeBadge subscribeBadge = 3;
    bool anchorEnableSubscription = 4;
    int32 subscriberCount = 5;
    bool isInGracePeriod = 6;
    bool isSubscribedToCurrentAnchor = 7;
    TimerDetail timerDetail = 8;
    bool userGiftSubAuth = 9;
    bool anchorGiftSubAuth = 10;
    PayStatus status = 11;
    int64 subEndTime = 12;
    string packageId = 13;
    string solRoomDisplayText = 14;
    bool isSolEligible = 15;
    
    enum PayStatus {
    	PAY_STATUS_SUB_STATUS_UNKNOWN = 0;
    	PAY_STATUS_SUB_STATUS_ONE_TIME = 1;
    	PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION = 2;
    	PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION_CANCELED = 3;
    	PAY_STATUS_SUB_STATUS_REVOKE = 4;
    }

}

message LiveJourneyImMessage {
    string msg = 1;
    int64 level = 2;
    int32 type = 3;
    

}

message WebcastQuestionNewMessage {
    CommonMessageData baseMessage = 1;
    Question question = 2;
    

}

message WebcastCountdownMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    CountdownContent countdownContent = 3;
    LinkerMediaChangeOperator operatorUserInfo = 4;
    

}

message WebcastGameServerFeatureMessage {
    CommonMessageData baseMessage = 1;
    repeated GameServerFeature allFeatures = 2;
    

}

message OwnerSettingResponse {
    Data data = 1;
    
    message Data {
    	bool success = 1;
    

	}

}

message MsgNotifyWatchEarlyQuota {
    int32 componentType = 1;
    int64 watchMillSeconds = 2;
    int64 count = 3;
    

}

message GuessTaskPackInfo {
    repeated GameTaskInfo tasksInfo = 1;
    TaskWidgetConfig config = 2;
    

}

message WebcastPlaybookMessage {
    CommonMessageData baseMessage = 1;
    MessageType messageType = 2;
    int64 playId = 3;
    int32 playStatus = 4;
    string title = 5;
    string coverUrl = 6;
    int32 playbookEndReason = 7;
    

}

message WebcastGiftRecordCapsuleMessage {
    CommonMessageData baseMessage = 1;
    string extra = 2;
    

}

message ResumeResp {
    LinkMicCommonResp commonResp = 1;
    repeated LinkedUserInfo linkedUserInfo = 2;
    int64 channelId = 3;
    string selfLinkMicId = 4;
    AllListUser list = 5;
    repeated string rejectEnlargeLinkmicIdList = 6;
    repeated string linkedUserUiPositions = 7;
    repeated ContentPosition contentPos = 8;
    repeated PosIdentity uiPos = 9;
    BizResumeResponse multiGuestRespExtra = 9527;
    

}

message UserVoteOptionInfo {
    int64 voteOptionIndex = 1;
    int64 voteCount = 2;
    

}

message LiveMessageSEI {
    LiveMessageID uniqueID = 1;
    int64 timestamp = 2;
    

}

message CohostHistoryResponse {
    ResponseData data = 1;
    
    message Host {
    	int64 userId = 1;
    	int64 historyGroupChannelId = 2;
    

	}
    message User {
    	int64 userId = 1;
    	int64 points = 2;
    

	}
    message Team {
    	repeated User users = 1;
    

	}
    message MatchRecord {
    	int64 matchId = 1;
    	int64 historyGroupChannelId = 2;
    	int32 matchType = 3;
    	int64 startTimestampSec = 4;
    	int32 result = 6;
    	Team myTeam = 7;
    	repeated Team opposingTeams = 8;
    

	}
    message TakeTheStageUser {
    	int64 userId = 1;
    	int64 rank = 2;
    	int64 points = 3;
    

	}
    message TakeTheStageRecord {
    	int64 showdownId = 1;
    	int64 startTimestampSec = 2;
    	int64 historyGroupChannelId = 3;
    	TakeTheStageUser myTakeTheStageInfo = 4;
    	repeated TakeTheStageUser otherTakeTheStageInfos = 5;
    

	}
    message CohostSession {
    	int64 id = 1;
    	int64 startTimestampSec = 3;
    	int64 viewersAccumulated = 4;
    	repeated Host hosts = 5;
    	repeated MatchRecord matchRecords = 6;
    	repeated TakeTheStageRecord takeTheStageRecords = 7;
    

	}
    message UserInfo {
    	Room room = 1;
    	RivalExtraInfo extraInfo = 2;
    

	}
    message ResponseData {
    	repeated CohostSession cohostSessions = 1;
    	map<int64, UserInfo> userInfos = 2;
    	int64 oldestTimestampSec = 10;
    	bool hasMore = 11;
    

	}

}

message WebcastQuickChatListMessage {
    CommonMessageData baseMessage = 1;
    int64 duration = 2;
    repeated QuickChatContent contentList = 3;
    int64 priority = 4;
    Scene scene = 5;
    

}

message RecommendComment {
    int64 priority = 1;
    int64 duration = 2;
    Text recommendText = 3;
    int64 tipsType = 4;
    

}

message WebcastPartnershipCardChangeMessage {
    CommonMessageData baseMessage = 1;
    int32 changeMode = 2;
    int32 sequenceId = 3;
    string taskId = 4;
    

}

message CurrentInteractionQuestion {
    Question question = 1;
    int64 likeCnt = 2;
    int32 selfLikeStatus = 3;
    int32 favoriteStatus = 4;
    

}

message Prop {
    int32 primaryEffectId = 1;
    int64 nextExpire = 2;
    string description = 3;
    int64 id = 4;
    string manual = 5;
    int32 diamond = 6;
    bool reddotTip = 7;
    ImageModel icon = 8;
    int32 count = 9;
    string name = 10;
    Gift gift = 11;
    ImageModel labelIcon = 12;
    bool isFragment = 13;
    int64 fragmentsCompoundCount = 14;
    int32 isAwemeFreeGift = 15;
    ImageModel diamondLabel = 16;
    BannerInRoom banner = 17;
    int64 propType = 18;
    repeated HotfixGiftDataForProp gifts = 19;
    string schemeUrl = 20;
    

}

message AssetsListResult {
    repeated AssetsModel assets = 1;
    

}

message FeedBannerContainer {
    repeated FeedBanner bannerList = 1;
    int32 total = 2;
    ImageModel background = 3;
    string title = 4;
    int32 switchType = 5;
    int32 bannersType = 6;
    

}

message PaidEventPreview {
    int64 allowPreview = 1;
    int64 allowPreviewTime = 2;
    

}

message CombineBadgeBackground {
    ImageModel image = 1;
    string backgroundColorCode = 2;
    string borderColorCode = 3;
    

}

message StarCommentPurchaseResponse {
    Data data = 1;
    Extra extra = 2;
    
    message Data {
    	int32 purchaseResult = 1;
    	StarCommentQueue queue = 2;
    	int64 serverCurMsgStartTimeMs = 3;
    	PayGradeInfo payGradeInfo = 4;
    	int64 roomUserCount = 5;
    	int64 coins = 6;
    	int64 msgId = 7;
    

	}
    message Extra {
    	RechargeCustomError customError = 1;
    

	}

}

message QuizUserIdentityInfo {
    MessageType messageType = 1;
    string quizId = 2;
    int32 quizType = 3;
    string extra = 4;
    int32 userDataVersion = 5;
    string deviceId = 6;
    int32 userStatus = 7;
    int32 respawnBalance = 8;
    int32 doubleBonusBalance = 9;
    int32 spectatorType = 10;
    bool isQuestionEncrypt = 11;
    string questionEncryptKey = 12;
    repeated QuizUserQuestionResult userQuestionResult = 13;
    int32 availableRespawnBalance = 14;
    int32 availableDoubleBonusBalance = 15;
    bool isRetainIfWrong = 16;
    repeated UserLiveEventInfo userLiveEventInfos = 17;
    repeated QuizUserIdentityInfo userIdentityInfos = 18;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;
    

}

message GetLiveEventUserResponse {
    ResponseData data = 1;
    
    message InvitedListUser {
    	User user = 1;
    

	}
    message RegisteredListUser {
    	User user = 1;
    	bool alreadyRead = 2;
    	int64 registeredTime = 3;
    

	}
    message ResponseData {
    	repeated InvitedListUser invitedUsers = 1;
    	repeated RegisteredListUser registeredUsers = 2;
    

	}

}

message GuessRankUserInfo {
    string avatarUri = 1;
    

}

message ShopBrandLogo {
    string sellerName = 1;
    ImageModel sellerLogo = 2;
    ImageModel blueVImage = 3;
    ImageModel darkBlueVImage = 4;
    ImageModel topBrandImage = 5;
    ImageModel darkTopBrandImage = 6;
    

}

message ChannelInfo {
    int32 layout = 1;
    int32 vendor = 2;
    int32 dimension = 3;
    int64 innerChannelId = 4;
    int64 groupChannelId = 5;
    

}

message GuessWidget {
    int64 versionId = 1;
    GuessRound guessRound = 2;
    repeated BetStats betStats = 3;
    

}

message LinkListUser {
    User user = 1;
    int64 modifyTime = 2;
    int32 linkType = 3;
    int32 roleType = 4;
    string linkMicId = 5;
    int64 payedMoney = 6;
    int64 fanTicket = 7;
    int32 fanTicketType = 8;
    int32 linkUserType = 9;
    

}

message GoodyBagWinnerInfo {
    GoodyBagUserInfo userInfo = 1;
    int32 coins = 2;
    

}

message BizJoinGroupResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	int32 perceptionStatus = 1;
    	WebcastPerceptionMessage perceptionMessage = 2;
    

	}

}

message TaskWidgetConfig {
    int32 refreshGap = 1;
    int32 showCountdownTime = 2;
    int32 redPointShowTime = 3;
    

}

message LiveGiftBoostCardUserStatusResponse {
    int64 mTotalUsers = 1;
    repeated BoostedUsersPoint mPoints = 2;
    

}

message Room {
    int64 id = 1;
    string idStr = 2;
    int32 status = 3;
    int64 ownerUserId = 4;
    string title = 5;
    int32 userCount = 6;
    int64 createTime = 7;
    int64 finishTime = 9;
    int32 platform = 16;
    string clientVersion = 17;
    bool withLinkMic = 18;
    ImageModel cover = 20;
    ImageModel dynamicCover = 21;
    ImageModel dynamicCoverLow = 22;
    string shareUrl = 23;
    string anchorShareText = 24;
    string userShareText = 25;
    int64 streamId = 26;
    StreamUrl streamUrl = 28;
    int32 mosaicStatus = 29;
    RoomLinkInfo linkMicInfoGson = 32;
    repeated RoomDecoration decorationList = 34;
    repeated TopFanTicket topFanTickets = 35;
    RoomStats stats = 36;
    ImageModel feedRoomLabel = 42;
    string labels = 43;
    User owner = 46;
    bool hasCommerceGoods = 48;
    bool liveTypeAudio = 51;
    bool isThirdParty = 52;
    bool isScreenshot = 53;
    bool liveTypeSandbox = 54;
    int64 startTime = 63;
    RoomAuthStatus mRoomAuthStatus = 72;
    ImageModel background = 83;
    int64 layout = 84;
    bool unusedEffect = 90;
    int32 giftMessageStyle = 91;
    string finish_url = 93;
    int32 roomLayout = 101;
    int64 likeCount = 111;
    int64 anchorTabType = 120;
    OfficialChannelInfo officialChannelInfo = 122;
    map<string, int64> linkerMap = 130;
    int64 webcastSdkVersion = 138;
    int32 mNameMode = 139;
    string roomCreateAbParam = 140;
    CommerceStruct commerceStruct = 145;
    ImageModel streamCover = 147;
    int32 questionVersion = 149;
    LiveEventInfo liveEventInfo = 151;
    Hashtag hashtag = 152;
    BALinkStruct baLinkStruct = 153;
    string answeringQuestion = 155;
    WarningTag warningTag = 157;
    MaskLayer maskLayer = 158;
    int32 liveRoomMode = 159;
    string finishUrlLynx = 163;
    LikeInfo likeInfo = 165;
    repeated ShortTouchItem shortTouchItems = 166;
    repeated LiveFilterMsgRule filterRule = 167;
    LiveGiftBoostCardRoomStatus mBoostCardRoomStatus = 169;
    repeated FeedRoomLabel feedRoomLabelList = 170;
    bool haveWishList = 172;
    MultiLiveUserSettings multiLiveUserSettings = 174;
    InteractionQuestionInfo interactionQuestion = 176;
    repeated RoomSticker roomStickerList = 177;
    repeated GameTag gameTags = 178;
    PollInfo advancedPollInfo = 179;
    bool giftPollVoteEnabled = 180;
    Skin skin = 182;
    ImageModel squareCoverImg = 183;
    ImageModel rectangleCoverImg = 184;
    RoomAuthMessage mRoomAuthMessage = 185;
    PaidEvent paidEvent = 186;
    PictionaryFullInfo pictionaryFullInfo = 187;
    AgeRestricted ageRestricted = 189;
    PinInfo pinInfo = 191;
    repeated string mIndicators = 192;
    TopFrameSummary topFrameSummary = 193;
    BcToggleInfo bcToggleInfo = 194;
    int32 commentHasTextEmojiEmote = 196;
    PartnershipInfo partnershipInfo = 197;
    int32 streamStatus = 198;
    Creator creator = 199;
    string drawerTabPosition = 200;
    BaLeadsGenInfo baLeadsGenInfo = 201;
    repeated EffectInfo effectInfo = 202;
    int32 audioMute = 203;
    EventCard liveEventCard = 204;
    int64 liveSubOnly = 205;
    int64 supportQuiz = 206;
    map<int64, int64> adminEcShowPermission = 207;
    ImageModel blurredCover = 208;
    CaptionInfo captionInfo = 209;
    int64 adjustDisplayOrder = 210;
    CommerceStruct commerceInfoBackup = 211;
    int64 allowPreviewTime = 212;
    PaidContentInfo paidContentInfo = 213;
    SubPinCard subPinCard = 214;
    int64 enableServerDrop = 215;
    int64 disablePreviewSubOnly = 216;
    bool liteUserVisible = 217;
    bool liteUserNotVisible = 218;
    int64 dropCommentGroup = 219;
    int32 picoLiveType = 220;
    GiftSuspension giftSuspension = 221;
    bool pollingStarComment = 222;
    bool hasUsedMusic = 223;
    LiveProInfo anchorLiveProInfo = 224;
    repeated string rankCommentGroups = 225;
    int64 multiStreamScene = 226;
    int64 multiStreamId = 227;
    string multiStreamIdStr = 228;
    StreamUrl multiStreamUrl = 229;
    string idcRegion = 230;
    RegionalRestricted regionalRestricted = 231;
    CommercialContentToggle commercialContentToggle = 232;
    int64 maxPreviewTime = 233;
    KaraokeInfo karaokeInfo = 234;
    StarCommentConfig starCommentConfig = 235;
    bool showStarCommentEntrance = 236;
    int32 cppVersion = 237;
    int64 liveSubOnlyUseMusic = 238;
    LikeEffect likeEffect = 239;
    int64 roomPcu = 240;
    FYPCommerceStruct fypCommerceInfo = 241;
    int64 netMode = 242;
    string rtcAppId = 245;
    int64 gameDemo = 246;
    QuickGift quickGift = 247;
    OnlineAudience onlineAudience = 248;
    repeated ProtoMessageFetchResult.BaseProtoMessage historyCommentList = 249;
    bool hasMoreHistoryComment = 250;
    string historyCommentCursor = 251;
    LikeIconInfo likeIconInfo = 253;
    GuessWidgets guessWidgets = 254;
    GuessTaskPackInfo guessTaskPackInfo = 255;
    CurrentInteractionQuestion currentInteractionQuestion = 256;
    PollConf pollConf = 257;
    EpiphronDecision decisions = 258;
    AggregationData aggregationData = 259;
    PlayTogetherBasicInfo playTogetherInfo = 260;
    int32 multiStreamSource = 261;
    HighlightFragmentInfo highlightFragmentInfo = 262;
    map<int64, MsgNotifyQuota> quotaConfig = 263;
    LiveRecordConfig liveRecordConfig = 264;
    int64 effectFrameUploadDemotion = 265;
    SubUpsellInfo subUpsellInfo = 266;
    int64 coverType = 267;
    bool reposted = 268;
    RepostInfo repostInfo = 269;
    DropsRoomInfo dropsInfo = 270;
    bool enableStreamEncryption = 271;
    bool disableScreenRecord = 272;
    GameTagDetail gameTagDetail = 273;
    bool enableOptimizeSensitiveWord = 274;
    CustomTabInfo customTabInfo = 275;
    string roomLlmTitle = 276;
    GameEmotesTab gameEmotesTab = 277;
    BcToggleInfo officialChannelBcToggleInfo = 280;
    LiveProInfo officialChannelAnchorLiveProInfo = 281;
    PreviewCommentInfo previewCommentInfo = 282;
    int32 ecAgeInterval = 283;
    TaxonomyTagInfo taxonomyTagInfo = 284;
    int64 subTag = 285;
    int64 liveSubOnlyTier = 286;
    int64 liveSubOnlyMonth = 287;
    MsgNotifyComAvoidConfig avoidConfig = 288;
    bool aigcSelfDisclosureSwitch = 289;
    repeated EcommerceRoomTag ecommerceRoomTags = 290;
    GroupLiveInfo groupLiveInfo = 291;
    GroupLiveSession groupLiveSession = 292;
    map<int64, MsgNotifyWatchEarlyQuota> watchEarlyQuotaConfig = 293;
    map<int64, MsgNotifyWatchContinuousQuota> continuousRoomQuotaConfig = 294;
    int64 maxContinueWatchMillSeconds = 295;
    AILiveSummary aiLiveSummary = 296;
    ParallelPullStreamInfo parallelPullStreamInfo = 297;
    GameGiftGuideKeywordsConfig gameGiftGuideConfig = 298;
    repeated RoomSticker bizStickerList = 299;
    repeated string emojiList = 300;
    QueueInfo queueInfo = 301;
    

}

message AllListUser {
    repeated LinkLayerListUser linkedList = 2;
    repeated LinkLayerListUser appliedList = 3;
    repeated LinkLayerListUser invitedList = 4;
    repeated LinkLayerListUser readyList = 5;
    

}

message WebcastScreenChatMessage {
    CommonMessageData baseMessage = 1;
    User userInfo = 2;
    int32 chatType = 3;
    string content = 4;
    int32 priority = 5;
    CeremonyEffect effect = 6;
    ImageModel backgroundImage = 7;
    CeremonyEffect ceremonyEffect = 8;
    ImageModel background = 9;
    PublicAreaCommon publicAreaCommon = 10;
    

}

message WebcastGameEmoteUpdateMessage {
    CommonMessageData baseMessage = 1;
    GameEmotesTab gameEmotesTab = 2;
    

}

message WebcastBoostCardMessage {
    CommonMessageData baseMessage = 1;
    repeated BoostCard mCards = 3;
    

}

message GroupChatLiveEntranceResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	int32 entranceStatus = 1;
    	repeated GroupChatWatchLiveInfo watchLiveInfos = 2;
    

	}

}

message RoomReplay {
    string id = 1;
    int64 createTime = 2;
    int64 finishTime = 3;
    int64 momentGenStats = 4;
    int64 pushStatus = 5;
    repeated RoomReplayMoment moments = 6;
    bool available = 7;
    ImageModel cover = 8;
    string title = 9;
    string fragmentId = 10;
    int32 liveMode = 11;
    string playUrl = 12;
    string downloadUrl = 13;
    int64 fanTicket = 14;
    int64 totalUser = 15;
    int64 punishType = 16;
    int64 fragmentCount = 17;
    int64 markCount = 18;
    string playUrlVcodec = 19;
    int64 startTime = 20;
    string failedReason = 21;
    int64 generateDuration = 22;
    int32 replayPrompt = 23;
    int32 status = 24;
    string m3u8Url = 25;
    VideoInfo videoInfo = 26;
    int32 watchStatus = 27;
    string vid = 28;
    repeated FragmentTypeCount fragmentCountWithType = 29;
    VideoMetaInfo mp4VideoMetaInfo = 30;
    repeated SpriteImageItem spriteList = 31;
    RemuxInfo remuxInfo = 32;
    VideoMetaInfo hlsVideoMetaInfo = 33;
    TranscodeInfo transcodeInfo = 34;
    int32 downloadMode = 35;
    string roomIdEncode = 36;
    string messageContentPb = 38;
    repeated int64 startOffsets = 39;
    repeated int64 endOffsets = 40;
    

}

message LinkerUpdateUserContent {
    int64 fromUserId = 1;
    int64 toUserId = 2;
    map<string, string> updateInfo = 3;
    

}

message CheckLineupResponse {
    ResponseData data = 1;
    
    message ResponseData {
    	bool disconnect = 1;
    

	}

}

message ColdStartStat {
    int32 seconds = 1;
    int64 totalCount = 2;
    int64 viewerCount = 3;
    

}

message RTCOther {
    int32 transCodingSecond = 1;
    

}

message FilterInfoData {
    bool isFiltered = 1;
    string reason = 2;
    

}

message SubLevel {
    int32 level = 1;
    string desc = 2;
    int32 monthLimit = 3;
    LevelBadge badge = 4;
    BadgeStruct badgeStruct = 5;
    

}

message ShortTouchPollData {
    string pollId = 1;
    int64 pollEndTime = 2;
    bool pollShowResult = 3;
    

}

message TeamMatchCampaign {
    repeated BestTeammateRelation bestTeammateRelation = 1;
    repeated int64 startSfxTeamId = 2;
    bool hasTeamMatchMvpSfx = 3;
    

}

message WebcastRoomPinMessage {
    CommonMessageData baseMessage = 1;
    WebcastChatMessage chatMessage = 2;
    WebcastSocialMessage socialMessage = 3;
    WebcastGiftMessage giftMessage = 4;
    WebcastMemberMessage memberMessage = 5;
    WebcastLikeMessage likeMessage = 6;
    string method = 30;
    int64 pinTime = 31;
    User operator = 32;
    int32 action = 33;
    int64 displayDuration = 34;
    int64 pinId = 35;
    string ecStreamerKey = 36;
    

}

message BizApplyResponse {
    BizApplyResponseData responseData = 1;
    

}

message CppBannerInfo {
    int32 cppBannerStatusEnum = 1;
    

}

message PollStartContent {
    int64 startTime = 1;
    int64 endTime = 2;
    repeated PollOptionInfo optionList = 3;
    string title = 4;
    User operator = 5;
    

}

message ProductPrice {
    string formatPrice = 1;
    

}

message UpdateShowContentParams {
    int64 roomId = 1;
    int64 channelId = 2;
    int64 showId = 3;
    int32 updateType = 4;
    bool allowOpenMicFreely = 5;
    int64 targetUserId = 6;
    int64 preUserId = 7;
    int64 nextUserId = 8;
    int64 transitionDurationOfConfig = 9;
    

}

message GuessRoundStats {
    int64 memberNums = 1;
    int64 pointsNum = 2;
    int64 pointsSplitNum = 3;
    int64 pointsVotedToAnchor = 4;
    

}

message LinkmicUser {
    int64 userId = 1;
    int64 roomId = 2;
    string linkMicIdStr = 3;
    string nickName = 4;
    string displayId = 5;
    ImageModel avatar = 6;
    string userIdStr = 7;
    string roomIdStr = 8;
    

}

message WebcastProjectDModifyH5 {
    CommonMessageData baseMessage = 1;
    string mTopLeftUrl = 2;
    string mBottomRightUrl = 3;
    

}

message BattleUserInfo {
    BattleBaseUserInfo user = 1;
    repeated BattleRivalTag tags = 2;
    

}

message BillboardDisplayResult {
    int32 billboardType = 1;
    string billboardId = 2;
    int32 displayResult = 3;
    

}

message CreateInfoPerceptionMessage {
    string title = 1;
    string subTitle = 2;
    string detailUrl = 3;
    PunishEventInfo punishInfo = 4;
    int32 accessType = 5;
    

}

message CohostABTestList {
    repeated CohostABTest abTestList = 1;
    

}

message RechargeReq {
    LinkCommon common = 1;
    int64 channelId = 2;
    Player myself = 3;
    Player target = 4;
    int32 type = 5;
    int64 routeId = 6;
    

}

message LikeInfo {
    int32 clickCnt = 1;
    int32 showCnt = 2;
    

}

message AboutMeInputBox {
    string guideContent = 1;
    int32 maxCharacterCount = 2;
    string content = 3;
    

}

message LinkerMicIdxUpdateContent {
    LinkerMicIdxUpdateInfo micIndexUpdateInfo = 1;
    

}

message TopFanTicket {
    int64 fanTicket = 1;
    User user = 2;
    

}

message ExampleSetting {
    int64 value = 1;
    

}

message RoomStats {
    int64 id = 1;
    string idStr = 2;
    int64 ticket = 3;
    int32 totalUser = 5;
    int32 giftUVCount = 6;
    int32 followCount = 7;
    int32 watermelon = 9;
    int32 enterCount = 11;
    int32 replayViewers = 16;
    int32 shareCount = 17;
    

}

message GameGiftGuideKeyword {
    int64 type = 1;
    string value = 2;
    string regrexPattern = 3;
    

}

message RoomNotifyMessageExtra {
    int64 duration = 1;
    Background background = 2;
    NotifyHighlightInfo highlightInfo = 3;
    
    message Background {
    

	}

}

message WebcastRoomStreamAdaptationMessage {
    CommonMessageData baseMessage = 1;
    int64 action = 2;
    SubjectPositionInfo subjectPositionInfo = 3;
    

}

message WebcastLinkmicBattleNoticeMessage {
    CommonMessageData baseMessage = 1;
    BattleNoticeType noticeType = 2;
    BattleNoticeAnchorGuide anchorGuide = 3;
    BattleNoticeToast toast = 4;
    BattleNoticeBubbleGuide bubbleGuide = 5;
    BattleNoticeAnchorGiftGuide anchorGiftGuide = 6;
    BattleNoticeRuleGuide battleRuleGuide = 7;
    BattleNoticeCommonGuide commonGuide = 8;
    BattleNoticeExtremeHighScoreNotice extremeHighScoreNotice = 9;
    
    enum BattleNoticeType {
    	BATTLE_NOTICE_TYPE_ANCHOR_GUIDE = 0;
    	BATTLE_NOTICE_TYPE_TOAST = 1;
    	BATTLE_NOTICE_TYPE_BUBBLE_GUIDE = 2;
    	BATTLE_NOTICE_TYPE_ANCHOR_GIFT_GUIDE = 3;
    	BATTLE_NOTICE_TYPE_RULE_GUIDE = 4;
    	BATTLE_NOTICE_TYPE_ANCHOR_MULTI_MATCH_GUIDE = 5;
    	BATTLE_NOTICE_TYPE_COMMON_GUIDE = 6;
    	BATTLE_NOTICE_TYPE_EXTREME_HIGH_SCORE = 7;
    }

}

message UseExtraTimeCard {
    ExtraTimeCardInfo cardInfo = 1;
    int64 anchorId = 2;
    Text displayContent = 3;
    

}

message BizJoinDirectResponseData {
    int64 replyImMsgId = 1;
    int64 linkTypePermission = 2;
    int32 layoutTypeAction = 3;
    int32 fixMicNumAction = 4;
    

}

message LinkMicCommonResp {
    int64 errorCode = 1;
    string errorMsg = 2;
    map<string, bytes> extra = 3;
    

}

message TransitionInfo {
    int64 userId = 1;
    string linkmicIdStr = 2;
    string nickname = 3;
    ImageModel avatarThumb = 4;
    int64 transitionDurationOfCurrent = 5;
    int64 transitionStartTime = 6;
    

}

message LayoutState {
    string layoutId = 1;
    

}

message AILiveSummary {
    string roomLlmTitle = 1;
    string resultKey = 2;
    int64 createTimestamp = 3;
    int32 aiLiveSummarySwitch = 4;
    

}

message GetUserPlaySettingsParams {
    repeated string settingKeys = 1;
    

}

message RivalsListExtra {
    LogPbBean logPbBean = 1;
    
    message LogPbBean {
    	string imprId = 1;
    	string clientLogId = 2;
    

	}

}

message LiveGiftBoostCardAckResponse {
    

}

message BattleTruthOrDare {
    bool triggered = 1;
    string ruleDetailUrl = 2;
    string anchorRegion = 3;
    string lapGuideKey = 4;
    int32 lapGuideDurationSecond = 5;
    

}

message MicPositionData {
    int32 type = 1;
    LinkPosition linkPosition = 2;
    

}

message FontStyle {
    int32 fontSize = 1;
    int32 fontWidth = 2;
    string fontColor = 3;
    string borderColor = 4;
    

}

message VirtualWaitingUser {
    int64 sendUserId = 1;
    int64 sendTimestamp = 2;
    repeated ImageModel avatars = 3;
    

}

message AccessControlCaptcha {
    int64 captchaRecordId = 1;
    int64 roomId = 2;
    int64 verifyDurationInSec = 3;
    

}

message DSLConfig {
    int32 sceneVersion = 1;
    string layoutId = 2;
    

}

message QuizAnswerInfo {
    MessageType messageType = 1;
    string quizId = 2;
    int32 quizType = 3;
    string extra = 4;
    int64 participantsCount = 5;
    string questionId = 6;
    int32 questionNo = 7;
    int32 questionCount = 8;
    int32 questionType = 9;
    string title = 10;
    repeated QuizImage image = 11;
    repeated QuizQuestionOption options = 12;
    string correctAnswer = 15;
    QuizStatistics statistics = 16;
    repeated QuizNextQuiz nextQuiz = 17;
    string rewardAmount = 18;
    repeated QuizImage correctAnswerImage = 19;
    string sponsorCode = 20;
    int32 displayDurationMs = 21;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;
    

}

message CustomTab {
    int64 id = 1;
    string tabTitle = 2;
    string tabSchema = 3;
    int32 tabSchemaType = 4;
    int64 tabPriority = 5;
    

}

message FlashSaleStock {
    int32 activityStockStatus = 1;
    int32 activityStock = 2;
    string activityStockText = 3;
    

}

message CompetitionReply {
    CompetitionReplyType replyType = 1;
    CompetitionUserBase replier = 2;
    CompetitionInitiate initiate = 3;
    map<int64, CompetitionABInfo> abInfo = 4;
    TakeTheStageBiz takeTheStageBiz = 100;
    
    enum CompetitionReplyType {
    	COMPETITION_REPLY_TYPE_UNKNOWN = 0;
    	COMPETITION_REPLY_TYPE_ACCEPT = 1;
    	COMPETITION_REPLY_TYPE_REJECT = 2;
    	COMPETITION_REPLY_TYPE_WITHDRAW = 3;
    }
    message AnchorInfo {
    	int64 userId = 1;
    

	}
    message TakeTheStageBiz {
    	TakeTheStageStatus takeTheStageStatus = 1;
    	int64 performanceStartTime = 2;
    	repeated AnchorInfo anchors = 3;
    
    	enum TakeTheStageStatus {
    		TAKE_THE_STAGE_STATUS_UNKNOWN = 0;
    		TAKE_THE_STAGE_STATUS_NOT_STARTED = 1;
    		TAKE_THE_STAGE_STATUS_CANCELLED = 2;
    		TAKE_THE_STAGE_STATUS_STARTED = 3;
    		TAKE_THE_STAGE_STATUS_FINAL_CALL = 4;
    		TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5;
    		TAKE_THE_STAGE_STATUS_FINISHED = 6;	
    }

	}

}

message CreateShowParams {
    int64 roomId = 1;
    int64 channelId = 2;
    ShowConfig showConfig = 3;
    repeated ListUser showUsers = 4;
    
    message ListUser {
    	int64 userId = 1;
    	string linkmicId = 2;
    	int32 order = 3;
    

	}

}

message DiffInfo {
    UrlDataStruct diffUrl = 1;
    UrlDataStruct baseUrl = 2;
    string extra = 3;
    

}

message AtmosphereTagInfo {
    int32 tagType = 1;
    repeated ProductAtmosphereTag atmosphereTags = 2;
    repeated ProductAtmosphereTag pinAtmosphereTags = 3;
    

}

message WebcastGoodyBagMessage {
    CommonMessageData baseMessage = 1;
    GoodyBagBaseInfo baseInfo = 2;
    repeated GoodyBagWinnerInfo winners = 3;
    GoodyBagMessageType type = 4;
    
    enum GoodyBagMessageType {
    	GOODY_BAG_MESSAGE_TYPE_UNKNOWN = 0;
    	GOODY_BAG_MESSAGE_TYPES_END = 1;
    	GOODY_BAG_MESSAGE_TYPE_JOIN = 2;
    	GOODY_BAG_MESSAGE_TYPE_WINNERS_INFO = 3;
    }

}

message PromotionInfo {
    string promotionId = 1;
    repeated string productIds = 100;
    

}
